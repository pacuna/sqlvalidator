// Code generated from HiveParser.g4 by ANTLR 4.7.1. DO NOT EDIT.

package hive // HiveParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 377, 4444,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322,
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327,
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331,
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336,
	9, 336, 4, 337, 9, 337, 4, 338, 9, 338, 4, 339, 9, 339, 4, 340, 9, 340,
	4, 341, 9, 341, 4, 342, 9, 342, 4, 343, 9, 343, 4, 344, 9, 344, 4, 345,
	9, 345, 4, 346, 9, 346, 4, 347, 9, 347, 4, 348, 9, 348, 4, 349, 9, 349,
	4, 350, 9, 350, 4, 351, 9, 351, 4, 352, 9, 352, 4, 353, 9, 353, 4, 354,
	9, 354, 4, 355, 9, 355, 4, 356, 9, 356, 4, 357, 9, 357, 4, 358, 9, 358,
	4, 359, 9, 359, 4, 360, 9, 360, 4, 361, 9, 361, 4, 362, 9, 362, 4, 363,
	9, 363, 4, 364, 9, 364, 4, 365, 9, 365, 4, 366, 9, 366, 4, 367, 9, 367,
	4, 368, 9, 368, 4, 369, 9, 369, 4, 370, 9, 370, 4, 371, 9, 371, 4, 372,
	9, 372, 4, 373, 9, 373, 4, 374, 9, 374, 4, 375, 9, 375, 4, 376, 9, 376,
	4, 377, 9, 377, 4, 378, 9, 378, 4, 379, 9, 379, 4, 380, 9, 380, 4, 381,
	9, 381, 4, 382, 9, 382, 4, 383, 9, 383, 4, 384, 9, 384, 4, 385, 9, 385,
	4, 386, 9, 386, 4, 387, 9, 387, 4, 388, 9, 388, 4, 389, 9, 389, 4, 390,
	9, 390, 4, 391, 9, 391, 4, 392, 9, 392, 4, 393, 9, 393, 4, 394, 9, 394,
	4, 395, 9, 395, 4, 396, 9, 396, 4, 397, 9, 397, 4, 398, 9, 398, 4, 399,
	9, 399, 4, 400, 9, 400, 4, 401, 9, 401, 4, 402, 9, 402, 4, 403, 9, 403,
	4, 404, 9, 404, 4, 405, 9, 405, 4, 406, 9, 406, 4, 407, 9, 407, 4, 408,
	9, 408, 4, 409, 9, 409, 4, 410, 9, 410, 4, 411, 9, 411, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 5, 2, 829, 10, 2, 3, 3, 3, 3, 7, 3, 833, 10, 3, 12,
	3, 14, 3, 836, 11, 3, 3, 3, 3, 3, 3, 3, 5, 3, 841, 10, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 852, 10, 4, 3, 4, 5, 4, 855,
	10, 4, 5, 4, 857, 10, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 875, 10, 7, 3, 8,
	3, 8, 3, 8, 5, 8, 880, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 885, 10, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 5, 8, 891, 10, 8, 3, 9, 3, 9, 5, 9, 895, 10, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10,
	908, 10, 10, 3, 11, 3, 11, 5, 11, 912, 10, 11, 3, 11, 3, 11, 5, 11, 916,
	10, 11, 3, 11, 3, 11, 3, 11, 5, 11, 921, 10, 11, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 5, 12, 928, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 934,
	10, 12, 3, 12, 3, 12, 5, 12, 938, 10, 12, 5, 12, 940, 10, 12, 3, 12, 3,
	12, 5, 12, 944, 10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 951,
	10, 13, 5, 13, 953, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 959, 10,
	13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 7, 15, 968, 10, 15,
	12, 15, 14, 15, 971, 11, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16,
	978, 10, 16, 3, 16, 3, 16, 5, 16, 982, 10, 16, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 1023, 10, 17, 3, 18, 3, 18, 3, 18, 3,
	19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22,
	3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3,
	25, 5, 25, 1050, 10, 25, 3, 25, 3, 25, 5, 25, 1054, 10, 25, 3, 25, 5, 25,
	1057, 10, 25, 3, 25, 3, 25, 3, 25, 5, 25, 1062, 10, 25, 3, 26, 3, 26, 3,
	26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 7, 28, 1074, 10, 28,
	12, 28, 14, 28, 1077, 11, 28, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30,
	5, 30, 1085, 10, 30, 3, 30, 3, 30, 5, 30, 1089, 10, 30, 3, 31, 3, 31, 3,
	31, 3, 32, 3, 32, 5, 32, 1096, 10, 32, 3, 32, 5, 32, 1099, 10, 32, 3, 32,
	3, 32, 5, 32, 1103, 10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 1109, 10,
	32, 3, 32, 5, 32, 1112, 10, 32, 3, 32, 5, 32, 1115, 10, 32, 3, 32, 5, 32,
	1118, 10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 1124, 10, 32, 3, 32, 5,
	32, 1127, 10, 32, 3, 32, 5, 32, 1130, 10, 32, 3, 32, 5, 32, 1133, 10, 32,
	3, 32, 5, 32, 1136, 10, 32, 3, 32, 5, 32, 1139, 10, 32, 3, 32, 5, 32, 1142,
	10, 32, 3, 32, 5, 32, 1145, 10, 32, 3, 32, 5, 32, 1148, 10, 32, 3, 32,
	3, 32, 5, 32, 1152, 10, 32, 5, 32, 1154, 10, 32, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 1164, 10, 33, 3, 34, 3, 34, 3, 34,
	5, 34, 1169, 10, 34, 3, 34, 3, 34, 5, 34, 1173, 10, 34, 3, 34, 5, 34, 1176,
	10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	5, 35, 1187, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 5, 35, 1200, 10, 35, 3, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 1215,
	10, 36, 3, 36, 3, 36, 5, 36, 1219, 10, 36, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5,
	37, 1235, 10, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 5, 39, 1248, 10, 39, 3, 40, 3, 40, 5, 40, 1252, 10,
	40, 3, 41, 3, 41, 3, 41, 5, 41, 1257, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	5, 46, 1284, 10, 46, 3, 47, 3, 47, 3, 47, 5, 47, 1289, 10, 47, 3, 48, 3,
	48, 3, 48, 5, 48, 1294, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50,
	5, 50, 1302, 10, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1308, 10, 50, 3,
	50, 3, 50, 5, 50, 1312, 10, 50, 3, 50, 5, 50, 1315, 10, 50, 3, 50, 5, 50,
	1318, 10, 50, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1324, 10, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 5, 51, 1331, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52,
	3, 52, 3, 53, 3, 53, 3, 53, 5, 53, 1341, 10, 53, 3, 54, 3, 54, 5, 54, 1345,
	10, 54, 3, 54, 6, 54, 1348, 10, 54, 13, 54, 14, 54, 1349, 3, 55, 3, 55,
	5, 55, 1354, 10, 55, 3, 56, 3, 56, 7, 56, 1358, 10, 56, 12, 56, 14, 56,
	1361, 11, 56, 3, 57, 3, 57, 7, 57, 1365, 10, 57, 12, 57, 14, 57, 1368,
	11, 57, 3, 58, 3, 58, 7, 58, 1372, 10, 58, 12, 58, 14, 58, 1375, 11, 58,
	3, 59, 3, 59, 3, 59, 3, 60, 3, 60, 5, 60, 1382, 10, 60, 3, 60, 3, 60, 3,
	60, 7, 60, 1387, 10, 60, 12, 60, 14, 60, 1390, 11, 60, 3, 60, 5, 60, 1393,
	10, 60, 3, 60, 5, 60, 1396, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61,
	3, 61, 5, 61, 1404, 10, 61, 3, 61, 5, 61, 1407, 10, 61, 3, 62, 3, 62, 3,
	62, 3, 62, 3, 62, 3, 62, 5, 62, 1415, 10, 62, 3, 62, 5, 62, 1418, 10, 62,
	3, 63, 3, 63, 5, 63, 1422, 10, 63, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 5, 65, 1432, 10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1437,
	10, 65, 3, 66, 3, 66, 5, 66, 1441, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 1452, 10, 68, 3, 69, 3, 69, 3,
	69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 71, 7, 71,
	1466, 10, 71, 12, 71, 14, 71, 1469, 11, 71, 3, 72, 3, 72, 3, 72, 3, 72,
	3, 73, 3, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 1484,
	10, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76,
	3, 76, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 1500, 10, 77, 3, 77, 3, 77, 3,
	77, 3, 77, 3, 77, 5, 77, 1507, 10, 77, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79,
	3, 79, 3, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 5, 81, 1521, 10, 81, 3,
	81, 3, 81, 3, 81, 3, 81, 5, 81, 1527, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5,
	83, 1543, 10, 83, 3, 83, 5, 83, 1546, 10, 83, 3, 84, 3, 84, 3, 84, 3, 84,
	3, 84, 3, 85, 3, 85, 3, 85, 5, 85, 1556, 10, 85, 3, 85, 3, 85, 3, 85, 3,
	85, 3, 85, 3, 85, 5, 85, 1564, 10, 85, 7, 85, 1566, 10, 85, 12, 85, 14,
	85, 1569, 11, 85, 5, 85, 1571, 10, 85, 3, 86, 3, 86, 5, 86, 1575, 10, 86,
	3, 87, 3, 87, 5, 87, 1579, 10, 87, 3, 87, 5, 87, 1582, 10, 87, 3, 88, 3,
	88, 3, 88, 5, 88, 1587, 10, 88, 3, 88, 3, 88, 3, 88, 5, 88, 1592, 10, 88,
	3, 88, 3, 88, 3, 88, 3, 88, 5, 88, 1598, 10, 88, 3, 89, 3, 89, 3, 89, 3,
	89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 5, 89, 1609, 10, 89, 5, 89, 1611,
	10, 89, 3, 89, 3, 89, 5, 89, 1615, 10, 89, 3, 90, 3, 90, 3, 90, 3, 90,
	5, 90, 1621, 10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1627, 10, 90, 3,
	90, 3, 90, 3, 90, 5, 90, 1632, 10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90,
	1638, 10, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1643, 10, 90, 3, 90, 3, 90, 3,
	90, 3, 90, 3, 90, 5, 90, 1650, 10, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1655,
	10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1663, 10, 90,
	3, 90, 3, 90, 3, 90, 5, 90, 1668, 10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3,
	90, 5, 90, 1675, 10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1681, 10, 90,
	3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1689, 10, 90, 3, 90, 3,
	90, 3, 90, 3, 90, 3, 90, 5, 90, 1696, 10, 90, 3, 90, 3, 90, 3, 90, 5, 90,
	1701, 10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1709, 10,
	90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1716, 10, 90, 3, 90, 5, 90,
	1719, 10, 90, 3, 90, 5, 90, 1722, 10, 90, 5, 90, 1724, 10, 90, 3, 90, 3,
	90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90,
	5, 90, 1738, 10, 90, 5, 90, 1740, 10, 90, 3, 91, 3, 91, 3, 91, 3, 91, 5,
	91, 1746, 10, 91, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 93,
	3, 93, 3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 1761, 10, 94, 3, 95, 3, 95, 3,
	95, 3, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 97, 3, 97, 3, 97, 3, 97, 3, 98,
	3, 98, 3, 98, 5, 98, 1778, 10, 98, 3, 98, 3, 98, 3, 98, 5, 98, 1783, 10,
	98, 3, 99, 3, 99, 5, 99, 1787, 10, 99, 3, 99, 3, 99, 5, 99, 1791, 10, 99,
	3, 99, 3, 99, 3, 99, 3, 100, 3, 100, 5, 100, 1798, 10, 100, 3, 100, 3,
	100, 3, 100, 7, 100, 1803, 10, 100, 12, 100, 14, 100, 1806, 11, 100, 3,
	100, 3, 100, 3, 100, 5, 100, 1811, 10, 100, 3, 101, 3, 101, 5, 101, 1815,
	10, 101, 3, 101, 5, 101, 1818, 10, 101, 3, 101, 3, 101, 3, 101, 7, 101,
	1823, 10, 101, 12, 101, 14, 101, 1826, 11, 101, 3, 101, 3, 101, 3, 101,
	3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 103, 3, 103, 3, 103, 3, 104,
	3, 104, 3, 104, 3, 104, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 5, 105,
	1848, 10, 105, 3, 106, 3, 106, 3, 106, 5, 106, 1853, 10, 106, 3, 106, 3,
	106, 5, 106, 1857, 10, 106, 3, 107, 3, 107, 3, 107, 3, 107, 3, 108, 3,
	108, 5, 108, 1865, 10, 108, 3, 109, 3, 109, 3, 109, 3, 110, 3, 110, 3,
	110, 5, 110, 1873, 10, 110, 3, 110, 3, 110, 5, 110, 1877, 10, 110, 3, 110,
	3, 110, 3, 110, 3, 110, 5, 110, 1883, 10, 110, 3, 111, 3, 111, 3, 111,
	5, 111, 1888, 10, 111, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 5, 111,
	1895, 10, 111, 3, 111, 5, 111, 1898, 10, 111, 3, 111, 3, 111, 3, 111, 3,
	111, 5, 111, 1904, 10, 111, 3, 112, 3, 112, 3, 112, 7, 112, 1909, 10, 112,
	12, 112, 14, 112, 1912, 11, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113,
	5, 113, 1919, 10, 113, 3, 114, 3, 114, 3, 115, 3, 115, 3, 115, 7, 115,
	1926, 10, 115, 12, 115, 14, 115, 1929, 11, 115, 3, 116, 3, 116, 3, 116,
	3, 116, 3, 116, 3, 116, 5, 116, 1937, 10, 116, 3, 117, 3, 117, 3, 117,
	3, 117, 3, 118, 3, 118, 3, 118, 3, 118, 3, 119, 3, 119, 3, 119, 3, 119,
	3, 120, 3, 120, 3, 120, 3, 120, 3, 121, 3, 121, 5, 121, 1957, 10, 121,
	3, 121, 3, 121, 3, 121, 3, 121, 5, 121, 1963, 10, 121, 3, 121, 5, 121,
	1966, 10, 121, 5, 121, 1968, 10, 121, 3, 122, 3, 122, 3, 122, 7, 122, 1973,
	10, 122, 12, 122, 14, 122, 1976, 11, 122, 3, 123, 3, 123, 3, 123, 3, 124,
	3, 124, 3, 125, 3, 125, 5, 125, 1985, 10, 125, 3, 125, 3, 125, 3, 125,
	3, 125, 3, 125, 3, 125, 5, 125, 1993, 10, 125, 3, 126, 3, 126, 5, 126,
	1997, 10, 126, 3, 126, 3, 126, 5, 126, 2001, 10, 126, 3, 126, 3, 126, 3,
	127, 3, 127, 3, 127, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 5,
	128, 2014, 10, 128, 3, 128, 3, 128, 3, 128, 3, 129, 3, 129, 3, 129, 3,
	129, 5, 129, 2023, 10, 129, 3, 129, 3, 129, 3, 130, 3, 130, 5, 130, 2029,
	10, 130, 3, 130, 3, 130, 5, 130, 2033, 10, 130, 3, 130, 3, 130, 3, 130,
	3, 130, 3, 130, 5, 130, 2040, 10, 130, 3, 130, 5, 130, 2043, 10, 130, 3,
	130, 5, 130, 2046, 10, 130, 3, 130, 5, 130, 2049, 10, 130, 3, 130, 3, 130,
	3, 130, 3, 131, 3, 131, 3, 131, 3, 131, 5, 131, 2058, 10, 131, 3, 131,
	3, 131, 5, 131, 2062, 10, 131, 3, 131, 5, 131, 2065, 10, 131, 3, 131, 5,
	131, 2068, 10, 131, 3, 131, 5, 131, 2071, 10, 131, 3, 131, 5, 131, 2074,
	10, 131, 3, 131, 5, 131, 2077, 10, 131, 3, 131, 3, 131, 3, 131, 3, 132,
	3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 133, 3, 133, 3, 133, 5, 133,
	2091, 10, 133, 3, 133, 3, 133, 3, 134, 3, 134, 3, 134, 3, 134, 5, 134,
	2099, 10, 134, 3, 134, 3, 134, 3, 135, 3, 135, 5, 135, 2105, 10, 135, 3,
	136, 3, 136, 5, 136, 2109, 10, 136, 3, 137, 3, 137, 3, 137, 3, 138, 3,
	138, 3, 138, 3, 138, 3, 138, 3, 138, 7, 138, 2120, 10, 138, 12, 138, 14,
	138, 2123, 11, 138, 3, 138, 3, 138, 3, 139, 3, 139, 3, 139, 3, 139, 3,
	139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 5, 139, 2138, 10,
	139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 140, 3, 140, 3, 140, 3, 140, 3,
	140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 5, 140, 2154, 10, 140, 3,
	141, 3, 141, 5, 141, 2158, 10, 141, 3, 142, 3, 142, 3, 142, 3, 143, 3,
	143, 3, 143, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5,
	144, 2173, 10, 144, 3, 145, 3, 145, 3, 145, 3, 145, 5, 145, 2179, 10, 145,
	3, 145, 5, 145, 2182, 10, 145, 3, 145, 5, 145, 2185, 10, 145, 3, 145, 5,
	145, 2188, 10, 145, 3, 145, 5, 145, 2191, 10, 145, 3, 146, 3, 146, 5, 146,
	2195, 10, 146, 3, 147, 3, 147, 3, 147, 3, 148, 3, 148, 3, 148, 3, 148,
	3, 149, 3, 149, 3, 149, 7, 149, 2207, 10, 149, 12, 149, 14, 149, 2210,
	11, 149, 3, 149, 3, 149, 3, 149, 7, 149, 2215, 10, 149, 12, 149, 14, 149,
	2218, 11, 149, 5, 149, 2220, 10, 149, 3, 150, 3, 150, 3, 150, 3, 150, 3,
	151, 3, 151, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5,
	152, 2235, 10, 152, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3,
	154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 155, 3, 155, 3, 155, 3,
	155, 3, 155, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 157, 3, 157, 3,
	157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 2269,
	10, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 2277,
	10, 157, 3, 157, 3, 157, 3, 157, 5, 157, 2282, 10, 157, 3, 158, 3, 158,
	3, 158, 3, 159, 3, 159, 3, 159, 7, 159, 2290, 10, 159, 12, 159, 14, 159,
	2293, 11, 159, 3, 160, 3, 160, 3, 160, 7, 160, 2298, 10, 160, 12, 160,
	14, 160, 2301, 11, 160, 3, 161, 3, 161, 3, 161, 7, 161, 2306, 10, 161,
	12, 161, 14, 161, 2309, 11, 161, 3, 162, 3, 162, 3, 162, 7, 162, 2314,
	10, 162, 12, 162, 14, 162, 2317, 11, 162, 3, 163, 3, 163, 3, 164, 3, 164,
	3, 164, 3, 164, 3, 164, 3, 164, 5, 164, 2327, 10, 164, 7, 164, 2329, 10,
	164, 12, 164, 14, 164, 2332, 11, 164, 3, 165, 3, 165, 3, 165, 7, 165, 2337,
	10, 165, 12, 165, 14, 165, 2340, 11, 165, 3, 166, 3, 166, 3, 166, 3, 166,
	3, 167, 3, 167, 5, 167, 2348, 10, 167, 3, 167, 5, 167, 2351, 10, 167, 3,
	168, 3, 168, 3, 169, 3, 169, 3, 170, 3, 170, 3, 170, 5, 170, 2360, 10,
	170, 3, 171, 3, 171, 5, 171, 2364, 10, 171, 5, 171, 2366, 10, 171, 3, 172,
	3, 172, 5, 172, 2370, 10, 172, 3, 172, 3, 172, 5, 172, 2374, 10, 172, 3,
	173, 3, 173, 3, 173, 3, 173, 5, 173, 2380, 10, 173, 3, 174, 3, 174, 5,
	174, 2384, 10, 174, 3, 175, 3, 175, 3, 175, 3, 176, 3, 176, 3, 176, 3,
	177, 3, 177, 5, 177, 2394, 10, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3,
	177, 3, 177, 3, 177, 5, 177, 2403, 10, 177, 3, 178, 3, 178, 3, 178, 3,
	178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 5, 178, 2414, 10, 178, 3,
	179, 3, 179, 5, 179, 2418, 10, 179, 3, 180, 3, 180, 3, 180, 7, 180, 2423,
	10, 180, 12, 180, 14, 180, 2426, 11, 180, 3, 181, 3, 181, 3, 181, 3, 181,
	3, 182, 3, 182, 3, 182, 7, 182, 2435, 10, 182, 12, 182, 14, 182, 2438,
	11, 182, 3, 183, 3, 183, 3, 184, 3, 184, 5, 184, 2444, 10, 184, 3, 185,
	3, 185, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 2452, 10, 186, 3, 187,
	3, 187, 5, 187, 2456, 10, 187, 3, 187, 5, 187, 2459, 10, 187, 3, 188, 3,
	188, 3, 188, 7, 188, 2464, 10, 188, 12, 188, 14, 188, 2467, 11, 188, 3,
	189, 3, 189, 3, 189, 5, 189, 2472, 10, 189, 3, 190, 3, 190, 5, 190, 2476,
	10, 190, 3, 190, 5, 190, 2479, 10, 190, 3, 191, 3, 191, 3, 191, 3, 191,
	5, 191, 2485, 10, 191, 3, 192, 3, 192, 5, 192, 2489, 10, 192, 3, 193, 3,
	193, 5, 193, 2493, 10, 193, 3, 194, 3, 194, 3, 194, 5, 194, 2498, 10, 194,
	3, 194, 3, 194, 5, 194, 2502, 10, 194, 3, 195, 3, 195, 5, 195, 2506, 10,
	195, 3, 196, 3, 196, 5, 196, 2510, 10, 196, 3, 196, 3, 196, 3, 196, 3,
	196, 3, 196, 3, 196, 5, 196, 2518, 10, 196, 3, 197, 3, 197, 5, 197, 2522,
	10, 197, 3, 197, 3, 197, 5, 197, 2526, 10, 197, 3, 198, 3, 198, 5, 198,
	2530, 10, 198, 3, 199, 3, 199, 5, 199, 2534, 10, 199, 3, 199, 3, 199, 3,
	199, 3, 199, 3, 199, 3, 199, 5, 199, 2542, 10, 199, 3, 200, 3, 200, 5,
	200, 2546, 10, 200, 3, 200, 3, 200, 5, 200, 2550, 10, 200, 3, 201, 3, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 2558, 10, 201, 3, 202, 3, 202,
	3, 202, 5, 202, 2563, 10, 202, 3, 203, 3, 203, 3, 203, 5, 203, 2568, 10,
	203, 3, 204, 3, 204, 3, 204, 3, 205, 3, 205, 3, 205, 3, 206, 3, 206, 3,
	206, 3, 206, 3, 206, 5, 206, 2581, 10, 206, 3, 207, 3, 207, 3, 208, 3,
	208, 3, 208, 7, 208, 2588, 10, 208, 12, 208, 14, 208, 2591, 11, 208, 3,
	209, 3, 209, 3, 209, 3, 209, 3, 209, 5, 209, 2598, 10, 209, 3, 210, 3,
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 2608, 10,
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3,
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 2626,
	10, 210, 3, 210, 5, 210, 2629, 10, 210, 3, 210, 3, 210, 3, 210, 3, 210,
	3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 2639, 10, 210, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 213,
	3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 214, 3, 214, 3, 214,
	3, 214, 3, 214, 3, 215, 3, 215, 3, 215, 3, 215, 5, 215, 2667, 10, 215,
	3, 215, 3, 215, 3, 215, 3, 215, 5, 215, 2673, 10, 215, 3, 215, 3, 215,
	3, 215, 3, 215, 5, 215, 2679, 10, 215, 3, 215, 3, 215, 3, 215, 3, 215,
	5, 215, 2685, 10, 215, 5, 215, 2687, 10, 215, 3, 216, 5, 216, 2690, 10,
	216, 3, 216, 3, 216, 3, 217, 3, 217, 5, 217, 2696, 10, 217, 3, 218, 3,
	218, 3, 218, 3, 218, 7, 218, 2702, 10, 218, 12, 218, 14, 218, 2705, 11,
	218, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 220, 3, 220, 3,
	220, 3, 220, 7, 220, 2717, 10, 220, 12, 220, 14, 220, 2720, 11, 220, 3,
	221, 3, 221, 6, 221, 2724, 10, 221, 13, 221, 14, 221, 2725, 3, 222, 3,
	222, 3, 222, 5, 222, 2731, 10, 222, 3, 222, 5, 222, 2734, 10, 222, 3, 223,
	3, 223, 5, 223, 2738, 10, 223, 3, 223, 5, 223, 2741, 10, 223, 3, 223, 5,
	223, 2744, 10, 223, 3, 223, 5, 223, 2747, 10, 223, 3, 223, 5, 223, 2750,
	10, 223, 3, 223, 3, 223, 3, 223, 3, 223, 5, 223, 2756, 10, 223, 3, 224,
	3, 224, 5, 224, 2760, 10, 224, 3, 224, 5, 224, 2763, 10, 224, 3, 224, 5,
	224, 2766, 10, 224, 3, 224, 5, 224, 2769, 10, 224, 3, 224, 5, 224, 2772,
	10, 224, 3, 224, 5, 224, 2775, 10, 224, 3, 225, 3, 225, 3, 225, 6, 225,
	2780, 10, 225, 13, 225, 14, 225, 2781, 3, 226, 5, 226, 2785, 10, 226, 3,
	226, 3, 226, 3, 227, 3, 227, 3, 227, 5, 227, 2792, 10, 227, 3, 227, 5,
	227, 2795, 10, 227, 3, 227, 5, 227, 2798, 10, 227, 3, 227, 5, 227, 2801,
	10, 227, 3, 227, 5, 227, 2804, 10, 227, 3, 227, 5, 227, 2807, 10, 227,
	3, 227, 5, 227, 2810, 10, 227, 3, 227, 5, 227, 2813, 10, 227, 3, 227, 5,
	227, 2816, 10, 227, 3, 227, 5, 227, 2819, 10, 227, 3, 227, 3, 227, 5, 227,
	2823, 10, 227, 3, 227, 5, 227, 2826, 10, 227, 3, 227, 5, 227, 2829, 10,
	227, 3, 227, 5, 227, 2832, 10, 227, 3, 227, 5, 227, 2835, 10, 227, 3, 227,
	5, 227, 2838, 10, 227, 3, 227, 5, 227, 2841, 10, 227, 3, 227, 5, 227, 2844,
	10, 227, 3, 227, 5, 227, 2847, 10, 227, 3, 227, 5, 227, 2850, 10, 227,
	5, 227, 2852, 10, 227, 3, 228, 3, 228, 3, 228, 3, 228, 5, 228, 2858, 10,
	228, 3, 228, 3, 228, 3, 228, 5, 228, 2863, 10, 228, 3, 228, 3, 228, 3,
	228, 3, 228, 3, 228, 5, 228, 2870, 10, 228, 5, 228, 2872, 10, 228, 3, 229,
	5, 229, 2875, 10, 229, 3, 229, 3, 229, 3, 229, 5, 229, 2880, 10, 229, 3,
	229, 5, 229, 2883, 10, 229, 3, 229, 3, 229, 5, 229, 2887, 10, 229, 3, 230,
	3, 230, 3, 230, 5, 230, 2892, 10, 230, 3, 230, 3, 230, 3, 230, 3, 230,
	3, 230, 5, 230, 2899, 10, 230, 3, 231, 3, 231, 3, 231, 3, 231, 5, 231,
	2905, 10, 231, 3, 232, 3, 232, 3, 232, 3, 232, 3, 233, 3, 233, 3, 233,
	3, 233, 7, 233, 2915, 10, 233, 12, 233, 14, 233, 2918, 11, 233, 3, 234,
	3, 234, 3, 234, 3, 234, 5, 234, 2924, 10, 234, 3, 235, 3, 235, 3, 235,
	3, 235, 5, 235, 2930, 10, 235, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236,
	7, 236, 2937, 10, 236, 12, 236, 14, 236, 2940, 11, 236, 5, 236, 2942, 10,
	236, 3, 237, 3, 237, 5, 237, 2946, 10, 237, 3, 238, 3, 238, 3, 238, 3,
	238, 5, 238, 2952, 10, 238, 3, 239, 3, 239, 3, 239, 3, 239, 3, 240, 3,
	240, 3, 241, 3, 241, 5, 241, 2962, 10, 241, 3, 242, 3, 242, 5, 242, 2966,
	10, 242, 3, 243, 3, 243, 3, 243, 3, 243, 3, 244, 3, 244, 3, 244, 6, 244,
	2975, 10, 244, 13, 244, 14, 244, 2976, 3, 245, 3, 245, 3, 245, 3, 245,
	5, 245, 2983, 10, 245, 3, 245, 5, 245, 2986, 10, 245, 3, 245, 3, 245, 3,
	245, 3, 245, 3, 245, 3, 245, 3, 246, 3, 246, 7, 246, 2996, 10, 246, 12,
	246, 14, 246, 2999, 11, 246, 3, 246, 5, 246, 3002, 10, 246, 3, 247, 3,
	247, 3, 247, 3, 247, 3, 247, 5, 247, 3009, 10, 247, 3, 247, 3, 247, 3,
	247, 3, 247, 3, 247, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3,
	248, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 250, 3, 250, 3, 250, 5,
	250, 3031, 10, 250, 3, 251, 3, 251, 3, 251, 6, 251, 3036, 10, 251, 13,
	251, 14, 251, 3037, 3, 252, 3, 252, 5, 252, 3042, 10, 252, 3, 252, 5, 252,
	3045, 10, 252, 3, 252, 3, 252, 3, 252, 5, 252, 3050, 10, 252, 3, 252, 5,
	252, 3053, 10, 252, 3, 253, 3, 253, 3, 253, 7, 253, 3058, 10, 253, 12,
	253, 14, 253, 3061, 11, 253, 3, 254, 3, 254, 3, 254, 3, 254, 5, 254, 3067,
	10, 254, 3, 254, 5, 254, 3070, 10, 254, 3, 254, 3, 254, 3, 254, 3, 254,
	3, 254, 3, 254, 5, 254, 3078, 10, 254, 3, 254, 3, 254, 3, 254, 3, 254,
	5, 254, 3084, 10, 254, 5, 254, 3086, 10, 254, 5, 254, 3088, 10, 254, 3,
	254, 5, 254, 3091, 10, 254, 3, 254, 5, 254, 3094, 10, 254, 3, 255, 3, 255,
	3, 255, 5, 255, 3099, 10, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255,
	3, 255, 7, 255, 3107, 10, 255, 12, 255, 14, 255, 3110, 11, 255, 3, 255,
	3, 255, 5, 255, 3114, 10, 255, 5, 255, 3116, 10, 255, 3, 256, 3, 256, 3,
	256, 3, 256, 5, 256, 3122, 10, 256, 3, 256, 5, 256, 3125, 10, 256, 3, 256,
	5, 256, 3128, 10, 256, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256,
	5, 256, 3136, 10, 256, 3, 256, 3, 256, 3, 256, 3, 256, 5, 256, 3142, 10,
	256, 5, 256, 3144, 10, 256, 5, 256, 3146, 10, 256, 3, 256, 5, 256, 3149,
	10, 256, 3, 256, 5, 256, 3152, 10, 256, 3, 257, 3, 257, 5, 257, 3156, 10,
	257, 3, 258, 3, 258, 3, 258, 7, 258, 3161, 10, 258, 12, 258, 14, 258, 3164,
	11, 258, 3, 259, 3, 259, 3, 259, 3, 259, 7, 259, 3170, 10, 259, 12, 259,
	14, 259, 3173, 11, 259, 3, 260, 3, 260, 3, 260, 3, 260, 3, 261, 3, 261,
	3, 261, 5, 261, 3182, 10, 261, 3, 261, 5, 261, 3185, 10, 261, 3, 261, 5,
	261, 3188, 10, 261, 3, 261, 5, 261, 3191, 10, 261, 3, 262, 3, 262, 5, 262,
	3195, 10, 262, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263,
	3, 263, 5, 263, 3205, 10, 263, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264,
	3, 264, 3, 264, 3, 264, 5, 264, 3215, 10, 264, 3, 265, 3, 265, 3, 265,
	3, 265, 3, 265, 3, 265, 5, 265, 3223, 10, 265, 3, 266, 3, 266, 3, 266,
	3, 266, 3, 266, 3, 266, 5, 266, 3231, 10, 266, 3, 267, 3, 267, 3, 267,
	3, 267, 3, 267, 5, 267, 3238, 10, 267, 3, 268, 3, 268, 3, 269, 3, 269,
	3, 269, 7, 269, 3245, 10, 269, 12, 269, 14, 269, 3248, 11, 269, 3, 270,
	3, 270, 3, 270, 7, 270, 3253, 10, 270, 12, 270, 14, 270, 3256, 11, 270,
	3, 271, 3, 271, 3, 271, 3, 272, 3, 272, 3, 272, 3, 272, 6, 272, 3265, 10,
	272, 13, 272, 14, 272, 3266, 3, 272, 5, 272, 3270, 10, 272, 3, 273, 3,
	273, 7, 273, 3274, 10, 273, 12, 273, 14, 273, 3277, 11, 273, 3, 273, 3,
	273, 7, 273, 3281, 10, 273, 12, 273, 14, 273, 3284, 11, 273, 3, 273, 3,
	273, 7, 273, 3288, 10, 273, 12, 273, 14, 273, 3291, 11, 273, 3, 273, 3,
	273, 7, 273, 3295, 10, 273, 12, 273, 14, 273, 3298, 11, 273, 3, 273, 3,
	273, 3, 273, 3, 273, 5, 273, 3304, 10, 273, 3, 274, 3, 274, 3, 274, 3,
	274, 3, 274, 3, 274, 3, 274, 5, 274, 3313, 10, 274, 7, 274, 3315, 10, 274,
	12, 274, 14, 274, 3318, 11, 274, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275,
	3324, 10, 275, 3, 275, 7, 275, 3327, 10, 275, 12, 275, 14, 275, 3330, 11,
	275, 3, 276, 5, 276, 3333, 10, 276, 3, 276, 3, 276, 3, 276, 3, 277, 3,
	277, 3, 277, 3, 277, 3, 278, 3, 278, 3, 279, 3, 279, 3, 279, 3, 279, 3,
	279, 3, 279, 3, 279, 3, 279, 5, 279, 3352, 10, 279, 3, 279, 3, 279, 3,
	279, 5, 279, 3357, 10, 279, 3, 279, 3, 279, 3, 279, 5, 279, 3362, 10, 279,
	3, 279, 3, 279, 3, 279, 3, 279, 5, 279, 3368, 10, 279, 3, 280, 3, 280,
	3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 7, 280, 3379, 10,
	280, 12, 280, 14, 280, 3382, 11, 280, 5, 280, 3384, 10, 280, 3, 280, 5,
	280, 3387, 10, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3,
	280, 3, 280, 7, 280, 3397, 10, 280, 12, 280, 14, 280, 3400, 11, 280, 5,
	280, 3402, 10, 280, 3, 280, 5, 280, 3405, 10, 280, 3, 280, 3, 280, 3, 280,
	3, 280, 3, 280, 3, 280, 5, 280, 3413, 10, 280, 3, 280, 3, 280, 3, 280,
	3, 280, 3, 280, 7, 280, 3420, 10, 280, 12, 280, 14, 280, 3423, 11, 280,
	3, 280, 3, 280, 5, 280, 3427, 10, 280, 5, 280, 3429, 10, 280, 3, 281, 3,
	281, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3,
	282, 3, 282, 3, 282, 7, 282, 3444, 10, 282, 12, 282, 14, 282, 3447, 11,
	282, 5, 282, 3449, 10, 282, 3, 282, 3, 282, 3, 283, 3, 283, 3, 283, 3,
	283, 3, 283, 3, 283, 3, 283, 3, 283, 3, 283, 5, 283, 3462, 10, 283, 3,
	284, 3, 284, 5, 284, 3466, 10, 284, 3, 285, 3, 285, 5, 285, 3470, 10, 285,
	3, 285, 5, 285, 3473, 10, 285, 3, 285, 5, 285, 3476, 10, 285, 3, 285, 5,
	285, 3479, 10, 285, 3, 286, 3, 286, 5, 286, 3483, 10, 286, 3, 286, 5, 286,
	3486, 10, 286, 3, 286, 5, 286, 3489, 10, 286, 3, 287, 3, 287, 3, 287, 3,
	287, 3, 287, 5, 287, 3496, 10, 287, 3, 288, 3, 288, 3, 288, 5, 288, 3501,
	10, 288, 3, 288, 3, 288, 3, 289, 3, 289, 3, 289, 3, 289, 5, 289, 3509,
	10, 289, 3, 289, 3, 289, 3, 290, 3, 290, 5, 290, 3515, 10, 290, 3, 290,
	3, 290, 3, 290, 5, 290, 3520, 10, 290, 3, 290, 3, 290, 5, 290, 3524, 10,
	290, 3, 291, 3, 291, 3, 291, 5, 291, 3529, 10, 291, 3, 292, 3, 292, 3,
	292, 3, 292, 3, 292, 5, 292, 3536, 10, 292, 3, 292, 3, 292, 3, 292, 3,
	292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 7, 292, 3548, 10,
	292, 12, 292, 14, 292, 3551, 11, 292, 5, 292, 3553, 10, 292, 3, 292, 3,
	292, 5, 292, 3557, 10, 292, 3, 293, 3, 293, 3, 293, 3, 294, 3, 294, 3,
	295, 3, 295, 3, 295, 3, 296, 3, 296, 3, 296, 7, 296, 3570, 10, 296, 12,
	296, 14, 296, 3573, 11, 296, 3, 297, 3, 297, 3, 298, 3, 298, 3, 298, 3,
	298, 3, 298, 5, 298, 3582, 10, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3,
	298, 7, 298, 3589, 10, 298, 12, 298, 14, 298, 3592, 11, 298, 5, 298, 3594,
	10, 298, 3, 298, 3, 298, 3, 299, 3, 299, 3, 299, 3, 299, 3, 300, 3, 300,
	3, 300, 5, 300, 3605, 10, 300, 3, 301, 3, 301, 3, 301, 3, 302, 3, 302,
	3, 302, 3, 302, 3, 302, 7, 302, 3615, 10, 302, 12, 302, 14, 302, 3618,
	11, 302, 3, 302, 3, 302, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303,
	3627, 10, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 7, 303,
	3635, 10, 303, 12, 303, 14, 303, 3638, 11, 303, 3, 303, 3, 303, 5, 303,
	3642, 10, 303, 3, 304, 3, 304, 5, 304, 3646, 10, 304, 3, 305, 3, 305, 5,
	305, 3650, 10, 305, 3, 305, 3, 305, 7, 305, 3654, 10, 305, 12, 305, 14,
	305, 3657, 11, 305, 3, 305, 3, 305, 3, 306, 3, 306, 3, 307, 3, 307, 3,
	307, 3, 308, 3, 308, 3, 309, 3, 309, 3, 309, 3, 309, 3, 310, 3, 310, 5,
	310, 3674, 10, 310, 3, 311, 3, 311, 6, 311, 3678, 10, 311, 13, 311, 14,
	311, 3679, 3, 312, 3, 312, 5, 312, 3684, 10, 312, 3, 313, 3, 313, 3, 313,
	3, 313, 7, 313, 3690, 10, 313, 12, 313, 14, 313, 3693, 11, 313, 3, 313,
	3, 313, 3, 314, 3, 314, 3, 314, 7, 314, 3700, 10, 314, 12, 314, 14, 314,
	3703, 11, 314, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 7, 315, 3710, 10,
	315, 12, 315, 14, 315, 3713, 11, 315, 3, 316, 3, 316, 3, 316, 3, 316, 3,
	317, 3, 317, 3, 317, 3, 317, 3, 318, 3, 318, 3, 318, 3, 318, 3, 319, 3,
	319, 3, 319, 3, 319, 5, 319, 3731, 10, 319, 3, 320, 3, 320, 3, 320, 3,
	320, 5, 320, 3737, 10, 320, 3, 320, 3, 320, 3, 320, 7, 320, 3742, 10, 320,
	12, 320, 14, 320, 3745, 11, 320, 5, 320, 3747, 10, 320, 5, 320, 3749, 10,
	320, 3, 320, 3, 320, 3, 320, 5, 320, 3754, 10, 320, 3, 321, 3, 321, 5,
	321, 3758, 10, 321, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 3,
	322, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 6, 323, 3774,
	10, 323, 13, 323, 14, 323, 3775, 3, 323, 3, 323, 5, 323, 3780, 10, 323,
	3, 323, 3, 323, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 6, 324,
	3790, 10, 324, 13, 324, 14, 324, 3791, 3, 324, 3, 324, 5, 324, 3796, 10,
	324, 3, 324, 3, 324, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 5, 325, 3805,
	10, 325, 3, 325, 3, 325, 3, 326, 3, 326, 3, 327, 3, 327, 3, 327, 3, 327,
	3, 327, 3, 327, 3, 327, 3, 328, 3, 328, 3, 329, 3, 329, 3, 329, 3, 329,
	3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 5, 329,
	3832, 10, 329, 3, 330, 3, 330, 6, 330, 3836, 10, 330, 13, 330, 14, 330,
	3837, 3, 331, 3, 331, 3, 331, 3, 332, 3, 332, 3, 332, 5, 332, 3846, 10,
	332, 3, 333, 3, 333, 3, 333, 5, 333, 3851, 10, 333, 3, 334, 3, 334, 3,
	334, 3, 335, 3, 335, 3, 336, 3, 336, 3, 336, 3, 337, 3, 337, 3, 337, 3,
	337, 3, 337, 3, 337, 3, 337, 3, 337, 3, 337, 3, 337, 3, 337, 3, 337, 3,
	337, 3, 337, 3, 337, 5, 337, 3876, 10, 337, 3, 338, 3, 338, 3, 338, 3,
	338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 5,
	338, 3890, 10, 338, 3, 339, 3, 339, 3, 339, 3, 339, 3, 339, 3, 339, 3,
	339, 3, 339, 3, 339, 3, 339, 3, 339, 5, 339, 3903, 10, 339, 3, 340, 3,
	340, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341, 3,
	341, 5, 341, 3916, 10, 341, 3, 342, 3, 342, 3, 343, 3, 343, 3, 344, 3,
	344, 3, 345, 3, 345, 3, 346, 3, 346, 3, 347, 3, 347, 3, 348, 3, 348, 3,
	349, 3, 349, 3, 349, 3, 349, 3, 349, 5, 349, 3937, 10, 349, 3, 350, 3,
	350, 3, 350, 3, 350, 3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 3,
	351, 5, 351, 3950, 10, 351, 3, 352, 3, 352, 3, 353, 3, 353, 3, 354, 3,
	354, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 7,
	355, 3966, 10, 355, 12, 355, 14, 355, 3969, 11, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3,
	355, 5, 355, 3983, 10, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 5, 355, 4012, 10, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 7, 355, 4029, 10, 355, 12, 355, 14, 355, 4032,
	11, 355, 3, 356, 3, 356, 3, 356, 3, 356, 3, 357, 3, 357, 3, 357, 3, 357,
	3, 357, 3, 357, 5, 357, 4044, 10, 357, 3, 358, 3, 358, 3, 358, 3, 358,
	3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358,
	5, 358, 4059, 10, 358, 3, 359, 3, 359, 5, 359, 4063, 10, 359, 3, 360, 3,
	360, 3, 360, 3, 360, 5, 360, 4069, 10, 360, 3, 361, 3, 361, 3, 362, 3,
	362, 3, 363, 3, 363, 5, 363, 4077, 10, 363, 3, 364, 3, 364, 3, 364, 3,
	364, 3, 364, 7, 364, 4084, 10, 364, 12, 364, 14, 364, 4087, 11, 364, 3,
	364, 3, 364, 3, 365, 3, 365, 3, 365, 5, 365, 4094, 10, 365, 3, 366, 3,
	366, 3, 366, 3, 366, 3, 366, 7, 366, 4101, 10, 366, 12, 366, 14, 366, 4104,
	11, 366, 3, 366, 3, 366, 3, 367, 3, 367, 3, 367, 3, 367, 3, 368, 3, 368,
	3, 369, 3, 369, 3, 370, 3, 370, 3, 370, 5, 370, 4119, 10, 370, 3, 371,
	3, 371, 5, 371, 4123, 10, 371, 3, 372, 3, 372, 3, 372, 3, 372, 3, 372,
	5, 372, 4130, 10, 372, 3, 373, 3, 373, 5, 373, 4134, 10, 373, 3, 374, 3,
	374, 3, 375, 3, 375, 3, 376, 3, 376, 3, 376, 3, 376, 3, 376, 3, 376, 3,
	376, 3, 376, 3, 376, 3, 376, 3, 376, 3, 376, 3, 376, 3, 376, 5, 376, 4154,
	10, 376, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 5, 377,
	4163, 10, 377, 3, 378, 3, 378, 3, 378, 7, 378, 4168, 10, 378, 12, 378,
	14, 378, 4171, 11, 378, 3, 379, 3, 379, 3, 379, 5, 379, 4176, 10, 379,
	3, 380, 3, 380, 3, 380, 7, 380, 4181, 10, 380, 12, 380, 14, 380, 4184,
	11, 380, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381,
	3, 381, 3, 381, 5, 381, 4196, 10, 381, 5, 381, 4198, 10, 381, 3, 382, 3,
	382, 3, 382, 3, 383, 3, 383, 5, 383, 4205, 10, 383, 3, 384, 3, 384, 3,
	385, 3, 385, 3, 386, 3, 386, 3, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3,
	387, 3, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3, 387, 3,
	387, 5, 387, 4228, 10, 387, 3, 387, 3, 387, 5, 387, 4232, 10, 387, 5, 387,
	4234, 10, 387, 5, 387, 4236, 10, 387, 3, 388, 3, 388, 5, 388, 4240, 10,
	388, 3, 388, 3, 388, 3, 388, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389, 3,
	389, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389, 5, 389, 4257, 10,
	389, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 391, 3, 391, 3, 391, 7,
	391, 4267, 10, 391, 12, 391, 14, 391, 4270, 11, 391, 3, 392, 3, 392, 3,
	393, 3, 393, 3, 393, 3, 394, 3, 394, 3, 394, 7, 394, 4280, 10, 394, 12,
	394, 14, 394, 4283, 11, 394, 3, 395, 3, 395, 3, 395, 7, 395, 4288, 10,
	395, 12, 395, 14, 395, 4291, 11, 395, 3, 396, 3, 396, 3, 396, 3, 396, 3,
	397, 3, 397, 3, 398, 3, 398, 3, 399, 3, 399, 3, 399, 3, 399, 5, 399, 4305,
	10, 399, 3, 400, 3, 400, 3, 400, 3, 401, 3, 401, 3, 401, 3, 401, 3, 401,
	3, 401, 3, 401, 3, 401, 3, 401, 3, 401, 3, 402, 3, 402, 3, 402, 3, 402,
	3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402,
	3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402,
	3, 402, 3, 402, 5, 402, 4344, 10, 402, 3, 403, 3, 403, 3, 403, 3, 403,
	3, 403, 3, 403, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404,
	3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 5, 404, 4364, 10, 404, 3, 405,
	3, 405, 3, 405, 7, 405, 4369, 10, 405, 12, 405, 14, 405, 4372, 11, 405,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 407,
	3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407,
	3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407, 4397, 10, 407, 3, 408,
	3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 409, 3, 409, 3, 409, 3, 409,
	3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 5, 409, 4414, 10, 409, 3, 409,
	3, 409, 3, 409, 5, 409, 4419, 10, 409, 3, 410, 3, 410, 3, 410, 3, 410,
	3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 5, 410, 4430, 10, 410, 3, 410,
	3, 410, 3, 410, 5, 410, 4435, 10, 410, 3, 411, 3, 411, 3, 411, 3, 411,
	3, 411, 3, 411, 3, 411, 3, 411, 2, 3, 708, 412, 2, 4, 6, 8, 10, 12, 14,
	16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50,
	52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,
	88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
	120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148,
	150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178,
	180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208,
	210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238,
	240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268,
	270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298,
	300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328,
	330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388,
	390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418,
	420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448,
	450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478,
	480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508,
	510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538,
	540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568,
	570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598,
	600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628,
	630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658,
	660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688,
	690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718,
	720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748,
	750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778,
	780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808,
	810, 812, 814, 816, 818, 820, 2, 34, 3, 2, 309, 312, 3, 2, 227, 228, 4,
	2, 183, 183, 186, 186, 3, 2, 136, 137, 4, 2, 15, 15, 74, 74, 3, 2, 146,
	147, 4, 2, 184, 184, 187, 187, 4, 2, 23, 23, 182, 182, 3, 2, 195, 196,
	11, 2, 5, 5, 25, 25, 27, 27, 67, 67, 69, 69, 75, 75, 175, 175, 192, 192,
	225, 226, 5, 2, 75, 75, 136, 136, 333, 333, 4, 2, 143, 144, 218, 218, 3,
	2, 127, 128, 3, 2, 294, 295, 3, 2, 14, 15, 4, 2, 5, 5, 26, 26, 3, 2, 236,
	237, 4, 2, 109, 109, 134, 134, 3, 2, 230, 231, 5, 2, 267, 267, 269, 272,
	274, 276, 4, 2, 267, 267, 269, 276, 4, 2, 364, 364, 369, 369, 4, 2, 352,
	353, 358, 358, 4, 2, 351, 351, 354, 356, 3, 2, 352, 353, 4, 2, 10, 10,
	138, 139, 3, 2, 3, 4, 4, 2, 344, 344, 346, 350, 15, 2, 7, 10, 12, 12, 79,
	85, 95, 95, 98, 101, 138, 139, 164, 165, 182, 182, 206, 206, 208, 208,
	302, 302, 344, 359, 361, 361, 54, 2, 14, 17, 28, 28, 38, 38, 40, 49, 53,
	55, 58, 59, 61, 64, 70, 70, 72, 73, 76, 76, 78, 78, 80, 80, 88, 88, 92,
	92, 95, 95, 99, 99, 101, 101, 103, 105, 107, 107, 110, 129, 131, 131, 136,
	137, 140, 140, 143, 145, 147, 150, 152, 156, 158, 163, 169, 174, 176, 176,
	180, 181, 184, 187, 190, 196, 198, 200, 202, 202, 204, 205, 210, 210, 213,
	215, 217, 225, 227, 229, 232, 232, 245, 245, 247, 247, 249, 250, 253, 261,
	263, 263, 266, 276, 278, 278, 281, 281, 283, 288, 293, 297, 299, 300, 304,
	331, 12, 2, 12, 12, 79, 79, 81, 85, 87, 87, 89, 89, 98, 98, 100, 100, 208,
	208, 239, 240, 244, 244, 5, 2, 19, 19, 248, 248, 332, 332, 2, 4788, 2,
	828, 3, 2, 2, 2, 4, 830, 3, 2, 2, 2, 6, 856, 3, 2, 2, 2, 8, 858, 3, 2,
	2, 2, 10, 860, 3, 2, 2, 2, 12, 874, 3, 2, 2, 2, 14, 876, 3, 2, 2, 2, 16,
	892, 3, 2, 2, 2, 18, 901, 3, 2, 2, 2, 20, 909, 3, 2, 2, 2, 22, 922, 3,
	2, 2, 2, 24, 945, 3, 2, 2, 2, 26, 960, 3, 2, 2, 2, 28, 964, 3, 2, 2, 2,
	30, 972, 3, 2, 2, 2, 32, 1022, 3, 2, 2, 2, 34, 1024, 3, 2, 2, 2, 36, 1027,
	3, 2, 2, 2, 38, 1029, 3, 2, 2, 2, 40, 1033, 3, 2, 2, 2, 42, 1036, 3, 2,
	2, 2, 44, 1039, 3, 2, 2, 2, 46, 1043, 3, 2, 2, 2, 48, 1046, 3, 2, 2, 2,
	50, 1063, 3, 2, 2, 2, 52, 1066, 3, 2, 2, 2, 54, 1070, 3, 2, 2, 2, 56, 1078,
	3, 2, 2, 2, 58, 1081, 3, 2, 2, 2, 60, 1090, 3, 2, 2, 2, 62, 1093, 3, 2,
	2, 2, 64, 1155, 3, 2, 2, 2, 66, 1165, 3, 2, 2, 2, 68, 1199, 3, 2, 2, 2,
	70, 1218, 3, 2, 2, 2, 72, 1234, 3, 2, 2, 2, 74, 1236, 3, 2, 2, 2, 76, 1247,
	3, 2, 2, 2, 78, 1251, 3, 2, 2, 2, 80, 1256, 3, 2, 2, 2, 82, 1258, 3, 2,
	2, 2, 84, 1263, 3, 2, 2, 2, 86, 1268, 3, 2, 2, 2, 88, 1273, 3, 2, 2, 2,
	90, 1277, 3, 2, 2, 2, 92, 1285, 3, 2, 2, 2, 94, 1290, 3, 2, 2, 2, 96, 1295,
	3, 2, 2, 2, 98, 1299, 3, 2, 2, 2, 100, 1319, 3, 2, 2, 2, 102, 1332, 3,
	2, 2, 2, 104, 1340, 3, 2, 2, 2, 106, 1342, 3, 2, 2, 2, 108, 1351, 3, 2,
	2, 2, 110, 1355, 3, 2, 2, 2, 112, 1362, 3, 2, 2, 2, 114, 1369, 3, 2, 2,
	2, 116, 1376, 3, 2, 2, 2, 118, 1379, 3, 2, 2, 2, 120, 1406, 3, 2, 2, 2,
	122, 1417, 3, 2, 2, 2, 124, 1421, 3, 2, 2, 2, 126, 1423, 3, 2, 2, 2, 128,
	1436, 3, 2, 2, 2, 130, 1438, 3, 2, 2, 2, 132, 1442, 3, 2, 2, 2, 134, 1451,
	3, 2, 2, 2, 136, 1453, 3, 2, 2, 2, 138, 1458, 3, 2, 2, 2, 140, 1462, 3,
	2, 2, 2, 142, 1470, 3, 2, 2, 2, 144, 1474, 3, 2, 2, 2, 146, 1483, 3, 2,
	2, 2, 148, 1485, 3, 2, 2, 2, 150, 1491, 3, 2, 2, 2, 152, 1495, 3, 2, 2,
	2, 154, 1508, 3, 2, 2, 2, 156, 1510, 3, 2, 2, 2, 158, 1514, 3, 2, 2, 2,
	160, 1517, 3, 2, 2, 2, 162, 1528, 3, 2, 2, 2, 164, 1545, 3, 2, 2, 2, 166,
	1547, 3, 2, 2, 2, 168, 1552, 3, 2, 2, 2, 170, 1572, 3, 2, 2, 2, 172, 1576,
	3, 2, 2, 2, 174, 1583, 3, 2, 2, 2, 176, 1599, 3, 2, 2, 2, 178, 1739, 3,
	2, 2, 2, 180, 1741, 3, 2, 2, 2, 182, 1749, 3, 2, 2, 2, 184, 1754, 3, 2,
	2, 2, 186, 1756, 3, 2, 2, 2, 188, 1762, 3, 2, 2, 2, 190, 1766, 3, 2, 2,
	2, 192, 1770, 3, 2, 2, 2, 194, 1774, 3, 2, 2, 2, 196, 1784, 3, 2, 2, 2,
	198, 1795, 3, 2, 2, 2, 200, 1812, 3, 2, 2, 2, 202, 1830, 3, 2, 2, 2, 204,
	1835, 3, 2, 2, 2, 206, 1838, 3, 2, 2, 2, 208, 1842, 3, 2, 2, 2, 210, 1849,
	3, 2, 2, 2, 212, 1858, 3, 2, 2, 2, 214, 1864, 3, 2, 2, 2, 216, 1866, 3,
	2, 2, 2, 218, 1882, 3, 2, 2, 2, 220, 1903, 3, 2, 2, 2, 222, 1905, 3, 2,
	2, 2, 224, 1913, 3, 2, 2, 2, 226, 1920, 3, 2, 2, 2, 228, 1922, 3, 2, 2,
	2, 230, 1936, 3, 2, 2, 2, 232, 1938, 3, 2, 2, 2, 234, 1942, 3, 2, 2, 2,
	236, 1946, 3, 2, 2, 2, 238, 1950, 3, 2, 2, 2, 240, 1954, 3, 2, 2, 2, 242,
	1969, 3, 2, 2, 2, 244, 1977, 3, 2, 2, 2, 246, 1980, 3, 2, 2, 2, 248, 1982,
	3, 2, 2, 2, 250, 1994, 3, 2, 2, 2, 252, 2004, 3, 2, 2, 2, 254, 2007, 3,
	2, 2, 2, 256, 2018, 3, 2, 2, 2, 258, 2026, 3, 2, 2, 2, 260, 2053, 3, 2,
	2, 2, 262, 2081, 3, 2, 2, 2, 264, 2087, 3, 2, 2, 2, 266, 2094, 3, 2, 2,
	2, 268, 2104, 3, 2, 2, 2, 270, 2108, 3, 2, 2, 2, 272, 2110, 3, 2, 2, 2,
	274, 2113, 3, 2, 2, 2, 276, 2126, 3, 2, 2, 2, 278, 2143, 3, 2, 2, 2, 280,
	2157, 3, 2, 2, 2, 282, 2159, 3, 2, 2, 2, 284, 2162, 3, 2, 2, 2, 286, 2165,
	3, 2, 2, 2, 288, 2174, 3, 2, 2, 2, 290, 2194, 3, 2, 2, 2, 292, 2196, 3,
	2, 2, 2, 294, 2199, 3, 2, 2, 2, 296, 2219, 3, 2, 2, 2, 298, 2221, 3, 2,
	2, 2, 300, 2225, 3, 2, 2, 2, 302, 2227, 3, 2, 2, 2, 304, 2236, 3, 2, 2,
	2, 306, 2242, 3, 2, 2, 2, 308, 2248, 3, 2, 2, 2, 310, 2253, 3, 2, 2, 2,
	312, 2281, 3, 2, 2, 2, 314, 2283, 3, 2, 2, 2, 316, 2286, 3, 2, 2, 2, 318,
	2294, 3, 2, 2, 2, 320, 2302, 3, 2, 2, 2, 322, 2310, 3, 2, 2, 2, 324, 2318,
	3, 2, 2, 2, 326, 2320, 3, 2, 2, 2, 328, 2333, 3, 2, 2, 2, 330, 2341, 3,
	2, 2, 2, 332, 2350, 3, 2, 2, 2, 334, 2352, 3, 2, 2, 2, 336, 2354, 3, 2,
	2, 2, 338, 2359, 3, 2, 2, 2, 340, 2365, 3, 2, 2, 2, 342, 2369, 3, 2, 2,
	2, 344, 2375, 3, 2, 2, 2, 346, 2383, 3, 2, 2, 2, 348, 2385, 3, 2, 2, 2,
	350, 2388, 3, 2, 2, 2, 352, 2393, 3, 2, 2, 2, 354, 2404, 3, 2, 2, 2, 356,
	2417, 3, 2, 2, 2, 358, 2419, 3, 2, 2, 2, 360, 2427, 3, 2, 2, 2, 362, 2431,
	3, 2, 2, 2, 364, 2439, 3, 2, 2, 2, 366, 2443, 3, 2, 2, 2, 368, 2445, 3,
	2, 2, 2, 370, 2451, 3, 2, 2, 2, 372, 2453, 3, 2, 2, 2, 374, 2460, 3, 2,
	2, 2, 376, 2468, 3, 2, 2, 2, 378, 2473, 3, 2, 2, 2, 380, 2480, 3, 2, 2,
	2, 382, 2488, 3, 2, 2, 2, 384, 2492, 3, 2, 2, 2, 386, 2494, 3, 2, 2, 2,
	388, 2505, 3, 2, 2, 2, 390, 2509, 3, 2, 2, 2, 392, 2521, 3, 2, 2, 2, 394,
	2529, 3, 2, 2, 2, 396, 2533, 3, 2, 2, 2, 398, 2545, 3, 2, 2, 2, 400, 2557,
	3, 2, 2, 2, 402, 2562, 3, 2, 2, 2, 404, 2567, 3, 2, 2, 2, 406, 2569, 3,
	2, 2, 2, 408, 2572, 3, 2, 2, 2, 410, 2575, 3, 2, 2, 2, 412, 2582, 3, 2,
	2, 2, 414, 2584, 3, 2, 2, 2, 416, 2597, 3, 2, 2, 2, 418, 2638, 3, 2, 2,
	2, 420, 2640, 3, 2, 2, 2, 422, 2645, 3, 2, 2, 2, 424, 2650, 3, 2, 2, 2,
	426, 2657, 3, 2, 2, 2, 428, 2686, 3, 2, 2, 2, 430, 2689, 3, 2, 2, 2, 432,
	2695, 3, 2, 2, 2, 434, 2697, 3, 2, 2, 2, 436, 2706, 3, 2, 2, 2, 438, 2712,
	3, 2, 2, 2, 440, 2721, 3, 2, 2, 2, 442, 2733, 3, 2, 2, 2, 444, 2755, 3,
	2, 2, 2, 446, 2757, 3, 2, 2, 2, 448, 2779, 3, 2, 2, 2, 450, 2784, 3, 2,
	2, 2, 452, 2851, 3, 2, 2, 2, 454, 2871, 3, 2, 2, 2, 456, 2886, 3, 2, 2,
	2, 458, 2898, 3, 2, 2, 2, 460, 2900, 3, 2, 2, 2, 462, 2906, 3, 2, 2, 2,
	464, 2910, 3, 2, 2, 2, 466, 2919, 3, 2, 2, 2, 468, 2929, 3, 2, 2, 2, 470,
	2931, 3, 2, 2, 2, 472, 2945, 3, 2, 2, 2, 474, 2951, 3, 2, 2, 2, 476, 2953,
	3, 2, 2, 2, 478, 2957, 3, 2, 2, 2, 480, 2959, 3, 2, 2, 2, 482, 2963, 3,
	2, 2, 2, 484, 2967, 3, 2, 2, 2, 486, 2971, 3, 2, 2, 2, 488, 2978, 3, 2,
	2, 2, 490, 2997, 3, 2, 2, 2, 492, 3003, 3, 2, 2, 2, 494, 3015, 3, 2, 2,
	2, 496, 3022, 3, 2, 2, 2, 498, 3030, 3, 2, 2, 2, 500, 3032, 3, 2, 2, 2,
	502, 3052, 3, 2, 2, 2, 504, 3054, 3, 2, 2, 2, 506, 3062, 3, 2, 2, 2, 508,
	3115, 3, 2, 2, 2, 510, 3121, 3, 2, 2, 2, 512, 3155, 3, 2, 2, 2, 514, 3157,
	3, 2, 2, 2, 516, 3165, 3, 2, 2, 2, 518, 3174, 3, 2, 2, 2, 520, 3190, 3,
	2, 2, 2, 522, 3194, 3, 2, 2, 2, 524, 3204, 3, 2, 2, 2, 526, 3214, 3, 2,
	2, 2, 528, 3222, 3, 2, 2, 2, 530, 3230, 3, 2, 2, 2, 532, 3237, 3, 2, 2,
	2, 534, 3239, 3, 2, 2, 2, 536, 3241, 3, 2, 2, 2, 538, 3249, 3, 2, 2, 2,
	540, 3257, 3, 2, 2, 2, 542, 3269, 3, 2, 2, 2, 544, 3303, 3, 2, 2, 2, 546,
	3305, 3, 2, 2, 2, 548, 3323, 3, 2, 2, 2, 550, 3332, 3, 2, 2, 2, 552, 3337,
	3, 2, 2, 2, 554, 3341, 3, 2, 2, 2, 556, 3367, 3, 2, 2, 2, 558, 3428, 3,
	2, 2, 2, 560, 3430, 3, 2, 2, 2, 562, 3432, 3, 2, 2, 2, 564, 3461, 3, 2,
	2, 2, 566, 3465, 3, 2, 2, 2, 568, 3467, 3, 2, 2, 2, 570, 3480, 3, 2, 2,
	2, 572, 3495, 3, 2, 2, 2, 574, 3500, 3, 2, 2, 2, 576, 3504, 3, 2, 2, 2,
	578, 3523, 3, 2, 2, 2, 580, 3528, 3, 2, 2, 2, 582, 3530, 3, 2, 2, 2, 584,
	3558, 3, 2, 2, 2, 586, 3561, 3, 2, 2, 2, 588, 3563, 3, 2, 2, 2, 590, 3566,
	3, 2, 2, 2, 592, 3574, 3, 2, 2, 2, 594, 3576, 3, 2, 2, 2, 596, 3597, 3,
	2, 2, 2, 598, 3604, 3, 2, 2, 2, 600, 3606, 3, 2, 2, 2, 602, 3609, 3, 2,
	2, 2, 604, 3621, 3, 2, 2, 2, 606, 3645, 3, 2, 2, 2, 608, 3647, 3, 2, 2,
	2, 610, 3660, 3, 2, 2, 2, 612, 3662, 3, 2, 2, 2, 614, 3665, 3, 2, 2, 2,
	616, 3667, 3, 2, 2, 2, 618, 3671, 3, 2, 2, 2, 620, 3677, 3, 2, 2, 2, 622,
	3683, 3, 2, 2, 2, 624, 3685, 3, 2, 2, 2, 626, 3696, 3, 2, 2, 2, 628, 3704,
	3, 2, 2, 2, 630, 3714, 3, 2, 2, 2, 632, 3718, 3, 2, 2, 2, 634, 3722, 3,
	2, 2, 2, 636, 3726, 3, 2, 2, 2, 638, 3732, 3, 2, 2, 2, 640, 3757, 3, 2,
	2, 2, 642, 3759, 3, 2, 2, 2, 644, 3766, 3, 2, 2, 2, 646, 3783, 3, 2, 2,
	2, 648, 3799, 3, 2, 2, 2, 650, 3808, 3, 2, 2, 2, 652, 3810, 3, 2, 2, 2,
	654, 3817, 3, 2, 2, 2, 656, 3831, 3, 2, 2, 2, 658, 3833, 3, 2, 2, 2, 660,
	3839, 3, 2, 2, 2, 662, 3845, 3, 2, 2, 2, 664, 3850, 3, 2, 2, 2, 666, 3852,
	3, 2, 2, 2, 668, 3855, 3, 2, 2, 2, 670, 3857, 3, 2, 2, 2, 672, 3875, 3,
	2, 2, 2, 674, 3889, 3, 2, 2, 2, 676, 3902, 3, 2, 2, 2, 678, 3904, 3, 2,
	2, 2, 680, 3915, 3, 2, 2, 2, 682, 3917, 3, 2, 2, 2, 684, 3919, 3, 2, 2,
	2, 686, 3921, 3, 2, 2, 2, 688, 3923, 3, 2, 2, 2, 690, 3925, 3, 2, 2, 2,
	692, 3927, 3, 2, 2, 2, 694, 3929, 3, 2, 2, 2, 696, 3936, 3, 2, 2, 2, 698,
	3938, 3, 2, 2, 2, 700, 3949, 3, 2, 2, 2, 702, 3951, 3, 2, 2, 2, 704, 3953,
	3, 2, 2, 2, 706, 3955, 3, 2, 2, 2, 708, 3982, 3, 2, 2, 2, 710, 4033, 3,
	2, 2, 2, 712, 4043, 3, 2, 2, 2, 714, 4058, 3, 2, 2, 2, 716, 4062, 3, 2,
	2, 2, 718, 4068, 3, 2, 2, 2, 720, 4070, 3, 2, 2, 2, 722, 4072, 3, 2, 2,
	2, 724, 4074, 3, 2, 2, 2, 726, 4078, 3, 2, 2, 2, 728, 4090, 3, 2, 2, 2,
	730, 4095, 3, 2, 2, 2, 732, 4107, 3, 2, 2, 2, 734, 4111, 3, 2, 2, 2, 736,
	4113, 3, 2, 2, 2, 738, 4118, 3, 2, 2, 2, 740, 4122, 3, 2, 2, 2, 742, 4129,
	3, 2, 2, 2, 744, 4133, 3, 2, 2, 2, 746, 4135, 3, 2, 2, 2, 748, 4137, 3,
	2, 2, 2, 750, 4153, 3, 2, 2, 2, 752, 4162, 3, 2, 2, 2, 754, 4164, 3, 2,
	2, 2, 756, 4175, 3, 2, 2, 2, 758, 4177, 3, 2, 2, 2, 760, 4185, 3, 2, 2,
	2, 762, 4199, 3, 2, 2, 2, 764, 4202, 3, 2, 2, 2, 766, 4206, 3, 2, 2, 2,
	768, 4208, 3, 2, 2, 2, 770, 4210, 3, 2, 2, 2, 772, 4212, 3, 2, 2, 2, 774,
	4239, 3, 2, 2, 2, 776, 4244, 3, 2, 2, 2, 778, 4258, 3, 2, 2, 2, 780, 4263,
	3, 2, 2, 2, 782, 4271, 3, 2, 2, 2, 784, 4273, 3, 2, 2, 2, 786, 4276, 3,
	2, 2, 2, 788, 4284, 3, 2, 2, 2, 790, 4292, 3, 2, 2, 2, 792, 4296, 3, 2,
	2, 2, 794, 4298, 3, 2, 2, 2, 796, 4304, 3, 2, 2, 2, 798, 4306, 3, 2, 2,
	2, 800, 4309, 3, 2, 2, 2, 802, 4319, 3, 2, 2, 2, 804, 4345, 3, 2, 2, 2,
	806, 4363, 3, 2, 2, 2, 808, 4365, 3, 2, 2, 2, 810, 4373, 3, 2, 2, 2, 812,
	4381, 3, 2, 2, 2, 814, 4398, 3, 2, 2, 2, 816, 4404, 3, 2, 2, 2, 818, 4420,
	3, 2, 2, 2, 820, 4436, 3, 2, 2, 2, 822, 823, 5, 4, 3, 2, 823, 824, 7, 2,
	2, 3, 824, 829, 3, 2, 2, 2, 825, 826, 5, 12, 7, 2, 826, 827, 7, 2, 2, 3,
	827, 829, 3, 2, 2, 2, 828, 822, 3, 2, 2, 2, 828, 825, 3, 2, 2, 2, 829,
	3, 3, 2, 2, 2, 830, 840, 7, 145, 2, 2, 831, 833, 5, 6, 4, 2, 832, 831,
	3, 2, 2, 2, 833, 836, 3, 2, 2, 2, 834, 832, 3, 2, 2, 2, 834, 835, 3, 2,
	2, 2, 835, 837, 3, 2, 2, 2, 836, 834, 3, 2, 2, 2, 837, 841, 5, 12, 7, 2,
	838, 839, 7, 261, 2, 2, 839, 841, 5, 430, 216, 2, 840, 834, 3, 2, 2, 2,
	840, 838, 3, 2, 2, 2, 841, 5, 3, 2, 2, 2, 842, 857, 7, 146, 2, 2, 843,
	857, 7, 147, 2, 2, 844, 857, 7, 148, 2, 2, 845, 857, 7, 149, 2, 2, 846,
	857, 7, 262, 2, 2, 847, 857, 7, 204, 2, 2, 848, 857, 7, 263, 2, 2, 849,
	851, 7, 308, 2, 2, 850, 852, 5, 8, 5, 2, 851, 850, 3, 2, 2, 2, 851, 852,
	3, 2, 2, 2, 852, 854, 3, 2, 2, 2, 853, 855, 5, 10, 6, 2, 854, 853, 3, 2,
	2, 2, 854, 855, 3, 2, 2, 2, 855, 857, 3, 2, 2, 2, 856, 842, 3, 2, 2, 2,
	856, 843, 3, 2, 2, 2, 856, 844, 3, 2, 2, 2, 856, 845, 3, 2, 2, 2, 856,
	846, 3, 2, 2, 2, 856, 847, 3, 2, 2, 2, 856, 848, 3, 2, 2, 2, 856, 849,
	3, 2, 2, 2, 857, 7, 3, 2, 2, 2, 858, 859, 7, 282, 2, 2, 859, 9, 3, 2, 2,
	2, 860, 861, 9, 2, 2, 2, 861, 11, 3, 2, 2, 2, 862, 875, 5, 430, 216, 2,
	863, 875, 5, 14, 8, 2, 864, 875, 5, 18, 10, 2, 865, 875, 5, 20, 11, 2,
	866, 875, 5, 22, 12, 2, 867, 875, 5, 24, 13, 2, 868, 875, 5, 30, 16, 2,
	869, 875, 5, 32, 17, 2, 870, 875, 5, 460, 231, 2, 871, 875, 5, 466, 234,
	2, 872, 875, 5, 468, 235, 2, 873, 875, 5, 488, 245, 2, 874, 862, 3, 2,
	2, 2, 874, 863, 3, 2, 2, 2, 874, 864, 3, 2, 2, 2, 874, 865, 3, 2, 2, 2,
	874, 866, 3, 2, 2, 2, 874, 867, 3, 2, 2, 2, 874, 868, 3, 2, 2, 2, 874,
	869, 3, 2, 2, 2, 874, 870, 3, 2, 2, 2, 874, 871, 3, 2, 2, 2, 874, 872,
	3, 2, 2, 2, 874, 873, 3, 2, 2, 2, 875, 13, 3, 2, 2, 2, 876, 877, 7, 58,
	2, 2, 877, 879, 7, 63, 2, 2, 878, 880, 7, 50, 2, 2, 879, 878, 3, 2, 2,
	2, 879, 880, 3, 2, 2, 2, 880, 881, 3, 2, 2, 2, 881, 882, 7, 64, 2, 2, 882,
	884, 7, 364, 2, 2, 883, 885, 7, 28, 2, 2, 884, 883, 3, 2, 2, 2, 884, 885,
	3, 2, 2, 2, 885, 886, 3, 2, 2, 2, 886, 887, 7, 106, 2, 2, 887, 888, 7,
	39, 2, 2, 888, 890, 5, 724, 363, 2, 889, 891, 5, 166, 84, 2, 890, 889,
	3, 2, 2, 2, 890, 891, 3, 2, 2, 2, 891, 15, 3, 2, 2, 2, 892, 894, 7, 233,
	2, 2, 893, 895, 7, 62, 2, 2, 894, 893, 3, 2, 2, 2, 894, 895, 3, 2, 2, 2,
	895, 896, 3, 2, 2, 2, 896, 897, 7, 61, 2, 2, 897, 898, 7, 338, 2, 2, 898,
	899, 7, 364, 2, 2, 899, 900, 7, 339, 2, 2, 900, 17, 3, 2, 2, 2, 901, 902,
	7, 59, 2, 2, 902, 903, 7, 39, 2, 2, 903, 904, 5, 724, 363, 2, 904, 905,
	7, 77, 2, 2, 905, 907, 7, 364, 2, 2, 906, 908, 5, 16, 9, 2, 907, 906, 3,
	2, 2, 2, 907, 908, 3, 2, 2, 2, 908, 19, 3, 2, 2, 2, 909, 915, 7, 60, 2,
	2, 910, 912, 7, 68, 2, 2, 911, 910, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912,
	913, 3, 2, 2, 2, 913, 914, 7, 39, 2, 2, 914, 916, 5, 724, 363, 2, 915,
	911, 3, 2, 2, 2, 915, 916, 3, 2, 2, 2, 916, 917, 3, 2, 2, 2, 917, 918,
	7, 23, 2, 2, 918, 920, 7, 364, 2, 2, 919, 921, 5, 314, 158, 2, 920, 919,
	3, 2, 2, 2, 920, 921, 3, 2, 2, 2, 921, 21, 3, 2, 2, 2, 922, 923, 7, 305,
	2, 2, 923, 924, 7, 306, 2, 2, 924, 927, 5, 740, 371, 2, 925, 926, 7, 334,
	2, 2, 926, 928, 5, 740, 371, 2, 927, 925, 3, 2, 2, 2, 927, 928, 3, 2, 2,
	2, 928, 939, 3, 2, 2, 2, 929, 930, 7, 23, 2, 2, 930, 933, 7, 369, 2, 2,
	931, 932, 7, 77, 2, 2, 932, 934, 7, 369, 2, 2, 933, 931, 3, 2, 2, 2, 933,
	934, 3, 2, 2, 2, 934, 937, 3, 2, 2, 2, 935, 936, 7, 155, 2, 2, 936, 938,
	7, 369, 2, 2, 937, 935, 3, 2, 2, 2, 937, 938, 3, 2, 2, 2, 938, 940, 3,
	2, 2, 2, 939, 929, 3, 2, 2, 2, 939, 940, 3, 2, 2, 2, 940, 943, 3, 2, 2,
	2, 941, 942, 7, 151, 2, 2, 942, 944, 5, 26, 14, 2, 943, 941, 3, 2, 2, 2,
	943, 944, 3, 2, 2, 2, 944, 23, 3, 2, 2, 2, 945, 946, 7, 305, 2, 2, 946,
	952, 7, 58, 2, 2, 947, 950, 5, 740, 371, 2, 948, 949, 7, 334, 2, 2, 949,
	951, 5, 740, 371, 2, 950, 948, 3, 2, 2, 2, 950, 951, 3, 2, 2, 2, 951, 953,
	3, 2, 2, 2, 952, 947, 3, 2, 2, 2, 952, 953, 3, 2, 2, 2, 953, 954, 3, 2,
	2, 2, 954, 955, 7, 23, 2, 2, 955, 958, 7, 364, 2, 2, 956, 957, 7, 151,
	2, 2, 957, 959, 5, 26, 14, 2, 958, 956, 3, 2, 2, 2, 958, 959, 3, 2, 2,
	2, 959, 25, 3, 2, 2, 2, 960, 961, 7, 338, 2, 2, 961, 962, 5, 28, 15, 2,
	962, 963, 7, 339, 2, 2, 963, 27, 3, 2, 2, 2, 964, 969, 5, 298, 150, 2,
	965, 966, 7, 336, 2, 2, 966, 968, 5, 298, 150, 2, 967, 965, 3, 2, 2, 2,
	968, 971, 3, 2, 2, 2, 969, 967, 3, 2, 2, 2, 969, 970, 3, 2, 2, 2, 970,
	29, 3, 2, 2, 2, 971, 969, 3, 2, 2, 2, 972, 973, 7, 305, 2, 2, 973, 974,
	7, 307, 2, 2, 974, 977, 5, 740, 371, 2, 975, 976, 7, 334, 2, 2, 976, 978,
	5, 740, 371, 2, 977, 975, 3, 2, 2, 2, 977, 978, 3, 2, 2, 2, 978, 981, 3,
	2, 2, 2, 979, 980, 7, 151, 2, 2, 980, 982, 5, 26, 14, 2, 981, 979, 3, 2,
	2, 2, 981, 982, 3, 2, 2, 2, 982, 31, 3, 2, 2, 2, 983, 1023, 5, 48, 25,
	2, 984, 1023, 5, 56, 29, 2, 985, 1023, 5, 58, 30, 2, 986, 1023, 5, 62,
	32, 2, 987, 1023, 5, 66, 34, 2, 988, 1023, 5, 64, 33, 2, 989, 1023, 5,
	68, 35, 2, 990, 1023, 5, 174, 88, 2, 991, 1023, 5, 178, 90, 2, 992, 1023,
	5, 240, 121, 2, 993, 1023, 5, 258, 130, 2, 994, 1023, 5, 260, 131, 2, 995,
	1023, 5, 264, 133, 2, 996, 1023, 5, 266, 134, 2, 997, 1023, 5, 248, 125,
	2, 998, 1023, 5, 254, 128, 2, 999, 1023, 5, 250, 126, 2, 1000, 1023, 5,
	252, 127, 2, 1001, 1023, 5, 256, 129, 2, 1002, 1023, 5, 176, 89, 2, 1003,
	1023, 5, 180, 91, 2, 1004, 1023, 5, 186, 94, 2, 1005, 1023, 5, 182, 92,
	2, 1006, 1023, 5, 188, 95, 2, 1007, 1023, 5, 190, 96, 2, 1008, 1023, 5,
	192, 97, 2, 1009, 1023, 5, 194, 98, 2, 1010, 1023, 5, 196, 99, 2, 1011,
	1023, 5, 210, 106, 2, 1012, 1023, 5, 202, 102, 2, 1013, 1023, 5, 212, 107,
	2, 1014, 1023, 5, 204, 103, 2, 1015, 1023, 5, 198, 100, 2, 1016, 1023,
	5, 200, 101, 2, 1017, 1023, 5, 208, 105, 2, 1018, 1023, 5, 206, 104, 2,
	1019, 1023, 5, 486, 244, 2, 1020, 1023, 5, 500, 251, 2, 1021, 1023, 5,
	750, 376, 2, 1022, 983, 3, 2, 2, 2, 1022, 984, 3, 2, 2, 2, 1022, 985, 3,
	2, 2, 2, 1022, 986, 3, 2, 2, 2, 1022, 987, 3, 2, 2, 2, 1022, 988, 3, 2,
	2, 2, 1022, 989, 3, 2, 2, 2, 1022, 990, 3, 2, 2, 2, 1022, 991, 3, 2, 2,
	2, 1022, 992, 3, 2, 2, 2, 1022, 993, 3, 2, 2, 2, 1022, 994, 3, 2, 2, 2,
	1022, 995, 3, 2, 2, 2, 1022, 996, 3, 2, 2, 2, 1022, 997, 3, 2, 2, 2, 1022,
	998, 3, 2, 2, 2, 1022, 999, 3, 2, 2, 2, 1022, 1000, 3, 2, 2, 2, 1022, 1001,
	3, 2, 2, 2, 1022, 1002, 3, 2, 2, 2, 1022, 1003, 3, 2, 2, 2, 1022, 1004,
	3, 2, 2, 2, 1022, 1005, 3, 2, 2, 2, 1022, 1006, 3, 2, 2, 2, 1022, 1007,
	3, 2, 2, 2, 1022, 1008, 3, 2, 2, 2, 1022, 1009, 3, 2, 2, 2, 1022, 1010,
	3, 2, 2, 2, 1022, 1011, 3, 2, 2, 2, 1022, 1012, 3, 2, 2, 2, 1022, 1013,
	3, 2, 2, 2, 1022, 1014, 3, 2, 2, 2, 1022, 1015, 3, 2, 2, 2, 1022, 1016,
	3, 2, 2, 2, 1022, 1017, 3, 2, 2, 2, 1022, 1018, 3, 2, 2, 2, 1022, 1019,
	3, 2, 2, 2, 1022, 1020, 3, 2, 2, 2, 1022, 1021, 3, 2, 2, 2, 1023, 33, 3,
	2, 2, 2, 1024, 1025, 7, 12, 2, 2, 1025, 1026, 7, 13, 2, 2, 1026, 35, 3,
	2, 2, 2, 1027, 1028, 9, 3, 2, 2, 1028, 37, 3, 2, 2, 2, 1029, 1030, 7, 12,
	2, 2, 1030, 1031, 7, 9, 2, 2, 1031, 1032, 7, 13, 2, 2, 1032, 39, 3, 2,
	2, 2, 1033, 1034, 7, 127, 2, 2, 1034, 1035, 7, 261, 2, 2, 1035, 41, 3,
	2, 2, 2, 1036, 1037, 7, 128, 2, 2, 1037, 1038, 7, 261, 2, 2, 1038, 43,
	3, 2, 2, 2, 1039, 1040, 7, 121, 2, 2, 1040, 1041, 7, 24, 2, 2, 1041, 1042,
	7, 232, 2, 2, 1042, 45, 3, 2, 2, 2, 1043, 1044, 7, 8, 2, 2, 1044, 1045,
	7, 137, 2, 2, 1045, 47, 3, 2, 2, 2, 1046, 1047, 7, 67, 2, 2, 1047, 1049,
	9, 4, 2, 2, 1048, 1050, 5, 38, 20, 2, 1049, 1048, 3, 2, 2, 2, 1049, 1050,
	3, 2, 2, 2, 1050, 1051, 3, 2, 2, 2, 1051, 1053, 5, 740, 371, 2, 1052, 1054,
	5, 60, 31, 2, 1053, 1052, 3, 2, 2, 2, 1053, 1054, 3, 2, 2, 2, 1054, 1056,
	3, 2, 2, 2, 1055, 1057, 5, 50, 26, 2, 1056, 1055, 3, 2, 2, 2, 1056, 1057,
	3, 2, 2, 2, 1057, 1061, 3, 2, 2, 2, 1058, 1059, 7, 151, 2, 2, 1059, 1060,
	7, 154, 2, 2, 1060, 1062, 5, 52, 27, 2, 1061, 1058, 3, 2, 2, 2, 1061, 1062,
	3, 2, 2, 2, 1062, 49, 3, 2, 2, 2, 1063, 1064, 7, 129, 2, 2, 1064, 1065,
	7, 364, 2, 2, 1065, 51, 3, 2, 2, 2, 1066, 1067, 7, 338, 2, 2, 1067, 1068,
	5, 54, 28, 2, 1068, 1069, 7, 339, 2, 2, 1069, 53, 3, 2, 2, 2, 1070, 1075,
	5, 298, 150, 2, 1071, 1072, 7, 336, 2, 2, 1072, 1074, 5, 298, 150, 2, 1073,
	1071, 3, 2, 2, 2, 1074, 1077, 3, 2, 2, 2, 1075, 1073, 3, 2, 2, 2, 1075,
	1076, 3, 2, 2, 2, 1076, 55, 3, 2, 2, 2, 1077, 1075, 3, 2, 2, 2, 1078, 1079,
	7, 222, 2, 2, 1079, 1080, 5, 740, 371, 2, 1080, 57, 3, 2, 2, 2, 1081, 1082,
	7, 75, 2, 2, 1082, 1084, 9, 4, 2, 2, 1083, 1085, 5, 34, 18, 2, 1084, 1083,
	3, 2, 2, 2, 1084, 1085, 3, 2, 2, 2, 1085, 1086, 3, 2, 2, 2, 1086, 1088,
	5, 740, 371, 2, 1087, 1089, 5, 36, 19, 2, 1088, 1087, 3, 2, 2, 2, 1088,
	1089, 3, 2, 2, 2, 1089, 59, 3, 2, 2, 2, 1090, 1091, 7, 78, 2, 2, 1091,
	1092, 7, 364, 2, 2, 1092, 61, 3, 2, 2, 2, 1093, 1095, 7, 67, 2, 2, 1094,
	1096, 7, 140, 2, 2, 1095, 1094, 3, 2, 2, 2, 1095, 1096, 3, 2, 2, 2, 1096,
	1098, 3, 2, 2, 2, 1097, 1099, 7, 68, 2, 2, 1098, 1097, 3, 2, 2, 2, 1098,
	1099, 3, 2, 2, 2, 1099, 1100, 3, 2, 2, 2, 1100, 1102, 7, 39, 2, 2, 1101,
	1103, 5, 38, 20, 2, 1102, 1101, 3, 2, 2, 2, 1102, 1103, 3, 2, 2, 2, 1103,
	1104, 3, 2, 2, 2, 1104, 1153, 5, 572, 287, 2, 1105, 1106, 7, 10, 2, 2,
	1106, 1108, 5, 572, 287, 2, 1107, 1109, 5, 290, 146, 2, 1108, 1107, 3,
	2, 2, 2, 1108, 1109, 3, 2, 2, 2, 1109, 1111, 3, 2, 2, 2, 1110, 1112, 5,
	312, 157, 2, 1111, 1110, 3, 2, 2, 2, 1111, 1112, 3, 2, 2, 2, 1112, 1114,
	3, 2, 2, 2, 1113, 1115, 5, 314, 158, 2, 1114, 1113, 3, 2, 2, 2, 1114, 1115,
	3, 2, 2, 2, 1115, 1117, 3, 2, 2, 2, 1116, 1118, 5, 292, 147, 2, 1117, 1116,
	3, 2, 2, 2, 1117, 1118, 3, 2, 2, 2, 1118, 1154, 3, 2, 2, 2, 1119, 1120,
	7, 338, 2, 2, 1120, 1121, 5, 318, 160, 2, 1121, 1122, 7, 339, 2, 2, 1122,
	1124, 3, 2, 2, 2, 1123, 1119, 3, 2, 2, 2, 1123, 1124, 3, 2, 2, 2, 1124,
	1126, 3, 2, 2, 2, 1125, 1127, 5, 272, 137, 2, 1126, 1125, 3, 2, 2, 2, 1126,
	1127, 3, 2, 2, 2, 1127, 1129, 3, 2, 2, 2, 1128, 1130, 5, 274, 138, 2, 1129,
	1128, 3, 2, 2, 2, 1129, 1130, 3, 2, 2, 2, 1130, 1132, 3, 2, 2, 2, 1131,
	1133, 5, 276, 139, 2, 1132, 1131, 3, 2, 2, 2, 1132, 1133, 3, 2, 2, 2, 1133,
	1135, 3, 2, 2, 2, 1134, 1136, 5, 278, 140, 2, 1135, 1134, 3, 2, 2, 2, 1135,
	1136, 3, 2, 2, 2, 1136, 1138, 3, 2, 2, 2, 1137, 1139, 5, 290, 146, 2, 1138,
	1137, 3, 2, 2, 2, 1138, 1139, 3, 2, 2, 2, 1139, 1141, 3, 2, 2, 2, 1140,
	1142, 5, 312, 157, 2, 1141, 1140, 3, 2, 2, 2, 1141, 1142, 3, 2, 2, 2, 1142,
	1144, 3, 2, 2, 2, 1143, 1145, 5, 314, 158, 2, 1144, 1143, 3, 2, 2, 2, 1144,
	1145, 3, 2, 2, 2, 1145, 1147, 3, 2, 2, 2, 1146, 1148, 5, 292, 147, 2, 1147,
	1146, 3, 2, 2, 2, 1147, 1148, 3, 2, 2, 2, 1148, 1151, 3, 2, 2, 2, 1149,
	1150, 7, 24, 2, 2, 1150, 1152, 5, 450, 226, 2, 1151, 1149, 3, 2, 2, 2,
	1151, 1152, 3, 2, 2, 2, 1152, 1154, 3, 2, 2, 2, 1153, 1105, 3, 2, 2, 2,
	1153, 1123, 3, 2, 2, 2, 1154, 63, 3, 2, 2, 2, 1155, 1156, 7, 246, 2, 2,
	1156, 1157, 7, 39, 2, 2, 1157, 1163, 5, 130, 66, 2, 1158, 1159, 7, 41,
	2, 2, 1159, 1160, 7, 338, 2, 2, 1160, 1161, 5, 322, 162, 2, 1161, 1162,
	7, 339, 2, 2, 1162, 1164, 3, 2, 2, 2, 1163, 1158, 3, 2, 2, 2, 1163, 1164,
	3, 2, 2, 2, 1164, 65, 3, 2, 2, 2, 1165, 1166, 7, 75, 2, 2, 1166, 1168,
	7, 39, 2, 2, 1167, 1169, 5, 34, 18, 2, 1168, 1167, 3, 2, 2, 2, 1168, 1169,
	3, 2, 2, 2, 1169, 1170, 3, 2, 2, 2, 1170, 1172, 5, 572, 287, 2, 1171, 1173,
	7, 202, 2, 2, 1172, 1171, 3, 2, 2, 2, 1172, 1173, 3, 2, 2, 2, 1173, 1175,
	3, 2, 2, 2, 1174, 1176, 5, 16, 9, 2, 1175, 1174, 3, 2, 2, 2, 1175, 1176,
	3, 2, 2, 2, 1176, 67, 3, 2, 2, 2, 1177, 1178, 7, 69, 2, 2, 1178, 1179,
	7, 39, 2, 2, 1179, 1180, 5, 572, 287, 2, 1180, 1181, 5, 70, 36, 2, 1181,
	1200, 3, 2, 2, 2, 1182, 1183, 7, 69, 2, 2, 1183, 1184, 7, 180, 2, 2, 1184,
	1186, 5, 572, 287, 2, 1185, 1187, 7, 24, 2, 2, 1186, 1185, 3, 2, 2, 2,
	1186, 1187, 3, 2, 2, 2, 1187, 1188, 3, 2, 2, 2, 1188, 1189, 5, 76, 39,
	2, 1189, 1200, 3, 2, 2, 2, 1190, 1191, 7, 69, 2, 2, 1191, 1192, 7, 185,
	2, 2, 1192, 1193, 7, 180, 2, 2, 1193, 1194, 5, 572, 287, 2, 1194, 1195,
	5, 78, 40, 2, 1195, 1200, 3, 2, 2, 2, 1196, 1197, 7, 69, 2, 2, 1197, 1198,
	9, 4, 2, 2, 1198, 1200, 5, 80, 41, 2, 1199, 1177, 3, 2, 2, 2, 1199, 1182,
	3, 2, 2, 2, 1199, 1190, 3, 2, 2, 2, 1199, 1196, 3, 2, 2, 2, 1200, 69, 3,
	2, 2, 2, 1201, 1219, 5, 88, 45, 2, 1202, 1219, 5, 118, 60, 2, 1203, 1219,
	5, 106, 54, 2, 1204, 1219, 5, 110, 56, 2, 1205, 1219, 5, 112, 57, 2, 1206,
	1219, 5, 114, 58, 2, 1207, 1219, 5, 120, 61, 2, 1208, 1219, 5, 146, 74,
	2, 1209, 1219, 5, 148, 75, 2, 1210, 1219, 5, 74, 38, 2, 1211, 1219, 5,
	96, 49, 2, 1212, 1219, 5, 92, 47, 2, 1213, 1215, 5, 726, 364, 2, 1214,
	1213, 3, 2, 2, 2, 1214, 1215, 3, 2, 2, 2, 1215, 1216, 3, 2, 2, 2, 1216,
	1219, 5, 72, 37, 2, 1217, 1219, 5, 162, 82, 2, 1218, 1201, 3, 2, 2, 2,
	1218, 1202, 3, 2, 2, 2, 1218, 1203, 3, 2, 2, 2, 1218, 1204, 3, 2, 2, 2,
	1218, 1205, 3, 2, 2, 2, 1218, 1206, 3, 2, 2, 2, 1218, 1207, 3, 2, 2, 2,
	1218, 1208, 3, 2, 2, 2, 1218, 1209, 3, 2, 2, 2, 1218, 1210, 3, 2, 2, 2,
	1218, 1211, 3, 2, 2, 2, 1218, 1212, 3, 2, 2, 2, 1218, 1214, 3, 2, 2, 2,
	1218, 1217, 3, 2, 2, 2, 1219, 71, 3, 2, 2, 2, 1220, 1235, 5, 132, 67, 2,
	1221, 1235, 5, 144, 73, 2, 1222, 1235, 5, 154, 78, 2, 1223, 1235, 5, 128,
	65, 2, 1224, 1235, 5, 150, 76, 2, 1225, 1235, 5, 156, 79, 2, 1226, 1235,
	5, 136, 69, 2, 1227, 1235, 5, 134, 68, 2, 1228, 1235, 5, 160, 81, 2, 1229,
	1235, 5, 100, 51, 2, 1230, 1235, 5, 102, 52, 2, 1231, 1235, 5, 98, 50,
	2, 1232, 1235, 5, 90, 46, 2, 1233, 1235, 5, 94, 48, 2, 1234, 1220, 3, 2,
	2, 2, 1234, 1221, 3, 2, 2, 2, 1234, 1222, 3, 2, 2, 2, 1234, 1223, 3, 2,
	2, 2, 1234, 1224, 3, 2, 2, 2, 1234, 1225, 3, 2, 2, 2, 1234, 1226, 3, 2,
	2, 2, 1234, 1227, 3, 2, 2, 2, 1234, 1228, 3, 2, 2, 2, 1234, 1229, 3, 2,
	2, 2, 1234, 1230, 3, 2, 2, 2, 1234, 1231, 3, 2, 2, 2, 1234, 1232, 3, 2,
	2, 2, 1234, 1233, 3, 2, 2, 2, 1235, 73, 3, 2, 2, 2, 1236, 1237, 7, 37,
	2, 2, 1237, 1238, 7, 71, 2, 2, 1238, 1239, 7, 338, 2, 2, 1239, 1240, 5,
	380, 191, 2, 1240, 1241, 7, 339, 2, 2, 1241, 75, 3, 2, 2, 2, 1242, 1248,
	5, 122, 62, 2, 1243, 1248, 5, 88, 45, 2, 1244, 1248, 5, 106, 54, 2, 1245,
	1248, 5, 118, 60, 2, 1246, 1248, 5, 450, 226, 2, 1247, 1242, 3, 2, 2, 2,
	1247, 1243, 3, 2, 2, 2, 1247, 1244, 3, 2, 2, 2, 1247, 1245, 3, 2, 2, 2,
	1247, 1246, 3, 2, 2, 2, 1248, 77, 3, 2, 2, 2, 1249, 1252, 5, 124, 63, 2,
	1250, 1252, 5, 126, 64, 2, 1251, 1249, 3, 2, 2, 2, 1251, 1250, 3, 2, 2,
	2, 1252, 79, 3, 2, 2, 2, 1253, 1257, 5, 82, 42, 2, 1254, 1257, 5, 84, 43,
	2, 1255, 1257, 5, 86, 44, 2, 1256, 1253, 3, 2, 2, 2, 1256, 1254, 3, 2,
	2, 2, 1256, 1255, 3, 2, 2, 2, 1257, 81, 3, 2, 2, 2, 1258, 1259, 5, 740,
	371, 2, 1259, 1260, 7, 157, 2, 2, 1260, 1261, 7, 154, 2, 2, 1261, 1262,
	5, 52, 27, 2, 1262, 83, 3, 2, 2, 2, 1263, 1264, 5, 740, 371, 2, 1264, 1265,
	7, 157, 2, 2, 1265, 1266, 7, 256, 2, 2, 1266, 1267, 5, 230, 116, 2, 1267,
	85, 3, 2, 2, 2, 1268, 1269, 5, 740, 371, 2, 1269, 1270, 7, 157, 2, 2, 1270,
	1271, 7, 129, 2, 2, 1271, 1272, 7, 364, 2, 2, 1272, 87, 3, 2, 2, 2, 1273,
	1274, 7, 76, 2, 2, 1274, 1275, 7, 77, 2, 2, 1275, 1276, 5, 572, 287, 2,
	1276, 89, 3, 2, 2, 2, 1277, 1278, 9, 5, 2, 2, 1278, 1279, 7, 41, 2, 2,
	1279, 1280, 7, 338, 2, 2, 1280, 1281, 5, 316, 159, 2, 1281, 1283, 7, 339,
	2, 2, 1282, 1284, 5, 36, 19, 2, 1283, 1282, 3, 2, 2, 2, 1283, 1284, 3,
	2, 2, 2, 1284, 91, 3, 2, 2, 2, 1285, 1288, 7, 136, 2, 2, 1286, 1289, 5,
	354, 178, 2, 1287, 1289, 5, 344, 173, 2, 1288, 1286, 3, 2, 2, 2, 1288,
	1287, 3, 2, 2, 2, 1289, 93, 3, 2, 2, 2, 1290, 1291, 7, 226, 2, 2, 1291,
	1293, 7, 41, 2, 2, 1292, 1294, 5, 36, 19, 2, 1293, 1292, 3, 2, 2, 2, 1293,
	1294, 3, 2, 2, 2, 1294, 95, 3, 2, 2, 2, 1295, 1296, 7, 75, 2, 2, 1296,
	1297, 7, 292, 2, 2, 1297, 1298, 5, 740, 371, 2, 1298, 97, 3, 2, 2, 2, 1299,
	1301, 7, 70, 2, 2, 1300, 1302, 7, 71, 2, 2, 1301, 1300, 3, 2, 2, 2, 1301,
	1302, 3, 2, 2, 2, 1302, 1303, 3, 2, 2, 2, 1303, 1304, 5, 740, 371, 2, 1304,
	1305, 5, 740, 371, 2, 1305, 1307, 5, 412, 207, 2, 1306, 1308, 5, 394, 198,
	2, 1307, 1306, 3, 2, 2, 2, 1307, 1308, 3, 2, 2, 2, 1308, 1311, 3, 2, 2,
	2, 1309, 1310, 7, 78, 2, 2, 1310, 1312, 7, 364, 2, 2, 1311, 1309, 3, 2,
	2, 2, 1311, 1312, 3, 2, 2, 2, 1312, 1314, 3, 2, 2, 2, 1313, 1315, 5, 104,
	53, 2, 1314, 1313, 3, 2, 2, 2, 1314, 1315, 3, 2, 2, 2, 1315, 1317, 3, 2,
	2, 2, 1316, 1318, 5, 36, 19, 2, 1317, 1316, 3, 2, 2, 2, 1317, 1318, 3,
	2, 2, 2, 1318, 99, 3, 2, 2, 2, 1319, 1320, 7, 226, 2, 2, 1320, 1321, 7,
	221, 2, 2, 1321, 1323, 7, 233, 2, 2, 1322, 1324, 7, 71, 2, 2, 1323, 1322,
	3, 2, 2, 2, 1323, 1324, 3, 2, 2, 2, 1324, 1325, 3, 2, 2, 2, 1325, 1326,
	5, 740, 371, 2, 1326, 1327, 7, 157, 2, 2, 1327, 1330, 5, 294, 148, 2, 1328,
	1329, 7, 78, 2, 2, 1329, 1331, 7, 364, 2, 2, 1330, 1328, 3, 2, 2, 2, 1330,
	1331, 3, 2, 2, 2, 1331, 101, 3, 2, 2, 2, 1332, 1333, 7, 226, 2, 2, 1333,
	1334, 7, 221, 2, 2, 1334, 1335, 7, 157, 2, 2, 1335, 1336, 5, 294, 148,
	2, 1336, 103, 3, 2, 2, 2, 1337, 1341, 7, 72, 2, 2, 1338, 1339, 7, 73, 2,
	2, 1339, 1341, 5, 740, 371, 2, 1340, 1337, 3, 2, 2, 2, 1340, 1338, 3, 2,
	2, 2, 1341, 105, 3, 2, 2, 2, 1342, 1344, 7, 136, 2, 2, 1343, 1345, 5, 38,
	20, 2, 1344, 1343, 3, 2, 2, 2, 1344, 1345, 3, 2, 2, 2, 1345, 1347, 3, 2,
	2, 2, 1346, 1348, 5, 108, 55, 2, 1347, 1346, 3, 2, 2, 2, 1348, 1349, 3,
	2, 2, 2, 1349, 1347, 3, 2, 2, 2, 1349, 1350, 3, 2, 2, 2, 1350, 107, 3,
	2, 2, 2, 1351, 1353, 5, 726, 364, 2, 1352, 1354, 5, 116, 59, 2, 1353, 1352,
	3, 2, 2, 2, 1353, 1354, 3, 2, 2, 2, 1354, 109, 3, 2, 2, 2, 1355, 1359,
	7, 217, 2, 2, 1356, 1358, 5, 726, 364, 2, 1357, 1356, 3, 2, 2, 2, 1358,
	1361, 3, 2, 2, 2, 1359, 1357, 3, 2, 2, 2, 1359, 1360, 3, 2, 2, 2, 1360,
	111, 3, 2, 2, 2, 1361, 1359, 3, 2, 2, 2, 1362, 1366, 7, 218, 2, 2, 1363,
	1365, 5, 726, 364, 2, 1364, 1363, 3, 2, 2, 2, 1365, 1368, 3, 2, 2, 2, 1366,
	1364, 3, 2, 2, 2, 1366, 1367, 3, 2, 2, 2, 1367, 113, 3, 2, 2, 2, 1368,
	1366, 3, 2, 2, 2, 1369, 1373, 7, 219, 2, 2, 1370, 1372, 5, 726, 364, 2,
	1371, 1370, 3, 2, 2, 2, 1372, 1375, 3, 2, 2, 2, 1373, 1371, 3, 2, 2, 2,
	1373, 1374, 3, 2, 2, 2, 1374, 115, 3, 2, 2, 2, 1375, 1373, 3, 2, 2, 2,
	1376, 1377, 7, 129, 2, 2, 1377, 1378, 7, 364, 2, 2, 1378, 117, 3, 2, 2,
	2, 1379, 1381, 7, 75, 2, 2, 1380, 1382, 5, 34, 18, 2, 1381, 1380, 3, 2,
	2, 2, 1381, 1382, 3, 2, 2, 2, 1382, 1383, 3, 2, 2, 2, 1383, 1388, 5, 730,
	366, 2, 1384, 1385, 7, 336, 2, 2, 1385, 1387, 5, 730, 366, 2, 1386, 1384,
	3, 2, 2, 2, 1387, 1390, 3, 2, 2, 2, 1388, 1386, 3, 2, 2, 2, 1388, 1389,
	3, 2, 2, 2, 1389, 1392, 3, 2, 2, 2, 1390, 1388, 3, 2, 2, 2, 1391, 1393,
	7, 202, 2, 2, 1392, 1391, 3, 2, 2, 2, 1392, 1393, 3, 2, 2, 2, 1393, 1395,
	3, 2, 2, 2, 1394, 1396, 5, 16, 9, 2, 1395, 1394, 3, 2, 2, 2, 1395, 1396,
	3, 2, 2, 2, 1396, 119, 3, 2, 2, 2, 1397, 1398, 7, 157, 2, 2, 1398, 1399,
	7, 159, 2, 2, 1399, 1407, 5, 294, 148, 2, 1400, 1401, 7, 158, 2, 2, 1401,
	1403, 7, 159, 2, 2, 1402, 1404, 5, 34, 18, 2, 1403, 1402, 3, 2, 2, 2, 1403,
	1404, 3, 2, 2, 2, 1404, 1405, 3, 2, 2, 2, 1405, 1407, 5, 294, 148, 2, 1406,
	1397, 3, 2, 2, 2, 1406, 1400, 3, 2, 2, 2, 1407, 121, 3, 2, 2, 2, 1408,
	1409, 7, 157, 2, 2, 1409, 1410, 7, 159, 2, 2, 1410, 1418, 5, 294, 148,
	2, 1411, 1412, 7, 158, 2, 2, 1412, 1414, 7, 159, 2, 2, 1413, 1415, 5, 34,
	18, 2, 1414, 1413, 3, 2, 2, 2, 1414, 1415, 3, 2, 2, 2, 1415, 1416, 3, 2,
	2, 2, 1416, 1418, 5, 294, 148, 2, 1417, 1408, 3, 2, 2, 2, 1417, 1411, 3,
	2, 2, 2, 1418, 123, 3, 2, 2, 2, 1419, 1422, 5, 40, 21, 2, 1420, 1422, 5,
	42, 22, 2, 1421, 1419, 3, 2, 2, 2, 1421, 1420, 3, 2, 2, 2, 1422, 125, 3,
	2, 2, 2, 1423, 1424, 7, 44, 2, 2, 1424, 127, 3, 2, 2, 2, 1425, 1426, 7,
	157, 2, 2, 1426, 1427, 7, 150, 2, 2, 1427, 1431, 7, 364, 2, 2, 1428, 1429,
	7, 151, 2, 2, 1429, 1430, 7, 153, 2, 2, 1430, 1432, 5, 294, 148, 2, 1431,
	1428, 3, 2, 2, 2, 1431, 1432, 3, 2, 2, 2, 1432, 1437, 3, 2, 2, 2, 1433,
	1434, 7, 157, 2, 2, 1434, 1435, 7, 153, 2, 2, 1435, 1437, 5, 294, 148,
	2, 1436, 1425, 3, 2, 2, 2, 1436, 1433, 3, 2, 2, 2, 1437, 129, 3, 2, 2,
	2, 1438, 1440, 5, 572, 287, 2, 1439, 1441, 5, 726, 364, 2, 1440, 1439,
	3, 2, 2, 2, 1440, 1441, 3, 2, 2, 2, 1441, 131, 3, 2, 2, 2, 1442, 1443,
	7, 157, 2, 2, 1443, 1444, 7, 122, 2, 2, 1444, 1445, 5, 164, 83, 2, 1445,
	133, 3, 2, 2, 2, 1446, 1447, 7, 9, 2, 2, 1447, 1452, 7, 104, 2, 2, 1448,
	1449, 7, 9, 2, 2, 1449, 1452, 7, 105, 2, 2, 1450, 1452, 5, 276, 139, 2,
	1451, 1446, 3, 2, 2, 2, 1451, 1448, 3, 2, 2, 2, 1451, 1450, 3, 2, 2, 2,
	1452, 135, 3, 2, 2, 2, 1453, 1454, 7, 157, 2, 2, 1454, 1455, 7, 229, 2,
	2, 1455, 1456, 7, 129, 2, 2, 1456, 1457, 5, 138, 70, 2, 1457, 137, 3, 2,
	2, 2, 1458, 1459, 7, 338, 2, 2, 1459, 1460, 5, 140, 71, 2, 1460, 1461,
	7, 339, 2, 2, 1461, 139, 3, 2, 2, 2, 1462, 1467, 5, 142, 72, 2, 1463, 1464,
	7, 336, 2, 2, 1464, 1466, 5, 142, 72, 2, 1465, 1463, 3, 2, 2, 2, 1466,
	1469, 3, 2, 2, 2, 1467, 1465, 3, 2, 2, 2, 1467, 1468, 3, 2, 2, 2, 1468,
	141, 3, 2, 2, 2, 1469, 1467, 3, 2, 2, 2, 1470, 1471, 5, 366, 184, 2, 1471,
	1472, 7, 344, 2, 2, 1472, 1473, 7, 364, 2, 2, 1473, 143, 3, 2, 2, 2, 1474,
	1475, 7, 157, 2, 2, 1475, 1476, 7, 129, 2, 2, 1476, 1477, 7, 364, 2, 2,
	1477, 145, 3, 2, 2, 2, 1478, 1484, 5, 278, 140, 2, 1479, 1480, 7, 9, 2,
	2, 1480, 1484, 7, 229, 2, 2, 1481, 1482, 7, 9, 2, 2, 1482, 1484, 5, 44,
	23, 2, 1483, 1478, 3, 2, 2, 2, 1483, 1479, 3, 2, 2, 2, 1483, 1481, 3, 2,
	2, 2, 1484, 147, 3, 2, 2, 2, 1485, 1486, 7, 252, 2, 2, 1486, 1487, 5, 726,
	364, 2, 1487, 1488, 7, 151, 2, 2, 1488, 1489, 7, 39, 2, 2, 1489, 1490,
	5, 572, 287, 2, 1490, 149, 3, 2, 2, 2, 1491, 1492, 7, 76, 2, 2, 1492, 1493,
	7, 77, 2, 2, 1493, 1494, 5, 726, 364, 2, 1494, 151, 3, 2, 2, 2, 1495, 1496,
	7, 226, 2, 2, 1496, 1497, 7, 221, 2, 2, 1497, 1499, 7, 233, 2, 2, 1498,
	1500, 7, 71, 2, 2, 1499, 1498, 3, 2, 2, 2, 1499, 1500, 3, 2, 2, 2, 1500,
	1501, 3, 2, 2, 2, 1501, 1502, 5, 740, 371, 2, 1502, 1503, 7, 157, 2, 2,
	1503, 1506, 5, 294, 148, 2, 1504, 1505, 7, 78, 2, 2, 1505, 1507, 7, 364,
	2, 2, 1506, 1504, 3, 2, 2, 2, 1506, 1507, 3, 2, 2, 2, 1507, 153, 3, 2,
	2, 2, 1508, 1509, 7, 224, 2, 2, 1509, 155, 3, 2, 2, 2, 1510, 1511, 7, 106,
	2, 2, 1511, 1512, 7, 369, 2, 2, 1512, 1513, 7, 107, 2, 2, 1513, 157, 3,
	2, 2, 2, 1514, 1515, 7, 7, 2, 2, 1515, 1516, 7, 313, 2, 2, 1516, 159, 3,
	2, 2, 2, 1517, 1518, 7, 258, 2, 2, 1518, 1520, 7, 364, 2, 2, 1519, 1521,
	5, 158, 80, 2, 1520, 1519, 3, 2, 2, 2, 1520, 1521, 3, 2, 2, 2, 1521, 1526,
	3, 2, 2, 2, 1522, 1523, 7, 151, 2, 2, 1523, 1524, 7, 28, 2, 2, 1524, 1525,
	7, 159, 2, 2, 1525, 1527, 5, 294, 148, 2, 1526, 1522, 3, 2, 2, 2, 1526,
	1527, 3, 2, 2, 2, 1527, 161, 3, 2, 2, 2, 1528, 1529, 7, 157, 2, 2, 1529,
	1530, 7, 256, 2, 2, 1530, 1531, 5, 230, 116, 2, 1531, 163, 3, 2, 2, 2,
	1532, 1533, 7, 123, 2, 2, 1533, 1534, 7, 364, 2, 2, 1534, 1535, 7, 124,
	2, 2, 1535, 1536, 7, 364, 2, 2, 1536, 1537, 7, 150, 2, 2, 1537, 1542, 7,
	364, 2, 2, 1538, 1539, 7, 125, 2, 2, 1539, 1540, 7, 364, 2, 2, 1540, 1541,
	7, 126, 2, 2, 1541, 1543, 7, 364, 2, 2, 1542, 1538, 3, 2, 2, 2, 1542, 1543,
	3, 2, 2, 2, 1543, 1546, 3, 2, 2, 2, 1544, 1546, 5, 740, 371, 2, 1545, 1532,
	3, 2, 2, 2, 1545, 1544, 3, 2, 2, 2, 1546, 165, 3, 2, 2, 2, 1547, 1548,
	7, 123, 2, 2, 1548, 1549, 7, 364, 2, 2, 1549, 1550, 7, 150, 2, 2, 1550,
	1551, 7, 364, 2, 2, 1551, 167, 3, 2, 2, 2, 1552, 1555, 5, 740, 371, 2,
	1553, 1554, 7, 334, 2, 2, 1554, 1556, 5, 740, 371, 2, 1555, 1553, 3, 2,
	2, 2, 1555, 1556, 3, 2, 2, 2, 1556, 1570, 3, 2, 2, 2, 1557, 1567, 5, 740,
	371, 2, 1558, 1563, 7, 334, 2, 2, 1559, 1564, 7, 162, 2, 2, 1560, 1564,
	7, 118, 2, 2, 1561, 1564, 7, 161, 2, 2, 1562, 1564, 5, 740, 371, 2, 1563,
	1559, 3, 2, 2, 2, 1563, 1560, 3, 2, 2, 2, 1563, 1561, 3, 2, 2, 2, 1563,
	1562, 3, 2, 2, 2, 1564, 1566, 3, 2, 2, 2, 1565, 1558, 3, 2, 2, 2, 1566,
	1569, 3, 2, 2, 2, 1567, 1565, 3, 2, 2, 2, 1567, 1568, 3, 2, 2, 2, 1568,
	1571, 3, 2, 2, 2, 1569, 1567, 3, 2, 2, 2, 1570, 1557, 3, 2, 2, 2, 1570,
	1571, 3, 2, 2, 2, 1571, 169, 3, 2, 2, 2, 1572, 1574, 5, 168, 85, 2, 1573,
	1575, 5, 726, 364, 2, 1574, 1573, 3, 2, 2, 2, 1574, 1575, 3, 2, 2, 2, 1575,
	171, 3, 2, 2, 2, 1576, 1578, 5, 572, 287, 2, 1577, 1579, 5, 726, 364, 2,
	1578, 1577, 3, 2, 2, 2, 1578, 1579, 3, 2, 2, 2, 1579, 1581, 3, 2, 2, 2,
	1580, 1582, 5, 326, 164, 2, 1581, 1580, 3, 2, 2, 2, 1581, 1582, 3, 2, 2,
	2, 1582, 173, 3, 2, 2, 2, 1583, 1597, 9, 6, 2, 2, 1584, 1586, 9, 4, 2,
	2, 1585, 1587, 7, 146, 2, 2, 1586, 1585, 3, 2, 2, 2, 1586, 1587, 3, 2,
	2, 2, 1587, 1588, 3, 2, 2, 2, 1588, 1598, 5, 740, 371, 2, 1589, 1591, 7,
	141, 2, 2, 1590, 1592, 7, 146, 2, 2, 1591, 1590, 3, 2, 2, 2, 1591, 1592,
	3, 2, 2, 2, 1592, 1593, 3, 2, 2, 2, 1593, 1598, 5, 738, 370, 2, 1594, 1595,
	9, 7, 2, 2, 1595, 1598, 5, 172, 87, 2, 1596, 1598, 5, 172, 87, 2, 1597,
	1584, 3, 2, 2, 2, 1597, 1589, 3, 2, 2, 2, 1597, 1594, 3, 2, 2, 2, 1597,
	1596, 3, 2, 2, 2, 1598, 175, 3, 2, 2, 2, 1599, 1600, 7, 204, 2, 2, 1600,
	1601, 7, 39, 2, 2, 1601, 1614, 5, 724, 363, 2, 1602, 1603, 7, 220, 2, 2,
	1603, 1610, 7, 221, 2, 2, 1604, 1611, 7, 247, 2, 2, 1605, 1606, 7, 233,
	2, 2, 1606, 1608, 7, 41, 2, 2, 1607, 1609, 5, 322, 162, 2, 1608, 1607,
	3, 2, 2, 2, 1608, 1609, 3, 2, 2, 2, 1609, 1611, 3, 2, 2, 2, 1610, 1604,
	3, 2, 2, 2, 1610, 1605, 3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611, 1615,
	3, 2, 2, 2, 1612, 1613, 7, 288, 2, 2, 1613, 1615, 7, 62, 2, 2, 1614, 1602,
	3, 2, 2, 2, 1614, 1612, 3, 2, 2, 2, 1615, 177, 3, 2, 2, 2, 1616, 1617,
	7, 46, 2, 2, 1617, 1620, 9, 8, 2, 2, 1618, 1619, 7, 10, 2, 2, 1619, 1621,
	5, 270, 136, 2, 1620, 1618, 3, 2, 2, 2, 1620, 1621, 3, 2, 2, 2, 1621, 1740,
	3, 2, 2, 2, 1622, 1623, 7, 46, 2, 2, 1623, 1626, 7, 40, 2, 2, 1624, 1625,
	9, 9, 2, 2, 1625, 1627, 5, 740, 371, 2, 1626, 1624, 3, 2, 2, 2, 1626, 1627,
	3, 2, 2, 2, 1627, 1631, 3, 2, 2, 2, 1628, 1629, 7, 10, 2, 2, 1629, 1632,
	5, 270, 136, 2, 1630, 1632, 5, 270, 136, 2, 1631, 1628, 3, 2, 2, 2, 1631,
	1630, 3, 2, 2, 2, 1631, 1632, 3, 2, 2, 2, 1632, 1740, 3, 2, 2, 2, 1633,
	1634, 7, 46, 2, 2, 1634, 1637, 7, 181, 2, 2, 1635, 1636, 9, 9, 2, 2, 1636,
	1638, 5, 740, 371, 2, 1637, 1635, 3, 2, 2, 2, 1637, 1638, 3, 2, 2, 2, 1638,
	1642, 3, 2, 2, 2, 1639, 1640, 7, 10, 2, 2, 1640, 1643, 5, 270, 136, 2,
	1641, 1643, 5, 270, 136, 2, 1642, 1639, 3, 2, 2, 2, 1642, 1641, 3, 2, 2,
	2, 1642, 1643, 3, 2, 2, 2, 1643, 1740, 3, 2, 2, 2, 1644, 1645, 7, 46, 2,
	2, 1645, 1646, 7, 185, 2, 2, 1646, 1649, 7, 181, 2, 2, 1647, 1648, 9, 9,
	2, 2, 1648, 1650, 5, 740, 371, 2, 1649, 1647, 3, 2, 2, 2, 1649, 1650, 3,
	2, 2, 2, 1650, 1654, 3, 2, 2, 2, 1651, 1652, 7, 10, 2, 2, 1652, 1655, 5,
	270, 136, 2, 1653, 1655, 5, 270, 136, 2, 1654, 1651, 3, 2, 2, 2, 1654,
	1653, 3, 2, 2, 2, 1654, 1655, 3, 2, 2, 2, 1655, 1740, 3, 2, 2, 2, 1656,
	1657, 7, 46, 2, 2, 1657, 1658, 7, 41, 2, 2, 1658, 1659, 9, 9, 2, 2, 1659,
	1662, 5, 572, 287, 2, 1660, 1661, 9, 9, 2, 2, 1661, 1663, 5, 740, 371,
	2, 1662, 1660, 3, 2, 2, 2, 1662, 1663, 3, 2, 2, 2, 1663, 1667, 3, 2, 2,
	2, 1664, 1665, 7, 10, 2, 2, 1665, 1668, 5, 270, 136, 2, 1666, 1668, 5,
	270, 136, 2, 1667, 1664, 3, 2, 2, 2, 1667, 1666, 3, 2, 2, 2, 1667, 1668,
	3, 2, 2, 2, 1668, 1740, 3, 2, 2, 2, 1669, 1670, 7, 46, 2, 2, 1670, 1674,
	7, 45, 2, 2, 1671, 1672, 7, 10, 2, 2, 1672, 1675, 5, 268, 135, 2, 1673,
	1675, 5, 268, 135, 2, 1674, 1671, 3, 2, 2, 2, 1674, 1673, 3, 2, 2, 2, 1674,
	1675, 3, 2, 2, 2, 1675, 1740, 3, 2, 2, 2, 1676, 1677, 7, 46, 2, 2, 1677,
	1678, 7, 38, 2, 2, 1678, 1680, 5, 572, 287, 2, 1679, 1681, 5, 726, 364,
	2, 1680, 1679, 3, 2, 2, 2, 1680, 1681, 3, 2, 2, 2, 1681, 1740, 3, 2, 2,
	2, 1682, 1683, 7, 46, 2, 2, 1683, 1688, 7, 67, 2, 2, 1684, 1685, 9, 4,
	2, 2, 1685, 1689, 5, 740, 371, 2, 1686, 1687, 7, 39, 2, 2, 1687, 1689,
	5, 572, 287, 2, 1688, 1684, 3, 2, 2, 2, 1688, 1686, 3, 2, 2, 2, 1689, 1740,
	3, 2, 2, 2, 1690, 1691, 7, 46, 2, 2, 1691, 1692, 7, 39, 2, 2, 1692, 1695,
	7, 146, 2, 2, 1693, 1694, 9, 9, 2, 2, 1694, 1696, 5, 740, 371, 2, 1695,
	1693, 3, 2, 2, 2, 1695, 1696, 3, 2, 2, 2, 1696, 1697, 3, 2, 2, 2, 1697,
	1698, 7, 10, 2, 2, 1698, 1700, 5, 270, 136, 2, 1699, 1701, 5, 726, 364,
	2, 1700, 1699, 3, 2, 2, 2, 1700, 1701, 3, 2, 2, 2, 1701, 1740, 3, 2, 2,
	2, 1702, 1703, 7, 46, 2, 2, 1703, 1704, 7, 159, 2, 2, 1704, 1708, 5, 572,
	287, 2, 1705, 1706, 7, 338, 2, 2, 1706, 1707, 7, 364, 2, 2, 1707, 1709,
	7, 339, 2, 2, 1708, 1705, 3, 2, 2, 2, 1708, 1709, 3, 2, 2, 2, 1709, 1740,
	3, 2, 2, 2, 1710, 1711, 7, 46, 2, 2, 1711, 1723, 7, 193, 2, 2, 1712, 1713,
	9, 4, 2, 2, 1713, 1715, 5, 740, 371, 2, 1714, 1716, 7, 146, 2, 2, 1715,
	1714, 3, 2, 2, 2, 1715, 1716, 3, 2, 2, 2, 1716, 1724, 3, 2, 2, 2, 1717,
	1719, 5, 170, 86, 2, 1718, 1717, 3, 2, 2, 2, 1718, 1719, 3, 2, 2, 2, 1719,
	1721, 3, 2, 2, 2, 1720, 1722, 7, 146, 2, 2, 1721, 1720, 3, 2, 2, 2, 1721,
	1722, 3, 2, 2, 2, 1722, 1724, 3, 2, 2, 2, 1723, 1712, 3, 2, 2, 2, 1723,
	1718, 3, 2, 2, 2, 1724, 1740, 3, 2, 2, 2, 1725, 1726, 7, 46, 2, 2, 1726,
	1740, 7, 259, 2, 2, 1727, 1728, 7, 46, 2, 2, 1728, 1740, 7, 260, 2, 2,
	1729, 1730, 7, 46, 2, 2, 1730, 1731, 7, 264, 2, 2, 1731, 1740, 7, 364,
	2, 2, 1732, 1733, 7, 46, 2, 2, 1733, 1737, 7, 314, 2, 2, 1734, 1735, 7,
	315, 2, 2, 1735, 1738, 5, 740, 371, 2, 1736, 1738, 7, 317, 2, 2, 1737,
	1734, 3, 2, 2, 2, 1737, 1736, 3, 2, 2, 2, 1738, 1740, 3, 2, 2, 2, 1739,
	1616, 3, 2, 2, 2, 1739, 1622, 3, 2, 2, 2, 1739, 1633, 3, 2, 2, 2, 1739,
	1644, 3, 2, 2, 2, 1739, 1656, 3, 2, 2, 2, 1739, 1669, 3, 2, 2, 2, 1739,
	1676, 3, 2, 2, 2, 1739, 1682, 3, 2, 2, 2, 1739, 1690, 3, 2, 2, 2, 1739,
	1702, 3, 2, 2, 2, 1739, 1710, 3, 2, 2, 2, 1739, 1725, 3, 2, 2, 2, 1739,
	1727, 3, 2, 2, 2, 1739, 1729, 3, 2, 2, 2, 1739, 1732, 3, 2, 2, 2, 1740,
	179, 3, 2, 2, 2, 1741, 1742, 7, 192, 2, 2, 1742, 1743, 7, 39, 2, 2, 1743,
	1745, 5, 572, 287, 2, 1744, 1746, 5, 726, 364, 2, 1745, 1744, 3, 2, 2,
	2, 1745, 1746, 3, 2, 2, 2, 1746, 1747, 3, 2, 2, 2, 1747, 1748, 5, 184,
	93, 2, 1748, 181, 3, 2, 2, 2, 1749, 1750, 7, 192, 2, 2, 1750, 1751, 9,
	4, 2, 2, 1751, 1752, 5, 740, 371, 2, 1752, 1753, 5, 184, 93, 2, 1753, 183,
	3, 2, 2, 2, 1754, 1755, 9, 10, 2, 2, 1755, 185, 3, 2, 2, 2, 1756, 1757,
	7, 194, 2, 2, 1757, 1758, 7, 39, 2, 2, 1758, 1760, 5, 572, 287, 2, 1759,
	1761, 5, 726, 364, 2, 1760, 1759, 3, 2, 2, 2, 1760, 1761, 3, 2, 2, 2, 1761,
	187, 3, 2, 2, 2, 1762, 1763, 7, 194, 2, 2, 1763, 1764, 9, 4, 2, 2, 1764,
	1765, 5, 740, 371, 2, 1765, 189, 3, 2, 2, 2, 1766, 1767, 7, 67, 2, 2, 1767,
	1768, 7, 249, 2, 2, 1768, 1769, 5, 740, 371, 2, 1769, 191, 3, 2, 2, 2,
	1770, 1771, 7, 75, 2, 2, 1771, 1772, 7, 249, 2, 2, 1772, 1773, 5, 740,
	371, 2, 1773, 193, 3, 2, 2, 2, 1774, 1775, 7, 188, 2, 2, 1775, 1777, 5,
	222, 112, 2, 1776, 1778, 5, 216, 109, 2, 1777, 1776, 3, 2, 2, 2, 1777,
	1778, 3, 2, 2, 2, 1778, 1779, 3, 2, 2, 2, 1779, 1780, 7, 77, 2, 2, 1780,
	1782, 5, 228, 115, 2, 1781, 1783, 5, 232, 117, 2, 1782, 1781, 3, 2, 2,
	2, 1782, 1783, 3, 2, 2, 2, 1783, 195, 3, 2, 2, 2, 1784, 1786, 7, 189, 2,
	2, 1785, 1787, 5, 234, 118, 2, 1786, 1785, 3, 2, 2, 2, 1786, 1787, 3, 2,
	2, 2, 1787, 1788, 3, 2, 2, 2, 1788, 1790, 5, 222, 112, 2, 1789, 1791, 5,
	216, 109, 2, 1790, 1789, 3, 2, 2, 2, 1790, 1791, 3, 2, 2, 2, 1791, 1792,
	3, 2, 2, 2, 1792, 1793, 7, 23, 2, 2, 1793, 1794, 5, 228, 115, 2, 1794,
	197, 3, 2, 2, 2, 1795, 1797, 7, 188, 2, 2, 1796, 1798, 7, 249, 2, 2, 1797,
	1796, 3, 2, 2, 2, 1797, 1798, 3, 2, 2, 2, 1798, 1799, 3, 2, 2, 2, 1799,
	1804, 5, 740, 371, 2, 1800, 1801, 7, 336, 2, 2, 1801, 1803, 5, 740, 371,
	2, 1802, 1800, 3, 2, 2, 2, 1803, 1806, 3, 2, 2, 2, 1804, 1802, 3, 2, 2,
	2, 1804, 1805, 3, 2, 2, 2, 1805, 1807, 3, 2, 2, 2, 1806, 1804, 3, 2, 2,
	2, 1807, 1808, 7, 77, 2, 2, 1808, 1810, 5, 228, 115, 2, 1809, 1811, 5,
	238, 120, 2, 1810, 1809, 3, 2, 2, 2, 1810, 1811, 3, 2, 2, 2, 1811, 199,
	3, 2, 2, 2, 1812, 1814, 7, 189, 2, 2, 1813, 1815, 5, 236, 119, 2, 1814,
	1813, 3, 2, 2, 2, 1814, 1815, 3, 2, 2, 2, 1815, 1817, 3, 2, 2, 2, 1816,
	1818, 7, 249, 2, 2, 1817, 1816, 3, 2, 2, 2, 1817, 1818, 3, 2, 2, 2, 1818,
	1819, 3, 2, 2, 2, 1819, 1824, 5, 740, 371, 2, 1820, 1821, 7, 336, 2, 2,
	1821, 1823, 5, 740, 371, 2, 1822, 1820, 3, 2, 2, 2, 1823, 1826, 3, 2, 2,
	2, 1824, 1822, 3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 1827, 3, 2, 2,
	2, 1826, 1824, 3, 2, 2, 2, 1827, 1828, 7, 23, 2, 2, 1828, 1829, 5, 228,
	115, 2, 1829, 201, 3, 2, 2, 2, 1830, 1831, 7, 46, 2, 2, 1831, 1832, 7,
	249, 2, 2, 1832, 1833, 7, 188, 2, 2, 1833, 1834, 5, 230, 116, 2, 1834,
	203, 3, 2, 2, 2, 1835, 1836, 7, 46, 2, 2, 1836, 1837, 7, 250, 2, 2, 1837,
	205, 3, 2, 2, 2, 1838, 1839, 7, 46, 2, 2, 1839, 1840, 7, 238, 2, 2, 1840,
	1841, 7, 250, 2, 2, 1841, 207, 3, 2, 2, 2, 1842, 1843, 7, 157, 2, 2, 1843,
	1847, 7, 249, 2, 2, 1844, 1848, 7, 5, 2, 2, 1845, 1848, 7, 6, 2, 2, 1846,
	1848, 5, 740, 371, 2, 1847, 1844, 3, 2, 2, 2, 1847, 1845, 3, 2, 2, 2, 1847,
	1846, 3, 2, 2, 2, 1848, 209, 3, 2, 2, 2, 1849, 1850, 7, 46, 2, 2, 1850,
	1852, 7, 188, 2, 2, 1851, 1853, 5, 230, 116, 2, 1852, 1851, 3, 2, 2, 2,
	1852, 1853, 3, 2, 2, 2, 1853, 1856, 3, 2, 2, 2, 1854, 1855, 7, 36, 2, 2,
	1855, 1857, 5, 214, 108, 2, 1856, 1854, 3, 2, 2, 2, 1856, 1857, 3, 2, 2,
	2, 1857, 211, 3, 2, 2, 2, 1858, 1859, 7, 46, 2, 2, 1859, 1860, 7, 257,
	2, 2, 1860, 1861, 5, 740, 371, 2, 1861, 213, 3, 2, 2, 2, 1862, 1865, 7,
	5, 2, 2, 1863, 1865, 5, 220, 111, 2, 1864, 1862, 3, 2, 2, 2, 1864, 1863,
	3, 2, 2, 2, 1865, 215, 3, 2, 2, 2, 1866, 1867, 7, 36, 2, 2, 1867, 1868,
	5, 218, 110, 2, 1868, 217, 3, 2, 2, 2, 1869, 1870, 9, 4, 2, 2, 1870, 1883,
	5, 740, 371, 2, 1871, 1873, 7, 39, 2, 2, 1872, 1871, 3, 2, 2, 2, 1872,
	1873, 3, 2, 2, 2, 1873, 1874, 3, 2, 2, 2, 1874, 1876, 5, 572, 287, 2, 1875,
	1877, 5, 726, 364, 2, 1876, 1875, 3, 2, 2, 2, 1876, 1877, 3, 2, 2, 2, 1877,
	1883, 3, 2, 2, 2, 1878, 1879, 7, 253, 2, 2, 1879, 1883, 7, 364, 2, 2, 1880,
	1881, 7, 254, 2, 2, 1881, 1883, 5, 740, 371, 2, 1882, 1869, 3, 2, 2, 2,
	1882, 1872, 3, 2, 2, 2, 1882, 1878, 3, 2, 2, 2, 1882, 1880, 3, 2, 2, 2,
	1883, 219, 3, 2, 2, 2, 1884, 1885, 9, 4, 2, 2, 1885, 1904, 5, 740, 371,
	2, 1886, 1888, 7, 39, 2, 2, 1887, 1886, 3, 2, 2, 2, 1887, 1888, 3, 2, 2,
	2, 1888, 1889, 3, 2, 2, 2, 1889, 1894, 5, 572, 287, 2, 1890, 1891, 7, 338,
	2, 2, 1891, 1892, 5, 322, 162, 2, 1892, 1893, 7, 339, 2, 2, 1893, 1895,
	3, 2, 2, 2, 1894, 1890, 3, 2, 2, 2, 1894, 1895, 3, 2, 2, 2, 1895, 1897,
	3, 2, 2, 2, 1896, 1898, 5, 726, 364, 2, 1897, 1896, 3, 2, 2, 2, 1897, 1898,
	3, 2, 2, 2, 1898, 1904, 3, 2, 2, 2, 1899, 1900, 7, 253, 2, 2, 1900, 1904,
	7, 364, 2, 2, 1901, 1902, 7, 254, 2, 2, 1902, 1904, 5, 740, 371, 2, 1903,
	1884, 3, 2, 2, 2, 1903, 1887, 3, 2, 2, 2, 1903, 1899, 3, 2, 2, 2, 1903,
	1901, 3, 2, 2, 2, 1904, 221, 3, 2, 2, 2, 1905, 1910, 5, 224, 113, 2, 1906,
	1907, 7, 336, 2, 2, 1907, 1909, 5, 224, 113, 2, 1908, 1906, 3, 2, 2, 2,
	1909, 1912, 3, 2, 2, 2, 1910, 1908, 3, 2, 2, 2, 1910, 1911, 3, 2, 2, 2,
	1911, 223, 3, 2, 2, 2, 1912, 1910, 3, 2, 2, 2, 1913, 1918, 5, 226, 114,
	2, 1914, 1915, 7, 338, 2, 2, 1915, 1916, 5, 322, 162, 2, 1916, 1917, 7,
	339, 2, 2, 1917, 1919, 3, 2, 2, 2, 1918, 1914, 3, 2, 2, 2, 1918, 1919,
	3, 2, 2, 2, 1919, 225, 3, 2, 2, 2, 1920, 1921, 9, 11, 2, 2, 1921, 227,
	3, 2, 2, 2, 1922, 1927, 5, 230, 116, 2, 1923, 1924, 7, 336, 2, 2, 1924,
	1926, 5, 230, 116, 2, 1925, 1923, 3, 2, 2, 2, 1926, 1929, 3, 2, 2, 2, 1927,
	1925, 3, 2, 2, 2, 1927, 1928, 3, 2, 2, 2, 1928, 229, 3, 2, 2, 2, 1929,
	1927, 3, 2, 2, 2, 1930, 1931, 7, 248, 2, 2, 1931, 1937, 5, 744, 373, 2,
	1932, 1933, 7, 19, 2, 2, 1933, 1937, 5, 744, 373, 2, 1934, 1935, 7, 249,
	2, 2, 1935, 1937, 5, 740, 371, 2, 1936, 1930, 3, 2, 2, 2, 1936, 1932, 3,
	2, 2, 2, 1936, 1934, 3, 2, 2, 2, 1937, 231, 3, 2, 2, 2, 1938, 1939, 7,
	151, 2, 2, 1939, 1940, 7, 188, 2, 2, 1940, 1941, 7, 223, 2, 2, 1941, 233,
	3, 2, 2, 2, 1942, 1943, 7, 188, 2, 2, 1943, 1944, 7, 223, 2, 2, 1944, 1945,
	7, 233, 2, 2, 1945, 235, 3, 2, 2, 2, 1946, 1947, 7, 255, 2, 2, 1947, 1948,
	7, 223, 2, 2, 1948, 1949, 7, 233, 2, 2, 1949, 237, 3, 2, 2, 2, 1950, 1951,
	7, 151, 2, 2, 1951, 1952, 7, 255, 2, 2, 1952, 1953, 7, 223, 2, 2, 1953,
	239, 3, 2, 2, 2, 1954, 1956, 7, 47, 2, 2, 1955, 1957, 7, 48, 2, 2, 1956,
	1955, 3, 2, 2, 2, 1956, 1957, 3, 2, 2, 2, 1957, 1967, 3, 2, 2, 2, 1958,
	1959, 7, 39, 2, 2, 1959, 1962, 5, 572, 287, 2, 1960, 1961, 9, 12, 2, 2,
	1961, 1963, 7, 38, 2, 2, 1962, 1960, 3, 2, 2, 2, 1962, 1963, 3, 2, 2, 2,
	1963, 1968, 3, 2, 2, 2, 1964, 1966, 5, 726, 364, 2, 1965, 1964, 3, 2, 2,
	2, 1965, 1966, 3, 2, 2, 2, 1966, 1968, 3, 2, 2, 2, 1967, 1958, 3, 2, 2,
	2, 1967, 1965, 3, 2, 2, 2, 1968, 241, 3, 2, 2, 2, 1969, 1974, 5, 244, 123,
	2, 1970, 1971, 7, 336, 2, 2, 1971, 1973, 5, 244, 123, 2, 1972, 1970, 3,
	2, 2, 2, 1973, 1976, 3, 2, 2, 2, 1974, 1972, 3, 2, 2, 2, 1974, 1975, 3,
	2, 2, 2, 1975, 243, 3, 2, 2, 2, 1976, 1974, 3, 2, 2, 2, 1977, 1978, 5,
	246, 124, 2, 1978, 1979, 7, 364, 2, 2, 1979, 245, 3, 2, 2, 2, 1980, 1981,
	9, 13, 2, 2, 1981, 247, 3, 2, 2, 2, 1982, 1984, 7, 67, 2, 2, 1983, 1985,
	7, 140, 2, 2, 1984, 1983, 3, 2, 2, 2, 1984, 1985, 3, 2, 2, 2, 1985, 1986,
	3, 2, 2, 2, 1986, 1987, 7, 141, 2, 2, 1987, 1988, 5, 742, 372, 2, 1988,
	1989, 7, 24, 2, 2, 1989, 1992, 7, 364, 2, 2, 1990, 1991, 7, 52, 2, 2, 1991,
	1993, 5, 242, 122, 2, 1992, 1990, 3, 2, 2, 2, 1992, 1993, 3, 2, 2, 2, 1993,
	249, 3, 2, 2, 2, 1994, 1996, 7, 75, 2, 2, 1995, 1997, 7, 140, 2, 2, 1996,
	1995, 3, 2, 2, 2, 1996, 1997, 3, 2, 2, 2, 1997, 1998, 3, 2, 2, 2, 1998,
	2000, 7, 141, 2, 2, 1999, 2001, 5, 34, 18, 2, 2000, 1999, 3, 2, 2, 2, 2000,
	2001, 3, 2, 2, 2, 2001, 2002, 3, 2, 2, 2, 2002, 2003, 5, 742, 372, 2, 2003,
	251, 3, 2, 2, 2, 2004, 2005, 7, 266, 2, 2, 2005, 2006, 7, 141, 2, 2, 2006,
	253, 3, 2, 2, 2, 2007, 2008, 7, 67, 2, 2, 2008, 2009, 7, 140, 2, 2, 2009,
	2010, 7, 142, 2, 2, 2010, 2011, 7, 370, 2, 2, 2011, 2013, 7, 338, 2, 2,
	2012, 2014, 5, 316, 159, 2, 2013, 2012, 3, 2, 2, 2, 2013, 2014, 3, 2, 2,
	2, 2014, 2015, 3, 2, 2, 2, 2015, 2016, 7, 339, 2, 2, 2016, 2017, 5, 708,
	355, 2, 2017, 255, 3, 2, 2, 2, 2018, 2019, 7, 75, 2, 2, 2019, 2020, 7,
	140, 2, 2, 2020, 2022, 7, 142, 2, 2, 2021, 2023, 5, 34, 18, 2, 2022, 2021,
	3, 2, 2, 2, 2022, 2023, 3, 2, 2, 2, 2023, 2024, 3, 2, 2, 2, 2024, 2025,
	7, 370, 2, 2, 2025, 257, 3, 2, 2, 2, 2026, 2028, 7, 67, 2, 2, 2027, 2029,
	5, 46, 24, 2, 2028, 2027, 3, 2, 2, 2, 2028, 2029, 3, 2, 2, 2, 2029, 2030,
	3, 2, 2, 2, 2030, 2032, 7, 180, 2, 2, 2031, 2033, 5, 38, 20, 2, 2032, 2031,
	3, 2, 2, 2, 2032, 2033, 3, 2, 2, 2, 2033, 2034, 3, 2, 2, 2, 2034, 2039,
	5, 572, 287, 2, 2035, 2036, 7, 338, 2, 2, 2036, 2037, 5, 374, 188, 2, 2037,
	2038, 7, 339, 2, 2, 2038, 2040, 3, 2, 2, 2, 2039, 2035, 3, 2, 2, 2, 2039,
	2040, 3, 2, 2, 2, 2040, 2042, 3, 2, 2, 2, 2041, 2043, 5, 272, 137, 2, 2042,
	2041, 3, 2, 2, 2, 2042, 2043, 3, 2, 2, 2, 2043, 2045, 3, 2, 2, 2, 2044,
	2046, 5, 262, 132, 2, 2045, 2044, 3, 2, 2, 2, 2045, 2046, 3, 2, 2, 2, 2046,
	2048, 3, 2, 2, 2, 2047, 2049, 5, 292, 147, 2, 2048, 2047, 3, 2, 2, 2, 2048,
	2049, 3, 2, 2, 2, 2049, 2050, 3, 2, 2, 2, 2050, 2051, 7, 24, 2, 2, 2051,
	2052, 5, 450, 226, 2, 2052, 259, 3, 2, 2, 2, 2053, 2054, 7, 67, 2, 2, 2054,
	2055, 7, 185, 2, 2, 2055, 2057, 7, 180, 2, 2, 2056, 2058, 5, 38, 20, 2,
	2057, 2056, 3, 2, 2, 2, 2057, 2058, 3, 2, 2, 2, 2058, 2059, 3, 2, 2, 2,
	2059, 2061, 5, 572, 287, 2, 2060, 2062, 5, 42, 22, 2, 2061, 2060, 3, 2,
	2, 2, 2061, 2062, 3, 2, 2, 2, 2062, 2064, 3, 2, 2, 2, 2063, 2065, 5, 272,
	137, 2, 2064, 2063, 3, 2, 2, 2, 2064, 2065, 3, 2, 2, 2, 2065, 2067, 3,
	2, 2, 2, 2066, 2068, 5, 290, 146, 2, 2067, 2066, 3, 2, 2, 2, 2067, 2068,
	3, 2, 2, 2, 2068, 2070, 3, 2, 2, 2, 2069, 2071, 5, 312, 157, 2, 2070, 2069,
	3, 2, 2, 2, 2070, 2071, 3, 2, 2, 2, 2071, 2073, 3, 2, 2, 2, 2072, 2074,
	5, 314, 158, 2, 2073, 2072, 3, 2, 2, 2, 2073, 2074, 3, 2, 2, 2, 2074, 2076,
	3, 2, 2, 2, 2075, 2077, 5, 292, 147, 2, 2076, 2075, 3, 2, 2, 2, 2076, 2077,
	3, 2, 2, 2, 2077, 2078, 3, 2, 2, 2, 2078, 2079, 7, 24, 2, 2, 2079, 2080,
	5, 450, 226, 2, 2080, 261, 3, 2, 2, 2, 2081, 2082, 7, 103, 2, 2, 2082,
	2083, 7, 36, 2, 2, 2083, 2084, 7, 338, 2, 2, 2084, 2085, 5, 322, 162, 2,
	2085, 2086, 7, 339, 2, 2, 2086, 263, 3, 2, 2, 2, 2087, 2088, 7, 75, 2,
	2, 2088, 2090, 7, 180, 2, 2, 2089, 2091, 5, 34, 18, 2, 2090, 2089, 3, 2,
	2, 2, 2090, 2091, 3, 2, 2, 2, 2091, 2092, 3, 2, 2, 2, 2092, 2093, 5, 574,
	288, 2, 2093, 265, 3, 2, 2, 2, 2094, 2095, 7, 75, 2, 2, 2095, 2096, 7,
	185, 2, 2, 2096, 2098, 7, 180, 2, 2, 2097, 2099, 5, 34, 18, 2, 2098, 2097,
	3, 2, 2, 2, 2098, 2099, 3, 2, 2, 2, 2099, 2100, 3, 2, 2, 2, 2100, 2101,
	5, 574, 288, 2, 2101, 267, 3, 2, 2, 2, 2102, 2105, 5, 742, 372, 2, 2103,
	2105, 7, 364, 2, 2, 2104, 2102, 3, 2, 2, 2, 2104, 2103, 3, 2, 2, 2, 2105,
	269, 3, 2, 2, 2, 2106, 2109, 5, 740, 371, 2, 2107, 2109, 7, 364, 2, 2,
	2108, 2106, 3, 2, 2, 2, 2108, 2107, 3, 2, 2, 2, 2109, 271, 3, 2, 2, 2,
	2110, 2111, 7, 78, 2, 2, 2111, 2112, 7, 364, 2, 2, 2112, 273, 3, 2, 2,
	2, 2113, 2114, 7, 103, 2, 2, 2114, 2115, 7, 20, 2, 2, 2115, 2116, 7, 338,
	2, 2, 2116, 2121, 5, 386, 194, 2, 2117, 2118, 7, 336, 2, 2, 2118, 2120,
	5, 386, 194, 2, 2119, 2117, 3, 2, 2, 2, 2120, 2123, 3, 2, 2, 2, 2121, 2119,
	3, 2, 2, 2, 2121, 2122, 3, 2, 2, 2, 2122, 2124, 3, 2, 2, 2, 2123, 2121,
	3, 2, 2, 2, 2124, 2125, 7, 339, 2, 2, 2125, 275, 3, 2, 2, 2, 2126, 2127,
	7, 104, 2, 2, 2127, 2128, 7, 20, 2, 2, 2128, 2129, 7, 338, 2, 2, 2129,
	2130, 5, 322, 162, 2, 2130, 2137, 7, 339, 2, 2, 2131, 2132, 7, 105, 2,
	2, 2132, 2133, 7, 20, 2, 2, 2133, 2134, 7, 338, 2, 2, 2134, 2135, 5, 328,
	165, 2, 2135, 2136, 7, 339, 2, 2, 2136, 2138, 3, 2, 2, 2, 2137, 2131, 3,
	2, 2, 2, 2137, 2138, 3, 2, 2, 2, 2138, 2139, 3, 2, 2, 2, 2139, 2140, 7,
	106, 2, 2, 2140, 2141, 7, 369, 2, 2, 2141, 2142, 7, 107, 2, 2, 2142, 277,
	3, 2, 2, 2, 2143, 2144, 7, 229, 2, 2, 2144, 2145, 7, 20, 2, 2, 2145, 2146,
	7, 338, 2, 2, 2146, 2147, 5, 322, 162, 2, 2147, 2148, 7, 339, 2, 2, 2148,
	2149, 7, 36, 2, 2, 2149, 2150, 7, 338, 2, 2, 2150, 2151, 5, 356, 179, 2,
	2151, 2153, 7, 339, 2, 2, 2152, 2154, 5, 44, 23, 2, 2153, 2152, 3, 2, 2,
	2, 2153, 2154, 3, 2, 2, 2, 2154, 279, 3, 2, 2, 2, 2155, 2158, 5, 286, 144,
	2, 2156, 2158, 5, 288, 145, 2, 2157, 2155, 3, 2, 2, 2, 2157, 2156, 3, 2,
	2, 2, 2158, 281, 3, 2, 2, 2, 2159, 2160, 7, 213, 2, 2, 2160, 2161, 7, 364,
	2, 2, 2161, 283, 3, 2, 2, 2, 2162, 2163, 7, 214, 2, 2, 2163, 2164, 7, 364,
	2, 2, 2164, 285, 3, 2, 2, 2, 2165, 2166, 7, 108, 2, 2, 2166, 2167, 7, 110,
	2, 2, 2167, 2168, 7, 150, 2, 2, 2168, 2172, 7, 364, 2, 2, 2169, 2170, 7,
	151, 2, 2, 2170, 2171, 7, 153, 2, 2, 2171, 2173, 5, 294, 148, 2, 2172,
	2169, 3, 2, 2, 2, 2172, 2173, 3, 2, 2, 2, 2173, 287, 3, 2, 2, 2, 2174,
	2175, 7, 108, 2, 2, 2175, 2176, 7, 110, 2, 2, 2176, 2178, 7, 111, 2, 2,
	2177, 2179, 5, 302, 152, 2, 2178, 2177, 3, 2, 2, 2, 2178, 2179, 3, 2, 2,
	2, 2179, 2181, 3, 2, 2, 2, 2180, 2182, 5, 304, 153, 2, 2181, 2180, 3, 2,
	2, 2, 2181, 2182, 3, 2, 2, 2, 2182, 2184, 3, 2, 2, 2, 2183, 2185, 5, 306,
	154, 2, 2184, 2183, 3, 2, 2, 2, 2184, 2185, 3, 2, 2, 2, 2185, 2187, 3,
	2, 2, 2, 2186, 2188, 5, 308, 155, 2, 2187, 2186, 3, 2, 2, 2, 2187, 2188,
	3, 2, 2, 2, 2188, 2190, 3, 2, 2, 2, 2189, 2191, 5, 310, 156, 2, 2190, 2189,
	3, 2, 2, 2, 2190, 2191, 3, 2, 2, 2, 2191, 289, 3, 2, 2, 2, 2192, 2195,
	5, 288, 145, 2, 2193, 2195, 5, 286, 144, 2, 2194, 2192, 3, 2, 2, 2, 2194,
	2193, 3, 2, 2, 2, 2195, 291, 3, 2, 2, 2, 2196, 2197, 7, 159, 2, 2, 2197,
	2198, 5, 294, 148, 2, 2198, 293, 3, 2, 2, 2, 2199, 2200, 7, 338, 2, 2,
	2200, 2201, 5, 296, 149, 2, 2201, 2202, 7, 339, 2, 2, 2202, 295, 3, 2,
	2, 2, 2203, 2208, 5, 298, 150, 2, 2204, 2205, 7, 336, 2, 2, 2205, 2207,
	5, 298, 150, 2, 2206, 2204, 3, 2, 2, 2, 2207, 2210, 3, 2, 2, 2, 2208, 2206,
	3, 2, 2, 2, 2208, 2209, 3, 2, 2, 2, 2209, 2220, 3, 2, 2, 2, 2210, 2208,
	3, 2, 2, 2, 2211, 2216, 5, 300, 151, 2, 2212, 2213, 7, 336, 2, 2, 2213,
	2215, 5, 300, 151, 2, 2214, 2212, 3, 2, 2, 2, 2215, 2218, 3, 2, 2, 2, 2216,
	2214, 3, 2, 2, 2, 2216, 2217, 3, 2, 2, 2, 2217, 2220, 3, 2, 2, 2, 2218,
	2216, 3, 2, 2, 2, 2219, 2203, 3, 2, 2, 2, 2219, 2211, 3, 2, 2, 2, 2220,
	297, 3, 2, 2, 2, 2221, 2222, 7, 364, 2, 2, 2222, 2223, 7, 344, 2, 2, 2223,
	2224, 7, 364, 2, 2, 2224, 299, 3, 2, 2, 2, 2225, 2226, 7, 364, 2, 2, 2226,
	301, 3, 2, 2, 2, 2227, 2228, 7, 112, 2, 2, 2228, 2229, 7, 113, 2, 2, 2229,
	2230, 7, 20, 2, 2, 2230, 2234, 7, 364, 2, 2, 2231, 2232, 7, 114, 2, 2,
	2232, 2233, 7, 20, 2, 2, 2233, 2235, 7, 364, 2, 2, 2234, 2231, 3, 2, 2,
	2, 2234, 2235, 3, 2, 2, 2, 2235, 303, 3, 2, 2, 2, 2236, 2237, 7, 115, 2,
	2, 2237, 2238, 7, 116, 2, 2, 2238, 2239, 7, 113, 2, 2, 2239, 2240, 7, 20,
	2, 2, 2240, 2241, 7, 364, 2, 2, 2241, 305, 3, 2, 2, 2, 2242, 2243, 7, 100,
	2, 2, 2243, 2244, 7, 117, 2, 2, 2244, 2245, 7, 113, 2, 2, 2245, 2246, 7,
	20, 2, 2, 2246, 2247, 7, 364, 2, 2, 2247, 307, 3, 2, 2, 2, 2248, 2249,
	7, 120, 2, 2, 2249, 2250, 7, 113, 2, 2, 2250, 2251, 7, 20, 2, 2, 2251,
	2252, 7, 364, 2, 2, 2252, 309, 3, 2, 2, 2, 2253, 2254, 7, 66, 2, 2, 2254,
	2255, 7, 163, 2, 2, 2255, 2256, 7, 24, 2, 2, 2256, 2257, 7, 364, 2, 2,
	2257, 311, 3, 2, 2, 2, 2258, 2259, 7, 121, 2, 2, 2259, 2260, 7, 24, 2,
	2, 2260, 2261, 7, 123, 2, 2, 2261, 2262, 7, 364, 2, 2, 2262, 2263, 7, 124,
	2, 2, 2263, 2268, 7, 364, 2, 2, 2264, 2265, 7, 125, 2, 2, 2265, 2266, 7,
	364, 2, 2, 2266, 2267, 7, 126, 2, 2, 2267, 2269, 7, 364, 2, 2, 2268, 2264,
	3, 2, 2, 2, 2268, 2269, 3, 2, 2, 2, 2269, 2282, 3, 2, 2, 2, 2270, 2271,
	7, 121, 2, 2, 2271, 2272, 7, 20, 2, 2, 2272, 2276, 7, 364, 2, 2, 2273,
	2274, 7, 151, 2, 2, 2274, 2275, 7, 153, 2, 2, 2275, 2277, 5, 294, 148,
	2, 2276, 2273, 3, 2, 2, 2, 2276, 2277, 3, 2, 2, 2, 2277, 2282, 3, 2, 2,
	2, 2278, 2279, 7, 121, 2, 2, 2279, 2280, 7, 24, 2, 2, 2280, 2282, 5, 740,
	371, 2, 2281, 2258, 3, 2, 2, 2, 2281, 2270, 3, 2, 2, 2, 2281, 2278, 3,
	2, 2, 2, 2282, 313, 3, 2, 2, 2, 2283, 2284, 7, 129, 2, 2, 2284, 2285, 7,
	364, 2, 2, 2285, 315, 3, 2, 2, 2, 2286, 2291, 5, 380, 191, 2, 2287, 2288,
	7, 336, 2, 2, 2288, 2290, 5, 380, 191, 2, 2289, 2287, 3, 2, 2, 2, 2290,
	2293, 3, 2, 2, 2, 2291, 2289, 3, 2, 2, 2, 2291, 2292, 3, 2, 2, 2, 2292,
	317, 3, 2, 2, 2, 2293, 2291, 3, 2, 2, 2, 2294, 2299, 5, 382, 192, 2, 2295,
	2296, 7, 336, 2, 2, 2296, 2298, 5, 382, 192, 2, 2297, 2295, 3, 2, 2, 2,
	2298, 2301, 3, 2, 2, 2, 2299, 2297, 3, 2, 2, 2, 2299, 2300, 3, 2, 2, 2,
	2300, 319, 3, 2, 2, 2, 2301, 2299, 3, 2, 2, 2, 2302, 2307, 5, 410, 206,
	2, 2303, 2304, 7, 336, 2, 2, 2304, 2306, 5, 410, 206, 2, 2305, 2303, 3,
	2, 2, 2, 2306, 2309, 3, 2, 2, 2, 2307, 2305, 3, 2, 2, 2, 2307, 2308, 3,
	2, 2, 2, 2308, 321, 3, 2, 2, 2, 2309, 2307, 3, 2, 2, 2, 2310, 2315, 5,
	324, 163, 2, 2311, 2312, 7, 336, 2, 2, 2312, 2314, 5, 324, 163, 2, 2313,
	2311, 3, 2, 2, 2, 2314, 2317, 3, 2, 2, 2, 2315, 2313, 3, 2, 2, 2, 2315,
	2316, 3, 2, 2, 2, 2316, 323, 3, 2, 2, 2, 2317, 2315, 3, 2, 2, 2, 2318,
	2319, 5, 740, 371, 2, 2319, 325, 3, 2, 2, 2, 2320, 2330, 5, 740, 371, 2,
	2321, 2326, 7, 334, 2, 2, 2322, 2327, 7, 162, 2, 2, 2323, 2327, 7, 118,
	2, 2, 2324, 2327, 7, 161, 2, 2, 2325, 2327, 5, 740, 371, 2, 2326, 2322,
	3, 2, 2, 2, 2326, 2323, 3, 2, 2, 2, 2326, 2324, 3, 2, 2, 2, 2326, 2325,
	3, 2, 2, 2, 2327, 2329, 3, 2, 2, 2, 2328, 2321, 3, 2, 2, 2, 2329, 2332,
	3, 2, 2, 2, 2330, 2328, 3, 2, 2, 2, 2330, 2331, 3, 2, 2, 2, 2331, 327,
	3, 2, 2, 2, 2332, 2330, 3, 2, 2, 2, 2333, 2338, 5, 372, 187, 2, 2334, 2335,
	7, 336, 2, 2, 2335, 2337, 5, 372, 187, 2, 2336, 2334, 3, 2, 2, 2, 2337,
	2340, 3, 2, 2, 2, 2338, 2336, 3, 2, 2, 2, 2338, 2339, 3, 2, 2, 2, 2339,
	329, 3, 2, 2, 2, 2340, 2338, 3, 2, 2, 2, 2341, 2342, 7, 338, 2, 2, 2342,
	2343, 5, 322, 162, 2, 2343, 2344, 7, 339, 2, 2, 2344, 331, 3, 2, 2, 2,
	2345, 2347, 5, 334, 168, 2, 2346, 2348, 5, 336, 169, 2, 2347, 2346, 3,
	2, 2, 2, 2347, 2348, 3, 2, 2, 2, 2348, 2351, 3, 2, 2, 2, 2349, 2351, 5,
	338, 170, 2, 2350, 2345, 3, 2, 2, 2, 2350, 2349, 3, 2, 2, 2, 2351, 333,
	3, 2, 2, 2, 2352, 2353, 9, 14, 2, 2, 2353, 335, 3, 2, 2, 2, 2354, 2355,
	9, 15, 2, 2, 2355, 337, 3, 2, 2, 2, 2356, 2360, 7, 293, 2, 2, 2357, 2358,
	7, 9, 2, 2, 2358, 2360, 7, 293, 2, 2, 2359, 2356, 3, 2, 2, 2, 2359, 2357,
	3, 2, 2, 2, 2360, 339, 3, 2, 2, 2, 2361, 2366, 7, 296, 2, 2, 2362, 2364,
	7, 297, 2, 2, 2363, 2362, 3, 2, 2, 2, 2363, 2364, 3, 2, 2, 2, 2364, 2366,
	3, 2, 2, 2, 2365, 2361, 3, 2, 2, 2, 2365, 2363, 3, 2, 2, 2, 2366, 341,
	3, 2, 2, 2, 2367, 2368, 7, 292, 2, 2, 2368, 2370, 5, 740, 371, 2, 2369,
	2367, 3, 2, 2, 2, 2369, 2370, 3, 2, 2, 2, 2370, 2371, 3, 2, 2, 2, 2371,
	2373, 5, 346, 174, 2, 2372, 2374, 5, 406, 204, 2, 2373, 2372, 3, 2, 2,
	2, 2373, 2374, 3, 2, 2, 2, 2374, 343, 3, 2, 2, 2, 2375, 2376, 7, 292, 2,
	2, 2376, 2377, 5, 740, 371, 2, 2377, 2379, 5, 346, 174, 2, 2378, 2380,
	5, 408, 205, 2, 2379, 2378, 3, 2, 2, 2, 2379, 2380, 3, 2, 2, 2, 2380, 345,
	3, 2, 2, 2, 2381, 2384, 5, 348, 175, 2, 2382, 2384, 5, 350, 176, 2, 2383,
	2381, 3, 2, 2, 2, 2383, 2382, 3, 2, 2, 2, 2384, 347, 3, 2, 2, 2, 2385,
	2386, 5, 404, 203, 2, 2386, 2387, 5, 330, 166, 2, 2387, 349, 3, 2, 2, 2,
	2388, 2389, 7, 320, 2, 2, 2389, 2390, 5, 708, 355, 2, 2390, 351, 3, 2,
	2, 2, 2391, 2392, 7, 292, 2, 2, 2392, 2394, 5, 740, 371, 2, 2393, 2391,
	3, 2, 2, 2, 2393, 2394, 3, 2, 2, 2, 2394, 2395, 3, 2, 2, 2, 2395, 2396,
	7, 290, 2, 2, 2396, 2397, 7, 299, 2, 2, 2397, 2398, 5, 330, 166, 2, 2398,
	2399, 7, 291, 2, 2, 2399, 2400, 5, 572, 287, 2, 2400, 2402, 5, 330, 166,
	2, 2401, 2403, 5, 406, 204, 2, 2402, 2401, 3, 2, 2, 2, 2402, 2403, 3, 2,
	2, 2, 2403, 353, 3, 2, 2, 2, 2404, 2405, 7, 292, 2, 2, 2405, 2406, 5, 740,
	371, 2, 2406, 2407, 7, 290, 2, 2, 2407, 2408, 7, 299, 2, 2, 2408, 2409,
	5, 330, 166, 2, 2409, 2410, 7, 291, 2, 2, 2410, 2411, 5, 572, 287, 2, 2411,
	2413, 5, 330, 166, 2, 2412, 2414, 5, 408, 205, 2, 2413, 2412, 3, 2, 2,
	2, 2413, 2414, 3, 2, 2, 2, 2414, 355, 3, 2, 2, 2, 2415, 2418, 5, 362, 182,
	2, 2416, 2418, 5, 358, 180, 2, 2417, 2415, 3, 2, 2, 2, 2417, 2416, 3, 2,
	2, 2, 2418, 357, 3, 2, 2, 2, 2419, 2424, 5, 360, 181, 2, 2420, 2421, 7,
	336, 2, 2, 2421, 2423, 5, 360, 181, 2, 2422, 2420, 3, 2, 2, 2, 2423, 2426,
	3, 2, 2, 2, 2424, 2422, 3, 2, 2, 2, 2424, 2425, 3, 2, 2, 2, 2425, 359,
	3, 2, 2, 2, 2426, 2424, 3, 2, 2, 2, 2427, 2428, 7, 338, 2, 2, 2428, 2429,
	5, 362, 182, 2, 2429, 2430, 7, 339, 2, 2, 2430, 361, 3, 2, 2, 2, 2431,
	2436, 5, 364, 183, 2, 2432, 2433, 7, 336, 2, 2, 2433, 2435, 5, 364, 183,
	2, 2434, 2432, 3, 2, 2, 2, 2435, 2438, 3, 2, 2, 2, 2436, 2434, 3, 2, 2,
	2, 2436, 2437, 3, 2, 2, 2, 2437, 363, 3, 2, 2, 2, 2438, 2436, 3, 2, 2,
	2, 2439, 2440, 5, 656, 329, 2, 2440, 365, 3, 2, 2, 2, 2441, 2444, 5, 364,
	183, 2, 2442, 2444, 5, 360, 181, 2, 2443, 2441, 3, 2, 2, 2, 2443, 2442,
	3, 2, 2, 2, 2444, 367, 3, 2, 2, 2, 2445, 2446, 9, 16, 2, 2, 2446, 369,
	3, 2, 2, 2, 2447, 2448, 7, 16, 2, 2, 2448, 2452, 7, 72, 2, 2, 2449, 2450,
	7, 16, 2, 2, 2450, 2452, 7, 17, 2, 2, 2451, 2447, 3, 2, 2, 2, 2451, 2449,
	3, 2, 2, 2, 2452, 371, 3, 2, 2, 2, 2453, 2455, 5, 740, 371, 2, 2454, 2456,
	5, 368, 185, 2, 2455, 2454, 3, 2, 2, 2, 2455, 2456, 3, 2, 2, 2, 2456, 2458,
	3, 2, 2, 2, 2457, 2459, 5, 370, 186, 2, 2458, 2457, 3, 2, 2, 2, 2458, 2459,
	3, 2, 2, 2, 2459, 373, 3, 2, 2, 2, 2460, 2465, 5, 376, 189, 2, 2461, 2462,
	7, 336, 2, 2, 2462, 2464, 5, 376, 189, 2, 2463, 2461, 3, 2, 2, 2, 2464,
	2467, 3, 2, 2, 2, 2465, 2463, 3, 2, 2, 2, 2465, 2466, 3, 2, 2, 2, 2466,
	375, 3, 2, 2, 2, 2467, 2465, 3, 2, 2, 2, 2468, 2471, 5, 740, 371, 2, 2469,
	2470, 7, 78, 2, 2, 2470, 2472, 7, 364, 2, 2, 2471, 2469, 3, 2, 2, 2, 2471,
	2472, 3, 2, 2, 2, 2472, 377, 3, 2, 2, 2, 2473, 2475, 5, 708, 355, 2, 2474,
	2476, 5, 368, 185, 2, 2475, 2474, 3, 2, 2, 2, 2475, 2476, 3, 2, 2, 2, 2476,
	2478, 3, 2, 2, 2, 2477, 2479, 5, 370, 186, 2, 2478, 2477, 3, 2, 2, 2, 2478,
	2479, 3, 2, 2, 2, 2479, 379, 3, 2, 2, 2, 2480, 2481, 5, 740, 371, 2, 2481,
	2484, 5, 412, 207, 2, 2482, 2483, 7, 78, 2, 2, 2483, 2485, 7, 364, 2, 2,
	2484, 2482, 3, 2, 2, 2, 2484, 2485, 3, 2, 2, 2, 2485, 381, 3, 2, 2, 2,
	2486, 2489, 5, 384, 193, 2, 2487, 2489, 5, 386, 194, 2, 2488, 2486, 3,
	2, 2, 2, 2488, 2487, 3, 2, 2, 2, 2489, 383, 3, 2, 2, 2, 2490, 2493, 5,
	352, 177, 2, 2491, 2493, 5, 342, 172, 2, 2492, 2490, 3, 2, 2, 2, 2492,
	2491, 3, 2, 2, 2, 2493, 385, 3, 2, 2, 2, 2494, 2495, 5, 740, 371, 2, 2495,
	2497, 5, 412, 207, 2, 2496, 2498, 5, 388, 195, 2, 2497, 2496, 3, 2, 2,
	2, 2497, 2498, 3, 2, 2, 2, 2498, 2501, 3, 2, 2, 2, 2499, 2500, 7, 78, 2,
	2, 2500, 2502, 7, 364, 2, 2, 2501, 2499, 3, 2, 2, 2, 2501, 2502, 3, 2,
	2, 2, 2502, 387, 3, 2, 2, 2, 2503, 2506, 5, 390, 196, 2, 2504, 2506, 5,
	392, 197, 2, 2505, 2503, 3, 2, 2, 2, 2505, 2504, 3, 2, 2, 2, 2506, 389,
	3, 2, 2, 2, 2507, 2508, 7, 292, 2, 2, 2508, 2510, 5, 740, 371, 2, 2509,
	2507, 3, 2, 2, 2, 2509, 2510, 3, 2, 2, 2, 2510, 2511, 3, 2, 2, 2, 2511,
	2512, 7, 291, 2, 2, 2512, 2513, 5, 572, 287, 2, 2513, 2514, 7, 338, 2,
	2, 2514, 2515, 5, 324, 163, 2, 2515, 2517, 7, 339, 2, 2, 2516, 2518, 5,
	406, 204, 2, 2517, 2516, 3, 2, 2, 2, 2517, 2518, 3, 2, 2, 2, 2518, 391,
	3, 2, 2, 2, 2519, 2520, 7, 292, 2, 2, 2520, 2522, 5, 740, 371, 2, 2521,
	2519, 3, 2, 2, 2, 2521, 2522, 3, 2, 2, 2, 2522, 2523, 3, 2, 2, 2, 2523,
	2525, 5, 400, 201, 2, 2524, 2526, 5, 406, 204, 2, 2525, 2524, 3, 2, 2,
	2, 2525, 2526, 3, 2, 2, 2, 2526, 393, 3, 2, 2, 2, 2527, 2530, 5, 396, 199,
	2, 2528, 2530, 5, 398, 200, 2, 2529, 2527, 3, 2, 2, 2, 2529, 2528, 3, 2,
	2, 2, 2530, 395, 3, 2, 2, 2, 2531, 2532, 7, 292, 2, 2, 2532, 2534, 5, 740,
	371, 2, 2533, 2531, 3, 2, 2, 2, 2533, 2534, 3, 2, 2, 2, 2534, 2535, 3,
	2, 2, 2, 2535, 2536, 7, 291, 2, 2, 2536, 2537, 5, 572, 287, 2, 2537, 2538,
	7, 338, 2, 2, 2538, 2539, 5, 324, 163, 2, 2539, 2541, 7, 339, 2, 2, 2540,
	2542, 5, 408, 205, 2, 2541, 2540, 3, 2, 2, 2, 2541, 2542, 3, 2, 2, 2, 2542,
	397, 3, 2, 2, 2, 2543, 2544, 7, 292, 2, 2, 2544, 2546, 5, 740, 371, 2,
	2545, 2543, 3, 2, 2, 2, 2545, 2546, 3, 2, 2, 2, 2546, 2547, 3, 2, 2, 2,
	2547, 2549, 5, 400, 201, 2, 2548, 2550, 5, 408, 205, 2, 2549, 2548, 3,
	2, 2, 2, 2549, 2550, 3, 2, 2, 2, 2550, 399, 3, 2, 2, 2, 2551, 2552, 7,
	9, 2, 2, 2552, 2558, 7, 66, 2, 2, 2553, 2554, 7, 319, 2, 2, 2554, 2558,
	5, 402, 202, 2, 2555, 2558, 5, 350, 176, 2, 2556, 2558, 5, 404, 203, 2,
	2557, 2551, 3, 2, 2, 2, 2557, 2553, 3, 2, 2, 2, 2557, 2555, 3, 2, 2, 2,
	2557, 2556, 3, 2, 2, 2, 2558, 401, 3, 2, 2, 2, 2559, 2563, 5, 656, 329,
	2, 2560, 2563, 5, 638, 320, 2, 2561, 2563, 5, 642, 322, 2, 2562, 2559,
	3, 2, 2, 2, 2562, 2560, 3, 2, 2, 2, 2562, 2561, 3, 2, 2, 2, 2563, 403,
	3, 2, 2, 2, 2564, 2565, 7, 289, 2, 2, 2565, 2568, 7, 299, 2, 2, 2566, 2568,
	7, 298, 2, 2, 2567, 2564, 3, 2, 2, 2, 2567, 2566, 3, 2, 2, 2, 2568, 405,
	3, 2, 2, 2, 2569, 2570, 5, 332, 167, 2, 2570, 2571, 5, 340, 171, 2, 2571,
	407, 3, 2, 2, 2, 2572, 2573, 5, 332, 167, 2, 2573, 2574, 5, 340, 171, 2,
	2574, 409, 3, 2, 2, 2, 2575, 2576, 5, 740, 371, 2, 2576, 2577, 7, 335,
	2, 2, 2577, 2580, 5, 412, 207, 2, 2578, 2579, 7, 78, 2, 2, 2579, 2581,
	7, 364, 2, 2, 2580, 2578, 3, 2, 2, 2, 2580, 2581, 3, 2, 2, 2, 2581, 411,
	3, 2, 2, 2, 2582, 2583, 5, 416, 209, 2, 2583, 413, 3, 2, 2, 2, 2584, 2589,
	5, 412, 207, 2, 2585, 2586, 7, 336, 2, 2, 2586, 2588, 5, 412, 207, 2, 2587,
	2585, 3, 2, 2, 2, 2588, 2591, 3, 2, 2, 2, 2589, 2587, 3, 2, 2, 2, 2589,
	2590, 3, 2, 2, 2, 2590, 415, 3, 2, 2, 2, 2591, 2589, 3, 2, 2, 2, 2592,
	2598, 5, 418, 210, 2, 2593, 2598, 5, 420, 211, 2, 2594, 2598, 5, 422, 212,
	2, 2595, 2598, 5, 424, 213, 2, 2596, 2598, 5, 426, 214, 2, 2597, 2592,
	3, 2, 2, 2, 2597, 2593, 3, 2, 2, 2, 2597, 2594, 3, 2, 2, 2, 2597, 2595,
	3, 2, 2, 2, 2597, 2596, 3, 2, 2, 2, 2598, 417, 3, 2, 2, 2, 2599, 2639,
	7, 80, 2, 2, 2600, 2639, 7, 81, 2, 2, 2601, 2639, 7, 82, 2, 2, 2602, 2639,
	7, 83, 2, 2, 2603, 2639, 7, 79, 2, 2, 2604, 2639, 7, 84, 2, 2, 2605, 2607,
	7, 85, 2, 2, 2606, 2608, 7, 86, 2, 2, 2607, 2606, 3, 2, 2, 2, 2607, 2608,
	3, 2, 2, 2, 2608, 2639, 3, 2, 2, 2, 2609, 2639, 7, 87, 2, 2, 2610, 2639,
	7, 88, 2, 2, 2611, 2639, 7, 89, 2, 2, 2612, 2639, 7, 90, 2, 2, 2613, 2614,
	7, 89, 2, 2, 2614, 2615, 7, 151, 2, 2, 2615, 2616, 7, 50, 2, 2, 2616, 2617,
	7, 91, 2, 2, 2617, 2639, 7, 92, 2, 2, 2618, 2639, 7, 95, 2, 2, 2619, 2639,
	7, 208, 2, 2, 2620, 2628, 7, 94, 2, 2, 2621, 2622, 7, 338, 2, 2, 2622,
	2625, 7, 369, 2, 2, 2623, 2624, 7, 336, 2, 2, 2624, 2626, 7, 369, 2, 2,
	2625, 2623, 3, 2, 2, 2, 2625, 2626, 3, 2, 2, 2, 2626, 2627, 3, 2, 2, 2,
	2627, 2629, 7, 339, 2, 2, 2628, 2621, 3, 2, 2, 2, 2628, 2629, 3, 2, 2,
	2, 2629, 2639, 3, 2, 2, 2, 2630, 2631, 7, 97, 2, 2, 2631, 2632, 7, 338,
	2, 2, 2632, 2633, 7, 369, 2, 2, 2633, 2639, 7, 339, 2, 2, 2634, 2635, 7,
	96, 2, 2, 2635, 2636, 7, 338, 2, 2, 2636, 2637, 7, 369, 2, 2, 2637, 2639,
	7, 339, 2, 2, 2638, 2599, 3, 2, 2, 2, 2638, 2600, 3, 2, 2, 2, 2638, 2601,
	3, 2, 2, 2, 2638, 2602, 3, 2, 2, 2, 2638, 2603, 3, 2, 2, 2, 2638, 2604,
	3, 2, 2, 2, 2638, 2605, 3, 2, 2, 2, 2638, 2609, 3, 2, 2, 2, 2638, 2610,
	3, 2, 2, 2, 2638, 2611, 3, 2, 2, 2, 2638, 2612, 3, 2, 2, 2, 2638, 2613,
	3, 2, 2, 2, 2638, 2618, 3, 2, 2, 2, 2638, 2619, 3, 2, 2, 2, 2638, 2620,
	3, 2, 2, 2, 2638, 2630, 3, 2, 2, 2, 2638, 2634, 3, 2, 2, 2, 2639, 419,
	3, 2, 2, 2, 2640, 2641, 7, 98, 2, 2, 2641, 2642, 7, 348, 2, 2, 2642, 2643,
	5, 416, 209, 2, 2643, 2644, 7, 350, 2, 2, 2644, 421, 3, 2, 2, 2, 2645,
	2646, 7, 99, 2, 2, 2646, 2647, 7, 348, 2, 2, 2647, 2648, 5, 320, 161, 2,
	2648, 2649, 7, 350, 2, 2, 2649, 423, 3, 2, 2, 2, 2650, 2651, 7, 100, 2,
	2, 2651, 2652, 7, 348, 2, 2, 2652, 2653, 5, 418, 210, 2, 2653, 2654, 7,
	336, 2, 2, 2654, 2655, 5, 416, 209, 2, 2655, 2656, 7, 350, 2, 2, 2656,
	425, 3, 2, 2, 2, 2657, 2658, 7, 101, 2, 2, 2658, 2659, 7, 348, 2, 2, 2659,
	2660, 5, 414, 208, 2, 2660, 2661, 7, 350, 2, 2, 2661, 427, 3, 2, 2, 2,
	2662, 2663, 7, 56, 2, 2, 2663, 2687, 7, 5, 2, 2, 2664, 2666, 7, 56, 2,
	2, 2665, 2667, 7, 26, 2, 2, 2666, 2665, 3, 2, 2, 2, 2666, 2667, 3, 2, 2,
	2, 2667, 2687, 3, 2, 2, 2, 2668, 2669, 7, 179, 2, 2, 2669, 2687, 7, 5,
	2, 2, 2670, 2672, 7, 179, 2, 2, 2671, 2673, 7, 26, 2, 2, 2672, 2671, 3,
	2, 2, 2, 2672, 2673, 3, 2, 2, 2, 2673, 2687, 3, 2, 2, 2, 2674, 2675, 7,
	57, 2, 2, 2675, 2687, 7, 5, 2, 2, 2676, 2678, 7, 57, 2, 2, 2677, 2679,
	7, 26, 2, 2, 2678, 2677, 3, 2, 2, 2, 2678, 2679, 3, 2, 2, 2, 2679, 2687,
	3, 2, 2, 2, 2680, 2681, 7, 177, 2, 2, 2681, 2687, 7, 5, 2, 2, 2682, 2684,
	7, 177, 2, 2, 2683, 2685, 7, 26, 2, 2, 2684, 2683, 3, 2, 2, 2, 2684, 2685,
	3, 2, 2, 2, 2685, 2687, 3, 2, 2, 2, 2686, 2662, 3, 2, 2, 2, 2686, 2664,
	3, 2, 2, 2, 2686, 2668, 3, 2, 2, 2, 2686, 2670, 3, 2, 2, 2, 2686, 2674,
	3, 2, 2, 2, 2686, 2676, 3, 2, 2, 2, 2686, 2680, 3, 2, 2, 2, 2686, 2682,
	3, 2, 2, 2, 2687, 429, 3, 2, 2, 2, 2688, 2690, 5, 434, 218, 2, 2689, 2688,
	3, 2, 2, 2, 2689, 2690, 3, 2, 2, 2, 2690, 2691, 3, 2, 2, 2, 2691, 2692,
	5, 432, 217, 2, 2692, 431, 3, 2, 2, 2, 2693, 2696, 5, 438, 220, 2, 2694,
	2696, 5, 442, 222, 2, 2695, 2693, 3, 2, 2, 2, 2695, 2694, 3, 2, 2, 2, 2696,
	433, 3, 2, 2, 2, 2697, 2698, 7, 151, 2, 2, 2698, 2703, 5, 436, 219, 2,
	2699, 2700, 7, 336, 2, 2, 2700, 2702, 5, 436, 219, 2, 2701, 2699, 3, 2,
	2, 2, 2702, 2705, 3, 2, 2, 2, 2703, 2701, 3, 2, 2, 2, 2703, 2704, 3, 2,
	2, 2, 2704, 435, 3, 2, 2, 2, 2705, 2703, 3, 2, 2, 2, 2706, 2707, 5, 740,
	371, 2, 2707, 2708, 7, 24, 2, 2, 2708, 2709, 7, 338, 2, 2, 2709, 2710,
	5, 430, 216, 2, 2710, 2711, 7, 339, 2, 2, 2711, 437, 3, 2, 2, 2, 2712,
	2718, 5, 440, 221, 2, 2713, 2714, 5, 428, 215, 2, 2714, 2715, 5, 440, 221,
	2, 2715, 2717, 3, 2, 2, 2, 2716, 2713, 3, 2, 2, 2, 2717, 2720, 3, 2, 2,
	2, 2718, 2716, 3, 2, 2, 2, 2718, 2719, 3, 2, 2, 2, 2719, 439, 3, 2, 2,
	2, 2720, 2718, 3, 2, 2, 2, 2721, 2723, 5, 540, 271, 2, 2722, 2724, 5, 452,
	227, 2, 2723, 2722, 3, 2, 2, 2, 2724, 2725, 3, 2, 2, 2, 2725, 2723, 3,
	2, 2, 2, 2725, 2726, 3, 2, 2, 2, 2726, 441, 3, 2, 2, 2, 2727, 2730, 5,
	454, 228, 2, 2728, 2731, 5, 446, 224, 2, 2729, 2731, 5, 588, 295, 2, 2730,
	2728, 3, 2, 2, 2, 2730, 2729, 3, 2, 2, 2, 2731, 2734, 3, 2, 2, 2, 2732,
	2734, 5, 446, 224, 2, 2733, 2727, 3, 2, 2, 2, 2733, 2732, 3, 2, 2, 2, 2734,
	443, 3, 2, 2, 2, 2735, 2737, 5, 502, 252, 2, 2736, 2738, 5, 540, 271, 2,
	2737, 2736, 3, 2, 2, 2, 2737, 2738, 3, 2, 2, 2, 2738, 2740, 3, 2, 2, 2,
	2739, 2741, 5, 584, 293, 2, 2740, 2739, 3, 2, 2, 2, 2740, 2741, 3, 2, 2,
	2, 2741, 2743, 3, 2, 2, 2, 2742, 2744, 5, 596, 299, 2, 2743, 2742, 3, 2,
	2, 2, 2743, 2744, 3, 2, 2, 2, 2744, 2746, 3, 2, 2, 2, 2745, 2747, 5, 612,
	307, 2, 2746, 2745, 3, 2, 2, 2, 2746, 2747, 3, 2, 2, 2, 2747, 2749, 3,
	2, 2, 2, 2748, 2750, 5, 516, 259, 2, 2749, 2748, 3, 2, 2, 2, 2749, 2750,
	3, 2, 2, 2, 2750, 2756, 3, 2, 2, 2, 2751, 2752, 7, 338, 2, 2, 2752, 2753,
	5, 446, 224, 2, 2753, 2754, 7, 339, 2, 2, 2754, 2756, 3, 2, 2, 2, 2755,
	2735, 3, 2, 2, 2, 2755, 2751, 3, 2, 2, 2, 2756, 445, 3, 2, 2, 2, 2757,
	2759, 5, 444, 223, 2, 2758, 2760, 5, 448, 225, 2, 2759, 2758, 3, 2, 2,
	2, 2759, 2760, 3, 2, 2, 2, 2760, 2762, 3, 2, 2, 2, 2761, 2763, 5, 628,
	315, 2, 2762, 2761, 3, 2, 2, 2, 2762, 2763, 3, 2, 2, 2, 2763, 2765, 3,
	2, 2, 2, 2764, 2766, 5, 630, 316, 2, 2765, 2764, 3, 2, 2, 2, 2765, 2766,
	3, 2, 2, 2, 2766, 2768, 3, 2, 2, 2, 2767, 2769, 5, 634, 318, 2, 2768, 2767,
	3, 2, 2, 2, 2768, 2769, 3, 2, 2, 2, 2769, 2771, 3, 2, 2, 2, 2770, 2772,
	5, 636, 319, 2, 2771, 2770, 3, 2, 2, 2, 2771, 2772, 3, 2, 2, 2, 2772, 2774,
	3, 2, 2, 2, 2773, 2775, 5, 458, 230, 2, 2774, 2773, 3, 2, 2, 2, 2774, 2775,
	3, 2, 2, 2, 2775, 447, 3, 2, 2, 2, 2776, 2777, 5, 428, 215, 2, 2777, 2778,
	5, 444, 223, 2, 2778, 2780, 3, 2, 2, 2, 2779, 2776, 3, 2, 2, 2, 2780, 2781,
	3, 2, 2, 2, 2781, 2779, 3, 2, 2, 2, 2781, 2782, 3, 2, 2, 2, 2782, 449,
	3, 2, 2, 2, 2783, 2785, 5, 434, 218, 2, 2784, 2783, 3, 2, 2, 2, 2784, 2785,
	3, 2, 2, 2, 2785, 2786, 3, 2, 2, 2, 2786, 2787, 5, 446, 224, 2, 2787, 451,
	3, 2, 2, 2, 2788, 2789, 5, 454, 228, 2, 2789, 2791, 5, 502, 252, 2, 2790,
	2792, 5, 558, 280, 2, 2791, 2790, 3, 2, 2, 2, 2791, 2792, 3, 2, 2, 2, 2792,
	2794, 3, 2, 2, 2, 2793, 2795, 5, 584, 293, 2, 2794, 2793, 3, 2, 2, 2, 2794,
	2795, 3, 2, 2, 2, 2795, 2797, 3, 2, 2, 2, 2796, 2798, 5, 596, 299, 2, 2797,
	2796, 3, 2, 2, 2, 2797, 2798, 3, 2, 2, 2, 2798, 2800, 3, 2, 2, 2, 2799,
	2801, 5, 612, 307, 2, 2800, 2799, 3, 2, 2, 2, 2800, 2801, 3, 2, 2, 2, 2801,
	2803, 3, 2, 2, 2, 2802, 2804, 5, 516, 259, 2, 2803, 2802, 3, 2, 2, 2, 2803,
	2804, 3, 2, 2, 2, 2804, 2806, 3, 2, 2, 2, 2805, 2807, 5, 628, 315, 2, 2806,
	2805, 3, 2, 2, 2, 2806, 2807, 3, 2, 2, 2, 2807, 2809, 3, 2, 2, 2, 2808,
	2810, 5, 630, 316, 2, 2809, 2808, 3, 2, 2, 2, 2809, 2810, 3, 2, 2, 2, 2810,
	2812, 3, 2, 2, 2, 2811, 2813, 5, 634, 318, 2, 2812, 2811, 3, 2, 2, 2, 2812,
	2813, 3, 2, 2, 2, 2813, 2815, 3, 2, 2, 2, 2814, 2816, 5, 636, 319, 2, 2815,
	2814, 3, 2, 2, 2, 2815, 2816, 3, 2, 2, 2, 2816, 2818, 3, 2, 2, 2, 2817,
	2819, 5, 458, 230, 2, 2818, 2817, 3, 2, 2, 2, 2818, 2819, 3, 2, 2, 2, 2819,
	2852, 3, 2, 2, 2, 2820, 2822, 5, 502, 252, 2, 2821, 2823, 5, 558, 280,
	2, 2822, 2821, 3, 2, 2, 2, 2822, 2823, 3, 2, 2, 2, 2823, 2825, 3, 2, 2,
	2, 2824, 2826, 5, 584, 293, 2, 2825, 2824, 3, 2, 2, 2, 2825, 2826, 3, 2,
	2, 2, 2826, 2828, 3, 2, 2, 2, 2827, 2829, 5, 596, 299, 2, 2828, 2827, 3,
	2, 2, 2, 2828, 2829, 3, 2, 2, 2, 2829, 2831, 3, 2, 2, 2, 2830, 2832, 5,
	612, 307, 2, 2831, 2830, 3, 2, 2, 2, 2831, 2832, 3, 2, 2, 2, 2832, 2834,
	3, 2, 2, 2, 2833, 2835, 5, 516, 259, 2, 2834, 2833, 3, 2, 2, 2, 2834, 2835,
	3, 2, 2, 2, 2835, 2837, 3, 2, 2, 2, 2836, 2838, 5, 628, 315, 2, 2837, 2836,
	3, 2, 2, 2, 2837, 2838, 3, 2, 2, 2, 2838, 2840, 3, 2, 2, 2, 2839, 2841,
	5, 630, 316, 2, 2840, 2839, 3, 2, 2, 2, 2840, 2841, 3, 2, 2, 2, 2841, 2843,
	3, 2, 2, 2, 2842, 2844, 5, 634, 318, 2, 2843, 2842, 3, 2, 2, 2, 2843, 2844,
	3, 2, 2, 2, 2844, 2846, 3, 2, 2, 2, 2845, 2847, 5, 636, 319, 2, 2846, 2845,
	3, 2, 2, 2, 2846, 2847, 3, 2, 2, 2, 2847, 2849, 3, 2, 2, 2, 2848, 2850,
	5, 458, 230, 2, 2849, 2848, 3, 2, 2, 2, 2849, 2850, 3, 2, 2, 2, 2850, 2852,
	3, 2, 2, 2, 2851, 2788, 3, 2, 2, 2, 2851, 2820, 3, 2, 2, 2, 2852, 453,
	3, 2, 2, 2, 2853, 2854, 7, 27, 2, 2, 2854, 2855, 7, 28, 2, 2, 2855, 2857,
	5, 456, 229, 2, 2856, 2858, 5, 38, 20, 2, 2857, 2856, 3, 2, 2, 2, 2857,
	2858, 3, 2, 2, 2, 2858, 2872, 3, 2, 2, 2, 2859, 2860, 7, 27, 2, 2, 2860,
	2862, 7, 106, 2, 2, 2861, 2863, 7, 39, 2, 2, 2862, 2861, 3, 2, 2, 2, 2862,
	2863, 3, 2, 2, 2, 2863, 2864, 3, 2, 2, 2, 2864, 2869, 5, 724, 363, 2, 2865,
	2866, 7, 338, 2, 2, 2866, 2867, 5, 322, 162, 2, 2867, 2868, 7, 339, 2,
	2, 2868, 2870, 3, 2, 2, 2, 2869, 2865, 3, 2, 2, 2, 2869, 2870, 3, 2, 2,
	2, 2870, 2872, 3, 2, 2, 2, 2871, 2853, 3, 2, 2, 2, 2871, 2859, 3, 2, 2,
	2, 2872, 455, 3, 2, 2, 2, 2873, 2875, 7, 50, 2, 2, 2874, 2873, 3, 2, 2,
	2, 2874, 2875, 3, 2, 2, 2, 2875, 2876, 3, 2, 2, 2, 2876, 2877, 7, 49, 2,
	2, 2877, 2879, 7, 364, 2, 2, 2878, 2880, 5, 290, 146, 2, 2879, 2878, 3,
	2, 2, 2, 2879, 2880, 3, 2, 2, 2, 2880, 2882, 3, 2, 2, 2, 2881, 2883, 5,
	312, 157, 2, 2882, 2881, 3, 2, 2, 2, 2882, 2883, 3, 2, 2, 2, 2883, 2887,
	3, 2, 2, 2, 2884, 2885, 7, 39, 2, 2, 2885, 2887, 5, 724, 363, 2, 2886,
	2874, 3, 2, 2, 2, 2886, 2884, 3, 2, 2, 2, 2887, 457, 3, 2, 2, 2, 2888,
	2891, 7, 155, 2, 2, 2889, 2890, 7, 369, 2, 2, 2890, 2892, 7, 336, 2, 2,
	2891, 2889, 3, 2, 2, 2, 2891, 2892, 3, 2, 2, 2, 2892, 2893, 3, 2, 2, 2,
	2893, 2899, 7, 369, 2, 2, 2894, 2895, 7, 155, 2, 2, 2895, 2896, 7, 369,
	2, 2, 2896, 2897, 7, 156, 2, 2, 2897, 2899, 7, 369, 2, 2, 2898, 2888, 3,
	2, 2, 2, 2898, 2894, 3, 2, 2, 2, 2899, 459, 3, 2, 2, 2, 2900, 2901, 7,
	175, 2, 2, 2901, 2902, 7, 23, 2, 2, 2902, 2904, 5, 572, 287, 2, 2903, 2905,
	5, 584, 293, 2, 2904, 2903, 3, 2, 2, 2, 2904, 2905, 3, 2, 2, 2, 2905, 461,
	3, 2, 2, 2, 2906, 2907, 5, 534, 268, 2, 2907, 2908, 7, 344, 2, 2, 2908,
	2909, 5, 708, 355, 2, 2909, 463, 3, 2, 2, 2, 2910, 2911, 7, 157, 2, 2,
	2911, 2916, 5, 462, 232, 2, 2912, 2913, 7, 336, 2, 2, 2913, 2915, 5, 462,
	232, 2, 2914, 2912, 3, 2, 2, 2, 2915, 2918, 3, 2, 2, 2, 2916, 2914, 3,
	2, 2, 2, 2916, 2917, 3, 2, 2, 2, 2917, 465, 3, 2, 2, 2, 2918, 2916, 3,
	2, 2, 2, 2919, 2920, 7, 226, 2, 2, 2920, 2921, 5, 572, 287, 2, 2921, 2923,
	5, 464, 233, 2, 2922, 2924, 5, 584, 293, 2, 2923, 2922, 3, 2, 2, 2, 2923,
	2924, 3, 2, 2, 2, 2924, 467, 3, 2, 2, 2, 2925, 2930, 5, 470, 236, 2, 2926,
	2930, 5, 480, 241, 2, 2927, 2930, 5, 482, 242, 2, 2928, 2930, 5, 484, 243,
	2, 2929, 2925, 3, 2, 2, 2, 2929, 2926, 3, 2, 2, 2, 2929, 2927, 3, 2, 2,
	2, 2929, 2928, 3, 2, 2, 2, 2930, 469, 3, 2, 2, 2, 2931, 2932, 7, 277, 2,
	2, 2932, 2941, 7, 278, 2, 2, 2933, 2938, 5, 472, 237, 2, 2934, 2935, 7,
	336, 2, 2, 2935, 2937, 5, 472, 237, 2, 2936, 2934, 3, 2, 2, 2, 2937, 2940,
	3, 2, 2, 2, 2938, 2936, 3, 2, 2, 2, 2938, 2939, 3, 2, 2, 2, 2939, 2942,
	3, 2, 2, 2, 2940, 2938, 3, 2, 2, 2, 2941, 2933, 3, 2, 2, 2, 2941, 2942,
	3, 2, 2, 2, 2942, 471, 3, 2, 2, 2, 2943, 2946, 5, 476, 239, 2, 2944, 2946,
	5, 474, 238, 2, 2945, 2943, 3, 2, 2, 2, 2945, 2944, 3, 2, 2, 2, 2946, 473,
	3, 2, 2, 2, 2947, 2948, 7, 200, 2, 2, 2948, 2952, 7, 282, 2, 2, 2949, 2950,
	7, 200, 2, 2, 2950, 2952, 7, 283, 2, 2, 2951, 2947, 3, 2, 2, 2, 2951, 2949,
	3, 2, 2, 2, 2952, 475, 3, 2, 2, 2, 2953, 2954, 7, 284, 2, 2, 2954, 2955,
	7, 285, 2, 2, 2955, 2956, 5, 478, 240, 2, 2956, 477, 3, 2, 2, 2, 2957,
	2958, 7, 286, 2, 2, 2958, 479, 3, 2, 2, 2, 2959, 2961, 7, 279, 2, 2, 2960,
	2962, 7, 281, 2, 2, 2961, 2960, 3, 2, 2, 2, 2961, 2962, 3, 2, 2, 2, 2962,
	481, 3, 2, 2, 2, 2963, 2965, 7, 280, 2, 2, 2964, 2966, 7, 281, 2, 2, 2965,
	2964, 3, 2, 2, 2, 2965, 2966, 3, 2, 2, 2, 2966, 483, 3, 2, 2, 2, 2967,
	2968, 7, 157, 2, 2, 2968, 2969, 7, 287, 2, 2, 2969, 2970, 5, 722, 362,
	2, 2970, 485, 3, 2, 2, 2, 2971, 2972, 7, 300, 2, 2, 2972, 2974, 7, 260,
	2, 2, 2973, 2975, 7, 369, 2, 2, 2974, 2973, 3, 2, 2, 2, 2975, 2976, 3,
	2, 2, 2, 2976, 2974, 3, 2, 2, 2, 2976, 2977, 3, 2, 2, 2, 2977, 487, 3,
	2, 2, 2, 2978, 2979, 7, 303, 2, 2, 2979, 2980, 7, 106, 2, 2, 2980, 2985,
	5, 572, 287, 2, 2981, 2983, 7, 24, 2, 2, 2982, 2981, 3, 2, 2, 2, 2982,
	2983, 3, 2, 2, 2, 2983, 2984, 3, 2, 2, 2, 2984, 2986, 5, 740, 371, 2, 2985,
	2982, 3, 2, 2, 2, 2985, 2986, 3, 2, 2, 2, 2986, 2987, 3, 2, 2, 2, 2987,
	2988, 7, 52, 2, 2, 2988, 2989, 5, 548, 275, 2, 2989, 2990, 7, 36, 2, 2,
	2990, 2991, 5, 708, 355, 2, 2991, 2992, 5, 490, 246, 2, 2992, 489, 3, 2,
	2, 2, 2993, 2996, 5, 494, 248, 2, 2994, 2996, 5, 496, 249, 2, 2995, 2993,
	3, 2, 2, 2, 2995, 2994, 3, 2, 2, 2, 2996, 2999, 3, 2, 2, 2, 2997, 2995,
	3, 2, 2, 2, 2997, 2998, 3, 2, 2, 2, 2998, 3001, 3, 2, 2, 2, 2999, 2997,
	3, 2, 2, 2, 3000, 3002, 5, 492, 247, 2, 3001, 3000, 3, 2, 2, 2, 3001, 3002,
	3, 2, 2, 2, 3002, 491, 3, 2, 2, 2, 3003, 3004, 7, 165, 2, 2, 3004, 3005,
	7, 9, 2, 2, 3005, 3008, 7, 304, 2, 2, 3006, 3007, 7, 7, 2, 2, 3007, 3009,
	5, 708, 355, 2, 3008, 3006, 3, 2, 2, 2, 3008, 3009, 3, 2, 2, 2, 3009, 3010,
	3, 2, 2, 2, 3010, 3011, 7, 166, 2, 2, 3011, 3012, 7, 27, 2, 2, 3012, 3013,
	7, 265, 2, 2, 3013, 3014, 5, 592, 297, 2, 3014, 493, 3, 2, 2, 2, 3015,
	3016, 7, 165, 2, 2, 3016, 3017, 7, 304, 2, 2, 3017, 3018, 7, 7, 2, 2, 3018,
	3019, 5, 708, 355, 2, 3019, 3020, 7, 166, 2, 2, 3020, 3021, 5, 498, 250,
	2, 3021, 495, 3, 2, 2, 2, 3022, 3023, 7, 165, 2, 2, 3023, 3024, 7, 304,
	2, 2, 3024, 3025, 7, 166, 2, 2, 3025, 3026, 5, 498, 250, 2, 3026, 497,
	3, 2, 2, 2, 3027, 3028, 7, 226, 2, 2, 3028, 3031, 5, 464, 233, 2, 3029,
	3031, 7, 175, 2, 2, 3030, 3027, 3, 2, 2, 2, 3030, 3029, 3, 2, 2, 2, 3031,
	499, 3, 2, 2, 2, 3032, 3033, 7, 119, 2, 2, 3033, 3035, 7, 268, 2, 2, 3034,
	3036, 7, 364, 2, 2, 3035, 3034, 3, 2, 2, 2, 3036, 3037, 3, 2, 2, 2, 3037,
	3035, 3, 2, 2, 2, 3037, 3038, 3, 2, 2, 2, 3038, 501, 3, 2, 2, 2, 3039,
	3041, 7, 25, 2, 2, 3040, 3042, 7, 375, 2, 2, 3041, 3040, 3, 2, 2, 2, 3041,
	3042, 3, 2, 2, 2, 3042, 3049, 3, 2, 2, 2, 3043, 3045, 9, 17, 2, 2, 3044,
	3043, 3, 2, 2, 2, 3044, 3045, 3, 2, 2, 2, 3045, 3046, 3, 2, 2, 2, 3046,
	3050, 5, 504, 253, 2, 3047, 3048, 7, 51, 2, 2, 3048, 3050, 5, 506, 254,
	2, 3049, 3044, 3, 2, 2, 2, 3049, 3047, 3, 2, 2, 2, 3050, 3053, 3, 2, 2,
	2, 3051, 3053, 5, 510, 256, 2, 3052, 3039, 3, 2, 2, 2, 3052, 3051, 3, 2,
	2, 2, 3053, 503, 3, 2, 2, 2, 3054, 3059, 5, 508, 255, 2, 3055, 3056, 7,
	336, 2, 2, 3056, 3058, 5, 508, 255, 2, 3057, 3055, 3, 2, 2, 2, 3058, 3061,
	3, 2, 2, 2, 3059, 3057, 3, 2, 2, 2, 3059, 3060, 3, 2, 2, 2, 3060, 505,
	3, 2, 2, 2, 3061, 3059, 3, 2, 2, 2, 3062, 3063, 7, 338, 2, 2, 3063, 3064,
	5, 514, 258, 2, 3064, 3066, 7, 339, 2, 2, 3065, 3067, 5, 280, 141, 2, 3066,
	3065, 3, 2, 2, 2, 3066, 3067, 3, 2, 2, 2, 3067, 3069, 3, 2, 2, 2, 3068,
	3070, 5, 284, 143, 2, 3069, 3068, 3, 2, 2, 2, 3069, 3070, 3, 2, 2, 2, 3070,
	3071, 3, 2, 2, 2, 3071, 3072, 7, 52, 2, 2, 3072, 3087, 7, 364, 2, 2, 3073,
	3085, 7, 24, 2, 2, 3074, 3077, 7, 338, 2, 2, 3075, 3078, 5, 538, 270, 2,
	3076, 3078, 5, 316, 159, 2, 3077, 3075, 3, 2, 2, 2, 3077, 3076, 3, 2, 2,
	2, 3078, 3079, 3, 2, 2, 2, 3079, 3080, 7, 339, 2, 2, 3080, 3086, 3, 2,
	2, 2, 3081, 3084, 5, 538, 270, 2, 3082, 3084, 5, 316, 159, 2, 3083, 3081,
	3, 2, 2, 2, 3083, 3082, 3, 2, 2, 2, 3084, 3086, 3, 2, 2, 2, 3085, 3074,
	3, 2, 2, 2, 3085, 3083, 3, 2, 2, 2, 3086, 3088, 3, 2, 2, 2, 3087, 3073,
	3, 2, 2, 2, 3087, 3088, 3, 2, 2, 2, 3088, 3090, 3, 2, 2, 2, 3089, 3091,
	5, 280, 141, 2, 3090, 3089, 3, 2, 2, 2, 3090, 3091, 3, 2, 2, 2, 3091, 3093,
	3, 2, 2, 2, 3092, 3094, 5, 282, 142, 2, 3093, 3092, 3, 2, 2, 2, 3093, 3094,
	3, 2, 2, 2, 3094, 507, 3, 2, 2, 2, 3095, 3116, 5, 532, 267, 2, 3096, 3113,
	5, 708, 355, 2, 3097, 3099, 7, 24, 2, 2, 3098, 3097, 3, 2, 2, 2, 3098,
	3099, 3, 2, 2, 2, 3099, 3100, 3, 2, 2, 2, 3100, 3114, 5, 740, 371, 2, 3101,
	3102, 7, 24, 2, 2, 3102, 3103, 7, 338, 2, 2, 3103, 3108, 5, 740, 371, 2,
	3104, 3105, 7, 336, 2, 2, 3105, 3107, 5, 740, 371, 2, 3106, 3104, 3, 2,
	2, 2, 3107, 3110, 3, 2, 2, 2, 3108, 3106, 3, 2, 2, 2, 3108, 3109, 3, 2,
	2, 2, 3109, 3111, 3, 2, 2, 2, 3110, 3108, 3, 2, 2, 2, 3111, 3112, 7, 339,
	2, 2, 3112, 3114, 3, 2, 2, 2, 3113, 3098, 3, 2, 2, 2, 3113, 3101, 3, 2,
	2, 2, 3113, 3114, 3, 2, 2, 2, 3114, 3116, 3, 2, 2, 2, 3115, 3095, 3, 2,
	2, 2, 3115, 3096, 3, 2, 2, 2, 3116, 509, 3, 2, 2, 2, 3117, 3118, 7, 100,
	2, 2, 3118, 3122, 5, 514, 258, 2, 3119, 3120, 7, 102, 2, 2, 3120, 3122,
	5, 514, 258, 2, 3121, 3117, 3, 2, 2, 2, 3121, 3119, 3, 2, 2, 2, 3122, 3124,
	3, 2, 2, 2, 3123, 3125, 5, 280, 141, 2, 3124, 3123, 3, 2, 2, 2, 3124, 3125,
	3, 2, 2, 2, 3125, 3127, 3, 2, 2, 2, 3126, 3128, 5, 284, 143, 2, 3127, 3126,
	3, 2, 2, 2, 3127, 3128, 3, 2, 2, 2, 3128, 3129, 3, 2, 2, 2, 3129, 3130,
	7, 52, 2, 2, 3130, 3145, 7, 364, 2, 2, 3131, 3143, 7, 24, 2, 2, 3132, 3135,
	7, 338, 2, 2, 3133, 3136, 5, 538, 270, 2, 3134, 3136, 5, 316, 159, 2, 3135,
	3133, 3, 2, 2, 2, 3135, 3134, 3, 2, 2, 2, 3136, 3137, 3, 2, 2, 2, 3137,
	3138, 7, 339, 2, 2, 3138, 3144, 3, 2, 2, 2, 3139, 3142, 5, 538, 270, 2,
	3140, 3142, 5, 316, 159, 2, 3141, 3139, 3, 2, 2, 2, 3141, 3140, 3, 2, 2,
	2, 3142, 3144, 3, 2, 2, 2, 3143, 3132, 3, 2, 2, 2, 3143, 3141, 3, 2, 2,
	2, 3144, 3146, 3, 2, 2, 2, 3145, 3131, 3, 2, 2, 2, 3145, 3146, 3, 2, 2,
	2, 3146, 3148, 3, 2, 2, 2, 3147, 3149, 5, 280, 141, 2, 3148, 3147, 3, 2,
	2, 2, 3148, 3149, 3, 2, 2, 2, 3149, 3151, 3, 2, 2, 2, 3150, 3152, 5, 282,
	142, 2, 3151, 3150, 3, 2, 2, 2, 3151, 3152, 3, 2, 2, 2, 3152, 511, 3, 2,
	2, 2, 3153, 3156, 5, 532, 267, 2, 3154, 3156, 5, 708, 355, 2, 3155, 3153,
	3, 2, 2, 2, 3155, 3154, 3, 2, 2, 2, 3156, 513, 3, 2, 2, 2, 3157, 3162,
	5, 512, 257, 2, 3158, 3159, 7, 336, 2, 2, 3159, 3161, 5, 512, 257, 2, 3160,
	3158, 3, 2, 2, 2, 3161, 3164, 3, 2, 2, 2, 3162, 3160, 3, 2, 2, 2, 3162,
	3163, 3, 2, 2, 2, 3163, 515, 3, 2, 2, 2, 3164, 3162, 3, 2, 2, 2, 3165,
	3166, 7, 234, 2, 2, 3166, 3171, 5, 518, 260, 2, 3167, 3168, 7, 336, 2,
	2, 3168, 3170, 5, 518, 260, 2, 3169, 3167, 3, 2, 2, 2, 3170, 3173, 3, 2,
	2, 2, 3171, 3169, 3, 2, 2, 2, 3171, 3172, 3, 2, 2, 2, 3172, 517, 3, 2,
	2, 2, 3173, 3171, 3, 2, 2, 2, 3174, 3175, 5, 740, 371, 2, 3175, 3176, 7,
	24, 2, 2, 3176, 3177, 5, 520, 261, 2, 3177, 519, 3, 2, 2, 2, 3178, 3191,
	5, 740, 371, 2, 3179, 3181, 7, 338, 2, 2, 3180, 3182, 5, 740, 371, 2, 3181,
	3180, 3, 2, 2, 2, 3181, 3182, 3, 2, 2, 2, 3182, 3184, 3, 2, 2, 2, 3183,
	3185, 5, 578, 290, 2, 3184, 3183, 3, 2, 2, 2, 3184, 3185, 3, 2, 2, 2, 3185,
	3187, 3, 2, 2, 2, 3186, 3188, 5, 522, 262, 2, 3187, 3186, 3, 2, 2, 2, 3187,
	3188, 3, 2, 2, 2, 3188, 3189, 3, 2, 2, 2, 3189, 3191, 7, 339, 2, 2, 3190,
	3178, 3, 2, 2, 2, 3190, 3179, 3, 2, 2, 2, 3191, 521, 3, 2, 2, 2, 3192,
	3195, 5, 524, 263, 2, 3193, 3195, 5, 526, 264, 2, 3194, 3192, 3, 2, 2,
	2, 3194, 3193, 3, 2, 2, 2, 3195, 523, 3, 2, 2, 2, 3196, 3197, 7, 109, 2,
	2, 3197, 3205, 5, 528, 265, 2, 3198, 3199, 7, 109, 2, 2, 3199, 3200, 7,
	206, 2, 2, 3200, 3201, 5, 530, 266, 2, 3201, 3202, 7, 7, 2, 2, 3202, 3203,
	5, 530, 266, 2, 3203, 3205, 3, 2, 2, 2, 3204, 3196, 3, 2, 2, 2, 3204, 3198,
	3, 2, 2, 2, 3205, 525, 3, 2, 2, 2, 3206, 3207, 7, 203, 2, 2, 3207, 3215,
	5, 528, 265, 2, 3208, 3209, 7, 203, 2, 2, 3209, 3210, 7, 206, 2, 2, 3210,
	3211, 5, 530, 266, 2, 3211, 3212, 7, 7, 2, 2, 3212, 3213, 5, 530, 266,
	2, 3213, 3215, 3, 2, 2, 2, 3214, 3206, 3, 2, 2, 2, 3214, 3208, 3, 2, 2,
	2, 3215, 527, 3, 2, 2, 2, 3216, 3217, 7, 235, 2, 2, 3217, 3223, 7, 236,
	2, 2, 3218, 3219, 7, 238, 2, 2, 3219, 3223, 7, 108, 2, 2, 3220, 3221, 7,
	369, 2, 2, 3221, 3223, 7, 236, 2, 2, 3222, 3216, 3, 2, 2, 2, 3222, 3218,
	3, 2, 2, 2, 3222, 3220, 3, 2, 2, 2, 3223, 529, 3, 2, 2, 2, 3224, 3225,
	7, 235, 2, 2, 3225, 3231, 9, 18, 2, 2, 3226, 3227, 7, 238, 2, 2, 3227,
	3231, 7, 108, 2, 2, 3228, 3229, 7, 369, 2, 2, 3229, 3231, 9, 18, 2, 2,
	3230, 3224, 3, 2, 2, 2, 3230, 3226, 3, 2, 2, 2, 3230, 3228, 3, 2, 2, 2,
	3231, 531, 3, 2, 2, 2, 3232, 3238, 7, 354, 2, 2, 3233, 3234, 5, 572, 287,
	2, 3234, 3235, 7, 334, 2, 2, 3235, 3236, 7, 354, 2, 2, 3236, 3238, 3, 2,
	2, 2, 3237, 3232, 3, 2, 2, 2, 3237, 3233, 3, 2, 2, 2, 3238, 533, 3, 2,
	2, 2, 3239, 3240, 5, 740, 371, 2, 3240, 535, 3, 2, 2, 2, 3241, 3246, 5,
	708, 355, 2, 3242, 3243, 7, 336, 2, 2, 3243, 3245, 5, 708, 355, 2, 3244,
	3242, 3, 2, 2, 2, 3245, 3248, 3, 2, 2, 2, 3246, 3244, 3, 2, 2, 2, 3246,
	3247, 3, 2, 2, 2, 3247, 537, 3, 2, 2, 2, 3248, 3246, 3, 2, 2, 2, 3249,
	3254, 5, 740, 371, 2, 3250, 3251, 7, 336, 2, 2, 3251, 3253, 5, 740, 371,
	2, 3252, 3250, 3, 2, 2, 2, 3253, 3256, 3, 2, 2, 2, 3254, 3252, 3, 2, 2,
	2, 3254, 3255, 3, 2, 2, 2, 3255, 539, 3, 2, 2, 2, 3256, 3254, 3, 2, 2,
	2, 3257, 3258, 7, 23, 2, 2, 3258, 3259, 5, 542, 272, 2, 3259, 541, 3, 2,
	2, 2, 3260, 3261, 5, 554, 278, 2, 3261, 3264, 5, 550, 276, 2, 3262, 3263,
	7, 336, 2, 2, 3263, 3265, 5, 550, 276, 2, 3264, 3262, 3, 2, 2, 2, 3265,
	3266, 3, 2, 2, 2, 3266, 3264, 3, 2, 2, 2, 3266, 3267, 3, 2, 2, 2, 3267,
	3270, 3, 2, 2, 2, 3268, 3270, 5, 546, 274, 2, 3269, 3260, 3, 2, 2, 2, 3269,
	3268, 3, 2, 2, 2, 3270, 543, 3, 2, 2, 2, 3271, 3275, 5, 568, 285, 2, 3272,
	3274, 5, 558, 280, 2, 3273, 3272, 3, 2, 2, 2, 3274, 3277, 3, 2, 2, 2, 3275,
	3273, 3, 2, 2, 2, 3275, 3276, 3, 2, 2, 2, 3276, 3304, 3, 2, 2, 2, 3277,
	3275, 3, 2, 2, 2, 3278, 3282, 5, 594, 298, 2, 3279, 3281, 5, 558, 280,
	2, 3280, 3279, 3, 2, 2, 2, 3281, 3284, 3, 2, 2, 2, 3282, 3280, 3, 2, 2,
	2, 3282, 3283, 3, 2, 2, 2, 3283, 3304, 3, 2, 2, 2, 3284, 3282, 3, 2, 2,
	2, 3285, 3289, 5, 576, 289, 2, 3286, 3288, 5, 558, 280, 2, 3287, 3286,
	3, 2, 2, 2, 3288, 3291, 3, 2, 2, 2, 3289, 3287, 3, 2, 2, 2, 3289, 3290,
	3, 2, 2, 2, 3290, 3304, 3, 2, 2, 2, 3291, 3289, 3, 2, 2, 2, 3292, 3296,
	5, 582, 292, 2, 3293, 3295, 5, 558, 280, 2, 3294, 3293, 3, 2, 2, 2, 3295,
	3298, 3, 2, 2, 2, 3296, 3294, 3, 2, 2, 2, 3296, 3297, 3, 2, 2, 2, 3297,
	3304, 3, 2, 2, 2, 3298, 3296, 3, 2, 2, 2, 3299, 3300, 7, 338, 2, 2, 3300,
	3301, 5, 546, 274, 2, 3301, 3302, 7, 339, 2, 2, 3302, 3304, 3, 2, 2, 2,
	3303, 3271, 3, 2, 2, 2, 3303, 3278, 3, 2, 2, 2, 3303, 3285, 3, 2, 2, 2,
	3303, 3292, 3, 2, 2, 2, 3303, 3299, 3, 2, 2, 2, 3304, 545, 3, 2, 2, 2,
	3305, 3316, 5, 544, 273, 2, 3306, 3307, 5, 556, 279, 2, 3307, 3312, 5,
	548, 275, 2, 3308, 3309, 7, 36, 2, 2, 3309, 3313, 5, 708, 355, 2, 3310,
	3311, 7, 52, 2, 2, 3311, 3313, 5, 330, 166, 2, 3312, 3308, 3, 2, 2, 2,
	3312, 3310, 3, 2, 2, 2, 3312, 3313, 3, 2, 2, 2, 3313, 3315, 3, 2, 2, 2,
	3314, 3306, 3, 2, 2, 2, 3315, 3318, 3, 2, 2, 2, 3316, 3314, 3, 2, 2, 2,
	3316, 3317, 3, 2, 2, 2, 3317, 547, 3, 2, 2, 2, 3318, 3316, 3, 2, 2, 2,
	3319, 3324, 5, 568, 285, 2, 3320, 3324, 5, 594, 298, 2, 3321, 3324, 5,
	576, 289, 2, 3322, 3324, 5, 582, 292, 2, 3323, 3319, 3, 2, 2, 2, 3323,
	3320, 3, 2, 2, 2, 3323, 3321, 3, 2, 2, 2, 3323, 3322, 3, 2, 2, 2, 3324,
	3328, 3, 2, 2, 2, 3325, 3327, 5, 558, 280, 2, 3326, 3325, 3, 2, 2, 2, 3327,
	3330, 3, 2, 2, 2, 3328, 3326, 3, 2, 2, 2, 3328, 3329, 3, 2, 2, 2, 3329,
	549, 3, 2, 2, 2, 3330, 3328, 3, 2, 2, 2, 3331, 3333, 7, 31, 2, 2, 3332,
	3331, 3, 2, 2, 2, 3332, 3333, 3, 2, 2, 2, 3333, 3334, 3, 2, 2, 2, 3334,
	3335, 5, 570, 286, 2, 3335, 3336, 5, 552, 277, 2, 3336, 551, 3, 2, 2, 2,
	3337, 3338, 7, 338, 2, 2, 3338, 3339, 5, 536, 269, 2, 3339, 3340, 7, 339,
	2, 2, 3340, 553, 3, 2, 2, 2, 3341, 3342, 7, 30, 2, 2, 3342, 555, 3, 2,
	2, 2, 3343, 3368, 7, 32, 2, 2, 3344, 3345, 7, 251, 2, 2, 3345, 3368, 7,
	32, 2, 2, 3346, 3368, 7, 336, 2, 2, 3347, 3348, 7, 209, 2, 2, 3348, 3368,
	7, 32, 2, 2, 3349, 3351, 7, 33, 2, 2, 3350, 3352, 7, 29, 2, 2, 3351, 3350,
	3, 2, 2, 2, 3351, 3352, 3, 2, 2, 2, 3352, 3353, 3, 2, 2, 2, 3353, 3368,
	7, 32, 2, 2, 3354, 3356, 7, 34, 2, 2, 3355, 3357, 7, 29, 2, 2, 3356, 3355,
	3, 2, 2, 2, 3356, 3357, 3, 2, 2, 2, 3357, 3358, 3, 2, 2, 2, 3358, 3368,
	7, 32, 2, 2, 3359, 3361, 7, 35, 2, 2, 3360, 3362, 7, 29, 2, 2, 3361, 3360,
	3, 2, 2, 2, 3361, 3362, 3, 2, 2, 2, 3362, 3363, 3, 2, 2, 2, 3363, 3368,
	7, 32, 2, 2, 3364, 3365, 7, 33, 2, 2, 3365, 3366, 7, 215, 2, 2, 3366, 3368,
	7, 32, 2, 2, 3367, 3343, 3, 2, 2, 2, 3367, 3344, 3, 2, 2, 2, 3367, 3346,
	3, 2, 2, 2, 3367, 3347, 3, 2, 2, 2, 3367, 3349, 3, 2, 2, 2, 3367, 3354,
	3, 2, 2, 2, 3367, 3359, 3, 2, 2, 2, 3367, 3364, 3, 2, 2, 2, 3368, 557,
	3, 2, 2, 2, 3369, 3370, 7, 216, 2, 2, 3370, 3371, 7, 180, 2, 2, 3371, 3372,
	7, 29, 2, 2, 3372, 3373, 5, 638, 320, 2, 3373, 3383, 5, 560, 281, 2, 3374,
	3375, 7, 24, 2, 2, 3375, 3380, 5, 740, 371, 2, 3376, 3377, 7, 336, 2, 2,
	3377, 3379, 5, 740, 371, 2, 3378, 3376, 3, 2, 2, 2, 3379, 3382, 3, 2, 2,
	2, 3380, 3378, 3, 2, 2, 2, 3380, 3381, 3, 2, 2, 2, 3381, 3384, 3, 2, 2,
	2, 3382, 3380, 3, 2, 2, 2, 3383, 3374, 3, 2, 2, 2, 3383, 3384, 3, 2, 2,
	2, 3384, 3429, 3, 2, 2, 2, 3385, 3387, 7, 336, 2, 2, 3386, 3385, 3, 2,
	2, 2, 3386, 3387, 3, 2, 2, 2, 3387, 3388, 3, 2, 2, 2, 3388, 3389, 7, 216,
	2, 2, 3389, 3390, 7, 180, 2, 2, 3390, 3391, 5, 638, 320, 2, 3391, 3401,
	5, 560, 281, 2, 3392, 3393, 7, 24, 2, 2, 3393, 3398, 5, 740, 371, 2, 3394,
	3395, 7, 336, 2, 2, 3395, 3397, 5, 740, 371, 2, 3396, 3394, 3, 2, 2, 2,
	3397, 3400, 3, 2, 2, 2, 3398, 3396, 3, 2, 2, 2, 3398, 3399, 3, 2, 2, 2,
	3399, 3402, 3, 2, 2, 2, 3400, 3398, 3, 2, 2, 2, 3401, 3392, 3, 2, 2, 2,
	3401, 3402, 3, 2, 2, 2, 3402, 3429, 3, 2, 2, 2, 3403, 3405, 7, 336, 2,
	2, 3404, 3403, 3, 2, 2, 2, 3404, 3405, 3, 2, 2, 2, 3405, 3406, 3, 2, 2,
	2, 3406, 3407, 7, 216, 2, 2, 3407, 3408, 7, 39, 2, 2, 3408, 3409, 7, 338,
	2, 2, 3409, 3410, 5, 588, 295, 2, 3410, 3412, 7, 339, 2, 2, 3411, 3413,
	7, 24, 2, 2, 3412, 3411, 3, 2, 2, 2, 3412, 3413, 3, 2, 2, 2, 3413, 3414,
	3, 2, 2, 2, 3414, 3426, 5, 560, 281, 2, 3415, 3416, 7, 338, 2, 2, 3416,
	3421, 5, 740, 371, 2, 3417, 3418, 7, 336, 2, 2, 3418, 3420, 5, 740, 371,
	2, 3419, 3417, 3, 2, 2, 2, 3420, 3423, 3, 2, 2, 2, 3421, 3419, 3, 2, 2,
	2, 3421, 3422, 3, 2, 2, 2, 3422, 3424, 3, 2, 2, 2, 3423, 3421, 3, 2, 2,
	2, 3424, 3425, 7, 339, 2, 2, 3425, 3427, 3, 2, 2, 2, 3426, 3415, 3, 2,
	2, 2, 3426, 3427, 3, 2, 2, 2, 3427, 3429, 3, 2, 2, 2, 3428, 3369, 3, 2,
	2, 2, 3428, 3386, 3, 2, 2, 2, 3428, 3404, 3, 2, 2, 2, 3429, 559, 3, 2,
	2, 2, 3430, 3431, 5, 740, 371, 2, 3431, 561, 3, 2, 2, 2, 3432, 3433, 7,
	130, 2, 2, 3433, 3434, 7, 338, 2, 2, 3434, 3435, 7, 131, 2, 2, 3435, 3436,
	7, 369, 2, 2, 3436, 3437, 7, 132, 2, 2, 3437, 3438, 7, 133, 2, 2, 3438,
	3448, 7, 369, 2, 2, 3439, 3440, 7, 36, 2, 2, 3440, 3445, 5, 708, 355, 2,
	3441, 3442, 7, 336, 2, 2, 3442, 3444, 5, 708, 355, 2, 3443, 3441, 3, 2,
	2, 2, 3444, 3447, 3, 2, 2, 2, 3445, 3443, 3, 2, 2, 2, 3445, 3446, 3, 2,
	2, 2, 3446, 3449, 3, 2, 2, 2, 3447, 3445, 3, 2, 2, 2, 3448, 3439, 3, 2,
	2, 2, 3448, 3449, 3, 2, 2, 2, 3449, 3450, 3, 2, 2, 2, 3450, 3451, 7, 339,
	2, 2, 3451, 563, 3, 2, 2, 2, 3452, 3453, 7, 130, 2, 2, 3453, 3454, 7, 338,
	2, 2, 3454, 3455, 7, 369, 2, 2, 3455, 3456, 9, 19, 2, 2, 3456, 3462, 7,
	339, 2, 2, 3457, 3458, 7, 130, 2, 2, 3458, 3459, 7, 338, 2, 2, 3459, 3460,
	7, 368, 2, 2, 3460, 3462, 7, 339, 2, 2, 3461, 3452, 3, 2, 2, 2, 3461, 3457,
	3, 2, 2, 2, 3462, 565, 3, 2, 2, 2, 3463, 3466, 5, 562, 282, 2, 3464, 3466,
	5, 564, 283, 2, 3465, 3463, 3, 2, 2, 2, 3465, 3464, 3, 2, 2, 2, 3466, 567,
	3, 2, 2, 2, 3467, 3469, 5, 572, 287, 2, 3468, 3470, 5, 294, 148, 2, 3469,
	3468, 3, 2, 2, 2, 3469, 3470, 3, 2, 2, 2, 3470, 3472, 3, 2, 2, 2, 3471,
	3473, 5, 566, 284, 2, 3472, 3471, 3, 2, 2, 2, 3472, 3473, 3, 2, 2, 2, 3473,
	3478, 3, 2, 2, 2, 3474, 3476, 7, 24, 2, 2, 3475, 3474, 3, 2, 2, 2, 3475,
	3476, 3, 2, 2, 2, 3476, 3477, 3, 2, 2, 2, 3477, 3479, 5, 740, 371, 2, 3478,
	3475, 3, 2, 2, 2, 3478, 3479, 3, 2, 2, 2, 3479, 569, 3, 2, 2, 2, 3480,
	3482, 5, 572, 287, 2, 3481, 3483, 5, 566, 284, 2, 3482, 3481, 3, 2, 2,
	2, 3482, 3483, 3, 2, 2, 2, 3483, 3488, 3, 2, 2, 2, 3484, 3486, 7, 24, 2,
	2, 3485, 3484, 3, 2, 2, 2, 3485, 3486, 3, 2, 2, 2, 3486, 3487, 3, 2, 2,
	2, 3487, 3489, 5, 740, 371, 2, 3488, 3485, 3, 2, 2, 2, 3488, 3489, 3, 2,
	2, 2, 3489, 571, 3, 2, 2, 2, 3490, 3491, 5, 740, 371, 2, 3491, 3492, 7,
	334, 2, 2, 3492, 3493, 5, 740, 371, 2, 3493, 3496, 3, 2, 2, 2, 3494, 3496,
	5, 740, 371, 2, 3495, 3490, 3, 2, 2, 2, 3495, 3494, 3, 2, 2, 2, 3496, 573,
	3, 2, 2, 2, 3497, 3498, 5, 740, 371, 2, 3498, 3499, 7, 334, 2, 2, 3499,
	3501, 3, 2, 2, 2, 3500, 3497, 3, 2, 2, 2, 3500, 3501, 3, 2, 2, 2, 3501,
	3502, 3, 2, 2, 2, 3502, 3503, 5, 740, 371, 2, 3503, 575, 3, 2, 2, 2, 3504,
	3505, 7, 338, 2, 2, 3505, 3506, 5, 430, 216, 2, 3506, 3508, 7, 339, 2,
	2, 3507, 3509, 7, 24, 2, 2, 3508, 3507, 3, 2, 2, 2, 3508, 3509, 3, 2, 2,
	2, 3509, 3510, 3, 2, 2, 2, 3510, 3511, 5, 740, 371, 2, 3511, 577, 3, 2,
	2, 2, 3512, 3514, 5, 632, 317, 2, 3513, 3515, 5, 628, 315, 2, 3514, 3513,
	3, 2, 2, 2, 3514, 3515, 3, 2, 2, 2, 3515, 3524, 3, 2, 2, 2, 3516, 3524,
	5, 628, 315, 2, 3517, 3519, 5, 634, 318, 2, 3518, 3520, 5, 636, 319, 2,
	3519, 3518, 3, 2, 2, 2, 3519, 3520, 3, 2, 2, 2, 3520, 3524, 3, 2, 2, 2,
	3521, 3524, 5, 636, 319, 2, 3522, 3524, 5, 630, 316, 2, 3523, 3512, 3,
	2, 2, 2, 3523, 3516, 3, 2, 2, 2, 3523, 3517, 3, 2, 2, 2, 3523, 3521, 3,
	2, 2, 2, 3523, 3522, 3, 2, 2, 2, 3524, 579, 3, 2, 2, 2, 3525, 3529, 5,
	576, 289, 2, 3526, 3529, 5, 568, 285, 2, 3527, 3529, 5, 582, 292, 2, 3528,
	3525, 3, 2, 2, 2, 3528, 3526, 3, 2, 2, 2, 3528, 3527, 3, 2, 2, 2, 3529,
	581, 3, 2, 2, 2, 3530, 3531, 5, 740, 371, 2, 3531, 3532, 7, 338, 2, 2,
	3532, 3533, 7, 36, 2, 2, 3533, 3535, 5, 580, 291, 2, 3534, 3536, 5, 578,
	290, 2, 3535, 3534, 3, 2, 2, 2, 3535, 3536, 3, 2, 2, 2, 3536, 3552, 3,
	2, 2, 2, 3537, 3538, 7, 370, 2, 2, 3538, 3539, 7, 338, 2, 2, 3539, 3540,
	5, 708, 355, 2, 3540, 3549, 7, 339, 2, 2, 3541, 3542, 7, 336, 2, 2, 3542,
	3543, 7, 370, 2, 2, 3543, 3544, 7, 338, 2, 2, 3544, 3545, 5, 708, 355,
	2, 3545, 3546, 7, 339, 2, 2, 3546, 3548, 3, 2, 2, 2, 3547, 3541, 3, 2,
	2, 2, 3548, 3551, 3, 2, 2, 2, 3549, 3547, 3, 2, 2, 2, 3549, 3550, 3, 2,
	2, 2, 3550, 3553, 3, 2, 2, 2, 3551, 3549, 3, 2, 2, 2, 3552, 3537, 3, 2,
	2, 2, 3552, 3553, 3, 2, 2, 2, 3553, 3554, 3, 2, 2, 2, 3554, 3556, 7, 339,
	2, 2, 3555, 3557, 5, 740, 371, 2, 3556, 3555, 3, 2, 2, 2, 3556, 3557, 3,
	2, 2, 2, 3557, 583, 3, 2, 2, 2, 3558, 3559, 7, 22, 2, 2, 3559, 3560, 5,
	586, 294, 2, 3560, 585, 3, 2, 2, 2, 3561, 3562, 5, 708, 355, 2, 3562, 587,
	3, 2, 2, 2, 3563, 3564, 7, 265, 2, 2, 3564, 3565, 5, 590, 296, 2, 3565,
	589, 3, 2, 2, 2, 3566, 3571, 5, 592, 297, 2, 3567, 3568, 7, 336, 2, 2,
	3568, 3570, 5, 592, 297, 2, 3569, 3567, 3, 2, 2, 2, 3570, 3573, 3, 2, 2,
	2, 3571, 3569, 3, 2, 2, 2, 3571, 3572, 3, 2, 2, 2, 3572, 591, 3, 2, 2,
	2, 3573, 3571, 3, 2, 2, 2, 3574, 3575, 5, 616, 309, 2, 3575, 593, 3, 2,
	2, 2, 3576, 3577, 7, 39, 2, 2, 3577, 3578, 7, 338, 2, 2, 3578, 3579, 5,
	588, 295, 2, 3579, 3581, 7, 339, 2, 2, 3580, 3582, 7, 24, 2, 2, 3581, 3580,
	3, 2, 2, 2, 3581, 3582, 3, 2, 2, 2, 3582, 3583, 3, 2, 2, 2, 3583, 3593,
	5, 560, 281, 2, 3584, 3585, 7, 338, 2, 2, 3585, 3590, 5, 740, 371, 2, 3586,
	3587, 7, 336, 2, 2, 3587, 3589, 5, 740, 371, 2, 3588, 3586, 3, 2, 2, 2,
	3589, 3592, 3, 2, 2, 2, 3590, 3588, 3, 2, 2, 2, 3590, 3591, 3, 2, 2, 2,
	3591, 3594, 3, 2, 2, 2, 3592, 3590, 3, 2, 2, 2, 3593, 3584, 3, 2, 2, 2,
	3593, 3594, 3, 2, 2, 2, 3594, 3595, 3, 2, 2, 2, 3595, 3596, 7, 339, 2,
	2, 3596, 595, 3, 2, 2, 2, 3597, 3598, 7, 19, 2, 2, 3598, 3599, 7, 20, 2,
	2, 3599, 3600, 5, 598, 300, 2, 3600, 597, 3, 2, 2, 2, 3601, 3605, 5, 602,
	302, 2, 3602, 3605, 5, 604, 303, 2, 3603, 3605, 5, 600, 301, 2, 3604, 3601,
	3, 2, 2, 2, 3604, 3602, 3, 2, 2, 2, 3604, 3603, 3, 2, 2, 2, 3605, 599,
	3, 2, 2, 2, 3606, 3607, 7, 338, 2, 2, 3607, 3608, 7, 339, 2, 2, 3608, 601,
	3, 2, 2, 2, 3609, 3610, 9, 20, 2, 2, 3610, 3611, 7, 338, 2, 2, 3611, 3616,
	5, 708, 355, 2, 3612, 3613, 7, 336, 2, 2, 3613, 3615, 5, 708, 355, 2, 3614,
	3612, 3, 2, 2, 2, 3615, 3618, 3, 2, 2, 2, 3616, 3614, 3, 2, 2, 2, 3616,
	3617, 3, 2, 2, 2, 3617, 3619, 3, 2, 2, 2, 3618, 3616, 3, 2, 2, 2, 3619,
	3620, 7, 339, 2, 2, 3620, 603, 3, 2, 2, 2, 3621, 3626, 5, 618, 310, 2,
	3622, 3623, 7, 151, 2, 2, 3623, 3627, 7, 230, 2, 2, 3624, 3625, 7, 151,
	2, 2, 3625, 3627, 7, 231, 2, 2, 3626, 3622, 3, 2, 2, 2, 3626, 3624, 3,
	2, 2, 2, 3626, 3627, 3, 2, 2, 2, 3627, 3641, 3, 2, 2, 2, 3628, 3629, 7,
	244, 2, 2, 3629, 3630, 7, 245, 2, 2, 3630, 3631, 7, 338, 2, 2, 3631, 3636,
	5, 606, 304, 2, 3632, 3633, 7, 336, 2, 2, 3633, 3635, 5, 606, 304, 2, 3634,
	3632, 3, 2, 2, 2, 3635, 3638, 3, 2, 2, 2, 3636, 3634, 3, 2, 2, 2, 3636,
	3637, 3, 2, 2, 2, 3637, 3639, 3, 2, 2, 2, 3638, 3636, 3, 2, 2, 2, 3639,
	3640, 7, 339, 2, 2, 3640, 3642, 3, 2, 2, 2, 3641, 3628, 3, 2, 2, 2, 3641,
	3642, 3, 2, 2, 2, 3642, 605, 3, 2, 2, 2, 3643, 3646, 5, 608, 305, 2, 3644,
	3646, 5, 610, 306, 2, 3645, 3643, 3, 2, 2, 2, 3645, 3644, 3, 2, 2, 2, 3646,
	607, 3, 2, 2, 2, 3647, 3649, 7, 338, 2, 2, 3648, 3650, 5, 708, 355, 2,
	3649, 3648, 3, 2, 2, 2, 3649, 3650, 3, 2, 2, 2, 3650, 3655, 3, 2, 2, 2,
	3651, 3652, 7, 336, 2, 2, 3652, 3654, 5, 708, 355, 2, 3653, 3651, 3, 2,
	2, 2, 3654, 3657, 3, 2, 2, 2, 3655, 3653, 3, 2, 2, 2, 3655, 3656, 3, 2,
	2, 2, 3656, 3658, 3, 2, 2, 2, 3657, 3655, 3, 2, 2, 2, 3658, 3659, 7, 339,
	2, 2, 3659, 609, 3, 2, 2, 2, 3660, 3661, 5, 708, 355, 2, 3661, 611, 3,
	2, 2, 2, 3662, 3663, 7, 21, 2, 2, 3663, 3664, 5, 614, 308, 2, 3664, 613,
	3, 2, 2, 2, 3665, 3666, 5, 708, 355, 2, 3666, 615, 3, 2, 2, 2, 3667, 3668,
	7, 338, 2, 2, 3668, 3669, 5, 618, 310, 2, 3669, 3670, 7, 339, 2, 2, 3670,
	617, 3, 2, 2, 2, 3671, 3673, 5, 708, 355, 2, 3672, 3674, 5, 620, 311, 2,
	3673, 3672, 3, 2, 2, 2, 3673, 3674, 3, 2, 2, 2, 3674, 619, 3, 2, 2, 2,
	3675, 3676, 7, 336, 2, 2, 3676, 3678, 5, 708, 355, 2, 3677, 3675, 3, 2,
	2, 2, 3678, 3679, 3, 2, 2, 2, 3679, 3677, 3, 2, 2, 2, 3679, 3680, 3, 2,
	2, 2, 3680, 621, 3, 2, 2, 2, 3681, 3684, 5, 616, 309, 2, 3682, 3684, 5,
	618, 310, 2, 3683, 3681, 3, 2, 2, 2, 3683, 3682, 3, 2, 2, 2, 3684, 623,
	3, 2, 2, 2, 3685, 3686, 7, 338, 2, 2, 3686, 3691, 5, 378, 190, 2, 3687,
	3688, 7, 336, 2, 2, 3688, 3690, 5, 378, 190, 2, 3689, 3687, 3, 2, 2, 2,
	3690, 3693, 3, 2, 2, 2, 3691, 3689, 3, 2, 2, 2, 3691, 3692, 3, 2, 2, 2,
	3692, 3694, 3, 2, 2, 2, 3693, 3691, 3, 2, 2, 2, 3694, 3695, 7, 339, 2,
	2, 3695, 625, 3, 2, 2, 2, 3696, 3701, 5, 378, 190, 2, 3697, 3698, 7, 336,
	2, 2, 3698, 3700, 5, 378, 190, 2, 3699, 3697, 3, 2, 2, 2, 3700, 3703, 3,
	2, 2, 2, 3701, 3699, 3, 2, 2, 2, 3701, 3702, 3, 2, 2, 2, 3702, 627, 3,
	2, 2, 2, 3703, 3701, 3, 2, 2, 2, 3704, 3705, 7, 18, 2, 2, 3705, 3706, 7,
	20, 2, 2, 3706, 3711, 5, 378, 190, 2, 3707, 3708, 7, 336, 2, 2, 3708, 3710,
	5, 378, 190, 2, 3709, 3707, 3, 2, 2, 2, 3710, 3713, 3, 2, 2, 2, 3711, 3709,
	3, 2, 2, 2, 3711, 3712, 3, 2, 2, 2, 3712, 629, 3, 2, 2, 2, 3713, 3711,
	3, 2, 2, 2, 3714, 3715, 7, 53, 2, 2, 3715, 3716, 7, 20, 2, 2, 3716, 3717,
	5, 622, 312, 2, 3717, 631, 3, 2, 2, 2, 3718, 3719, 7, 37, 2, 2, 3719, 3720,
	7, 20, 2, 2, 3720, 3721, 5, 622, 312, 2, 3721, 633, 3, 2, 2, 2, 3722, 3723,
	7, 54, 2, 2, 3723, 3724, 7, 20, 2, 2, 3724, 3725, 5, 622, 312, 2, 3725,
	635, 3, 2, 2, 2, 3726, 3727, 7, 55, 2, 2, 3727, 3730, 7, 20, 2, 2, 3728,
	3731, 5, 624, 313, 2, 3729, 3731, 5, 626, 314, 2, 3730, 3728, 3, 2, 2,
	2, 3730, 3729, 3, 2, 2, 2, 3731, 637, 3, 2, 2, 2, 3732, 3733, 5, 640, 321,
	2, 3733, 3748, 7, 338, 2, 2, 3734, 3749, 7, 354, 2, 2, 3735, 3737, 9, 17,
	2, 2, 3736, 3735, 3, 2, 2, 2, 3736, 3737, 3, 2, 2, 2, 3737, 3746, 3, 2,
	2, 2, 3738, 3743, 5, 512, 257, 2, 3739, 3740, 7, 336, 2, 2, 3740, 3742,
	5, 512, 257, 2, 3741, 3739, 3, 2, 2, 2, 3742, 3745, 3, 2, 2, 2, 3743, 3741,
	3, 2, 2, 2, 3743, 3744, 3, 2, 2, 2, 3744, 3747, 3, 2, 2, 2, 3745, 3743,
	3, 2, 2, 2, 3746, 3738, 3, 2, 2, 2, 3746, 3747, 3, 2, 2, 2, 3747, 3749,
	3, 2, 2, 2, 3748, 3734, 3, 2, 2, 2, 3748, 3736, 3, 2, 2, 2, 3749, 3750,
	3, 2, 2, 2, 3750, 3753, 7, 339, 2, 2, 3751, 3752, 7, 243, 2, 2, 3752, 3754,
	5, 520, 261, 2, 3753, 3751, 3, 2, 2, 2, 3753, 3754, 3, 2, 2, 2, 3754, 639,
	3, 2, 2, 2, 3755, 3758, 5, 742, 372, 2, 3756, 3758, 5, 748, 375, 2, 3757,
	3755, 3, 2, 2, 2, 3757, 3756, 3, 2, 2, 2, 3758, 641, 3, 2, 2, 2, 3759,
	3760, 7, 135, 2, 2, 3760, 3761, 7, 338, 2, 2, 3761, 3762, 5, 708, 355,
	2, 3762, 3763, 7, 24, 2, 2, 3763, 3764, 5, 418, 210, 2, 3764, 3765, 7,
	339, 2, 2, 3765, 643, 3, 2, 2, 2, 3766, 3767, 7, 164, 2, 2, 3767, 3773,
	5, 708, 355, 2, 3768, 3769, 7, 165, 2, 2, 3769, 3770, 5, 708, 355, 2, 3770,
	3771, 7, 166, 2, 2, 3771, 3772, 5, 708, 355, 2, 3772, 3774, 3, 2, 2, 2,
	3773, 3768, 3, 2, 2, 2, 3774, 3775, 3, 2, 2, 2, 3775, 3773, 3, 2, 2, 2,
	3775, 3776, 3, 2, 2, 2, 3776, 3779, 3, 2, 2, 2, 3777, 3778, 7, 167, 2,
	2, 3778, 3780, 5, 708, 355, 2, 3779, 3777, 3, 2, 2, 2, 3779, 3780, 3, 2,
	2, 2, 3780, 3781, 3, 2, 2, 2, 3781, 3782, 7, 168, 2, 2, 3782, 645, 3, 2,
	2, 2, 3783, 3789, 7, 164, 2, 2, 3784, 3785, 7, 165, 2, 2, 3785, 3786, 5,
	708, 355, 2, 3786, 3787, 7, 166, 2, 2, 3787, 3788, 5, 708, 355, 2, 3788,
	3790, 3, 2, 2, 2, 3789, 3784, 3, 2, 2, 2, 3790, 3791, 3, 2, 2, 2, 3791,
	3789, 3, 2, 2, 2, 3791, 3792, 3, 2, 2, 2, 3792, 3795, 3, 2, 2, 2, 3793,
	3794, 7, 167, 2, 2, 3794, 3796, 5, 708, 355, 2, 3795, 3793, 3, 2, 2, 2,
	3795, 3796, 3, 2, 2, 2, 3796, 3797, 3, 2, 2, 2, 3797, 3798, 7, 168, 2,
	2, 3798, 647, 3, 2, 2, 2, 3799, 3800, 7, 302, 2, 2, 3800, 3801, 7, 338,
	2, 2, 3801, 3804, 5, 708, 355, 2, 3802, 3803, 7, 77, 2, 2, 3803, 3805,
	5, 650, 326, 2, 3804, 3802, 3, 2, 2, 2, 3804, 3805, 3, 2, 2, 2, 3805, 3806,
	3, 2, 2, 2, 3806, 3807, 7, 339, 2, 2, 3807, 649, 3, 2, 2, 2, 3808, 3809,
	9, 21, 2, 2, 3809, 651, 3, 2, 2, 2, 3810, 3811, 7, 301, 2, 2, 3811, 3812,
	7, 338, 2, 2, 3812, 3813, 5, 654, 328, 2, 3813, 3814, 7, 23, 2, 2, 3814,
	3815, 5, 708, 355, 2, 3815, 3816, 7, 339, 2, 2, 3816, 653, 3, 2, 2, 2,
	3817, 3818, 9, 22, 2, 2, 3818, 655, 3, 2, 2, 2, 3819, 3832, 5, 670, 336,
	2, 3820, 3832, 7, 369, 2, 2, 3821, 3832, 5, 662, 332, 2, 3822, 3832, 5,
	664, 333, 2, 3823, 3832, 5, 666, 334, 2, 3824, 3832, 7, 364, 2, 2, 3825,
	3832, 5, 658, 330, 2, 3826, 3832, 7, 366, 2, 2, 3827, 3832, 7, 367, 2,
	2, 3828, 3832, 5, 660, 331, 2, 3829, 3832, 5, 720, 361, 2, 3830, 3832,
	7, 66, 2, 2, 3831, 3819, 3, 2, 2, 2, 3831, 3820, 3, 2, 2, 2, 3831, 3821,
	3, 2, 2, 2, 3831, 3822, 3, 2, 2, 2, 3831, 3823, 3, 2, 2, 2, 3831, 3824,
	3, 2, 2, 2, 3831, 3825, 3, 2, 2, 2, 3831, 3826, 3, 2, 2, 2, 3831, 3827,
	3, 2, 2, 2, 3831, 3828, 3, 2, 2, 2, 3831, 3829, 3, 2, 2, 2, 3831, 3830,
	3, 2, 2, 2, 3832, 657, 3, 2, 2, 2, 3833, 3835, 7, 364, 2, 2, 3834, 3836,
	7, 364, 2, 2, 3835, 3834, 3, 2, 2, 2, 3836, 3837, 3, 2, 2, 2, 3837, 3835,
	3, 2, 2, 2, 3837, 3838, 3, 2, 2, 2, 3838, 659, 3, 2, 2, 2, 3839, 3840,
	7, 372, 2, 2, 3840, 3841, 7, 365, 2, 2, 3841, 661, 3, 2, 2, 2, 3842, 3843,
	7, 87, 2, 2, 3843, 3846, 7, 364, 2, 2, 3844, 3846, 7, 239, 2, 2, 3845,
	3842, 3, 2, 2, 2, 3845, 3844, 3, 2, 2, 2, 3846, 663, 3, 2, 2, 2, 3847,
	3848, 7, 89, 2, 2, 3848, 3851, 7, 364, 2, 2, 3849, 3851, 7, 240, 2, 2,
	3850, 3847, 3, 2, 2, 2, 3850, 3849, 3, 2, 2, 2, 3851, 665, 3, 2, 2, 2,
	3852, 3853, 7, 90, 2, 2, 3853, 3854, 7, 364, 2, 2, 3854, 667, 3, 2, 2,
	2, 3855, 3856, 9, 23, 2, 2, 3856, 669, 3, 2, 2, 2, 3857, 3858, 5, 668,
	335, 2, 3858, 3859, 5, 674, 338, 2, 3859, 671, 3, 2, 2, 2, 3860, 3861,
	7, 338, 2, 2, 3861, 3862, 5, 668, 335, 2, 3862, 3863, 7, 339, 2, 2, 3863,
	3864, 5, 674, 338, 2, 3864, 3876, 3, 2, 2, 2, 3865, 3866, 7, 93, 2, 2,
	3866, 3867, 5, 668, 335, 2, 3867, 3868, 5, 674, 338, 2, 3868, 3876, 3,
	2, 2, 2, 3869, 3870, 7, 93, 2, 2, 3870, 3871, 7, 338, 2, 2, 3871, 3872,
	5, 708, 355, 2, 3872, 3873, 7, 339, 2, 2, 3873, 3874, 5, 674, 338, 2, 3874,
	3876, 3, 2, 2, 2, 3875, 3860, 3, 2, 2, 2, 3875, 3865, 3, 2, 2, 2, 3875,
	3869, 3, 2, 2, 2, 3876, 673, 3, 2, 2, 2, 3877, 3878, 7, 267, 2, 2, 3878,
	3879, 7, 77, 2, 2, 3879, 3890, 7, 270, 2, 2, 3880, 3881, 7, 272, 2, 2,
	3881, 3882, 7, 77, 2, 2, 3882, 3890, 7, 276, 2, 2, 3883, 3890, 7, 267,
	2, 2, 3884, 3890, 7, 270, 2, 2, 3885, 3890, 7, 272, 2, 2, 3886, 3890, 7,
	274, 2, 2, 3887, 3890, 7, 275, 2, 2, 3888, 3890, 7, 276, 2, 2, 3889, 3877,
	3, 2, 2, 2, 3889, 3880, 3, 2, 2, 2, 3889, 3883, 3, 2, 2, 2, 3889, 3884,
	3, 2, 2, 2, 3889, 3885, 3, 2, 2, 2, 3889, 3886, 3, 2, 2, 2, 3889, 3887,
	3, 2, 2, 2, 3889, 3888, 3, 2, 2, 2, 3890, 675, 3, 2, 2, 2, 3891, 3903,
	5, 656, 329, 2, 3892, 3903, 5, 672, 337, 2, 3893, 3903, 5, 642, 322, 2,
	3894, 3903, 5, 652, 327, 2, 3895, 3903, 5, 648, 325, 2, 3896, 3903, 5,
	644, 323, 2, 3897, 3903, 5, 646, 324, 2, 3898, 3903, 5, 710, 356, 2, 3899,
	3903, 5, 638, 320, 2, 3900, 3903, 5, 534, 268, 2, 3901, 3903, 5, 616, 309,
	2, 3902, 3891, 3, 2, 2, 2, 3902, 3892, 3, 2, 2, 2, 3902, 3893, 3, 2, 2,
	2, 3902, 3894, 3, 2, 2, 2, 3902, 3895, 3, 2, 2, 2, 3902, 3896, 3, 2, 2,
	2, 3902, 3897, 3, 2, 2, 2, 3902, 3898, 3, 2, 2, 2, 3902, 3899, 3, 2, 2,
	2, 3902, 3900, 3, 2, 2, 2, 3902, 3901, 3, 2, 2, 2, 3903, 677, 3, 2, 2,
	2, 3904, 3905, 9, 24, 2, 2, 3905, 679, 3, 2, 2, 2, 3906, 3916, 7, 66, 2,
	2, 3907, 3916, 7, 3, 2, 2, 3908, 3916, 7, 4, 2, 2, 3909, 3910, 7, 9, 2,
	2, 3910, 3916, 7, 66, 2, 2, 3911, 3912, 7, 9, 2, 2, 3912, 3916, 7, 3, 2,
	2, 3913, 3914, 7, 9, 2, 2, 3914, 3916, 7, 4, 2, 2, 3915, 3906, 3, 2, 2,
	2, 3915, 3907, 3, 2, 2, 2, 3915, 3908, 3, 2, 2, 2, 3915, 3909, 3, 2, 2,
	2, 3915, 3911, 3, 2, 2, 2, 3915, 3913, 3, 2, 2, 2, 3916, 681, 3, 2, 2,
	2, 3917, 3918, 7, 361, 2, 2, 3918, 683, 3, 2, 2, 2, 3919, 3920, 9, 25,
	2, 2, 3920, 685, 3, 2, 2, 2, 3921, 3922, 9, 26, 2, 2, 3922, 687, 3, 2,
	2, 2, 3923, 3924, 7, 360, 2, 2, 3924, 689, 3, 2, 2, 2, 3925, 3926, 7, 357,
	2, 2, 3926, 691, 3, 2, 2, 2, 3927, 3928, 7, 359, 2, 2, 3928, 693, 3, 2,
	2, 2, 3929, 3930, 9, 27, 2, 2, 3930, 695, 3, 2, 2, 2, 3931, 3937, 5, 694,
	348, 2, 3932, 3937, 7, 347, 2, 2, 3933, 3937, 7, 348, 2, 2, 3934, 3937,
	7, 349, 2, 2, 3935, 3937, 7, 350, 2, 2, 3936, 3931, 3, 2, 2, 2, 3936, 3932,
	3, 2, 2, 2, 3936, 3933, 3, 2, 2, 2, 3936, 3934, 3, 2, 2, 2, 3936, 3935,
	3, 2, 2, 2, 3937, 697, 3, 2, 2, 2, 3938, 3939, 7, 65, 2, 2, 3939, 3940,
	7, 26, 2, 2, 3940, 3941, 7, 23, 2, 2, 3941, 699, 3, 2, 2, 2, 3942, 3950,
	7, 344, 2, 2, 3943, 3950, 7, 345, 2, 2, 3944, 3950, 7, 346, 2, 2, 3945,
	3946, 7, 65, 2, 2, 3946, 3947, 7, 9, 2, 2, 3947, 3948, 7, 26, 2, 2, 3948,
	3950, 7, 23, 2, 2, 3949, 3942, 3, 2, 2, 2, 3949, 3943, 3, 2, 2, 2, 3949,
	3944, 3, 2, 2, 2, 3949, 3945, 3, 2, 2, 2, 3950, 701, 3, 2, 2, 2, 3951,
	3952, 7, 9, 2, 2, 3952, 703, 3, 2, 2, 2, 3953, 3954, 7, 7, 2, 2, 3954,
	705, 3, 2, 2, 2, 3955, 3956, 7, 8, 2, 2, 3956, 707, 3, 2, 2, 2, 3957, 3958,
	8, 355, 1, 2, 3958, 3967, 5, 676, 339, 2, 3959, 3960, 7, 340, 2, 2, 3960,
	3961, 5, 708, 355, 2, 3961, 3962, 7, 341, 2, 2, 3962, 3966, 3, 2, 2, 2,
	3963, 3964, 7, 334, 2, 2, 3964, 3966, 5, 740, 371, 2, 3965, 3959, 3, 2,
	2, 2, 3965, 3963, 3, 2, 2, 2, 3966, 3969, 3, 2, 2, 2, 3967, 3965, 3, 2,
	2, 2, 3967, 3968, 3, 2, 2, 2, 3968, 3983, 3, 2, 2, 2, 3969, 3967, 3, 2,
	2, 2, 3970, 3971, 5, 678, 340, 2, 3971, 3972, 5, 708, 355, 17, 3972, 3983,
	3, 2, 2, 2, 3973, 3974, 7, 13, 2, 2, 3974, 3983, 5, 710, 356, 2, 3975,
	3976, 5, 702, 352, 2, 3976, 3977, 5, 708, 355, 6, 3977, 3983, 3, 2, 2,
	2, 3978, 3979, 7, 338, 2, 2, 3979, 3980, 5, 708, 355, 2, 3980, 3981, 7,
	339, 2, 2, 3981, 3983, 3, 2, 2, 2, 3982, 3957, 3, 2, 2, 2, 3982, 3970,
	3, 2, 2, 2, 3982, 3973, 3, 2, 2, 2, 3982, 3975, 3, 2, 2, 2, 3982, 3978,
	3, 2, 2, 2, 3983, 4030, 3, 2, 2, 2, 3984, 3985, 12, 15, 2, 2, 3985, 3986,
	5, 682, 342, 2, 3986, 3987, 5, 708, 355, 16, 3987, 4029, 3, 2, 2, 2, 3988,
	3989, 12, 14, 2, 2, 3989, 3990, 5, 684, 343, 2, 3990, 3991, 5, 708, 355,
	15, 3991, 4029, 3, 2, 2, 2, 3992, 3993, 12, 13, 2, 2, 3993, 3994, 5, 686,
	344, 2, 3994, 3995, 5, 708, 355, 14, 3995, 4029, 3, 2, 2, 2, 3996, 3997,
	12, 12, 2, 2, 3997, 3998, 5, 688, 345, 2, 3998, 3999, 5, 708, 355, 13,
	3999, 4029, 3, 2, 2, 2, 4000, 4001, 12, 11, 2, 2, 4001, 4002, 5, 690, 346,
	2, 4002, 4003, 5, 708, 355, 12, 4003, 4029, 3, 2, 2, 2, 4004, 4005, 12,
	10, 2, 2, 4005, 4006, 5, 692, 347, 2, 4006, 4007, 5, 708, 355, 11, 4007,
	4029, 3, 2, 2, 2, 4008, 4011, 12, 7, 2, 2, 4009, 4012, 5, 700, 351, 2,
	4010, 4012, 5, 698, 350, 2, 4011, 4009, 3, 2, 2, 2, 4011, 4010, 3, 2, 2,
	2, 4012, 4013, 3, 2, 2, 2, 4013, 4014, 5, 708, 355, 8, 4014, 4029, 3, 2,
	2, 2, 4015, 4016, 12, 5, 2, 2, 4016, 4017, 5, 704, 353, 2, 4017, 4018,
	5, 708, 355, 6, 4018, 4029, 3, 2, 2, 2, 4019, 4020, 12, 4, 2, 2, 4020,
	4021, 5, 706, 354, 2, 4021, 4022, 5, 708, 355, 5, 4022, 4029, 3, 2, 2,
	2, 4023, 4024, 12, 16, 2, 2, 4024, 4025, 7, 65, 2, 2, 4025, 4029, 5, 680,
	341, 2, 4026, 4027, 12, 9, 2, 2, 4027, 4029, 5, 712, 357, 2, 4028, 3984,
	3, 2, 2, 2, 4028, 3988, 3, 2, 2, 2, 4028, 3992, 3, 2, 2, 2, 4028, 3996,
	3, 2, 2, 2, 4028, 4000, 3, 2, 2, 2, 4028, 4004, 3, 2, 2, 2, 4028, 4008,
	3, 2, 2, 2, 4028, 4015, 3, 2, 2, 2, 4028, 4019, 3, 2, 2, 2, 4028, 4023,
	3, 2, 2, 2, 4028, 4026, 3, 2, 2, 2, 4029, 4032, 3, 2, 2, 2, 4030, 4028,
	3, 2, 2, 2, 4030, 4031, 3, 2, 2, 2, 4031, 709, 3, 2, 2, 2, 4032, 4030,
	3, 2, 2, 2, 4033, 4034, 7, 338, 2, 2, 4034, 4035, 5, 446, 224, 2, 4035,
	4036, 7, 339, 2, 2, 4036, 711, 3, 2, 2, 2, 4037, 4038, 5, 696, 349, 2,
	4038, 4039, 5, 708, 355, 2, 4039, 4044, 3, 2, 2, 2, 4040, 4044, 5, 714,
	358, 2, 4041, 4042, 7, 9, 2, 2, 4042, 4044, 5, 718, 360, 2, 4043, 4037,
	3, 2, 2, 2, 4043, 4040, 3, 2, 2, 2, 4043, 4041, 3, 2, 2, 2, 4044, 713,
	3, 2, 2, 2, 4045, 4046, 7, 182, 2, 2, 4046, 4059, 5, 716, 359, 2, 4047,
	4048, 7, 206, 2, 2, 4048, 4049, 5, 708, 355, 2, 4049, 4050, 7, 7, 2, 2,
	4050, 4051, 5, 708, 355, 2, 4051, 4059, 3, 2, 2, 2, 4052, 4053, 7, 10,
	2, 2, 4053, 4054, 7, 11, 2, 2, 4054, 4059, 5, 616, 309, 2, 4055, 4056,
	7, 10, 2, 2, 4056, 4057, 7, 5, 2, 2, 4057, 4059, 5, 616, 309, 2, 4058,
	4045, 3, 2, 2, 2, 4058, 4047, 3, 2, 2, 2, 4058, 4052, 3, 2, 2, 2, 4058,
	4055, 3, 2, 2, 2, 4059, 715, 3, 2, 2, 2, 4060, 4063, 5, 710, 356, 2, 4061,
	4063, 5, 616, 309, 2, 4062, 4060, 3, 2, 2, 2, 4062, 4061, 3, 2, 2, 2, 4063,
	717, 3, 2, 2, 2, 4064, 4065, 5, 694, 348, 2, 4065, 4066, 5, 708, 355, 2,
	4066, 4069, 3, 2, 2, 2, 4067, 4069, 5, 714, 358, 2, 4068, 4064, 3, 2, 2,
	2, 4068, 4067, 3, 2, 2, 2, 4069, 719, 3, 2, 2, 2, 4070, 4071, 9, 28, 2,
	2, 4071, 721, 3, 2, 2, 2, 4072, 4073, 9, 28, 2, 2, 4073, 723, 3, 2, 2,
	2, 4074, 4076, 5, 572, 287, 2, 4075, 4077, 5, 726, 364, 2, 4076, 4075,
	3, 2, 2, 2, 4076, 4077, 3, 2, 2, 2, 4077, 725, 3, 2, 2, 2, 4078, 4079,
	7, 37, 2, 2, 4079, 4080, 7, 338, 2, 2, 4080, 4085, 5, 728, 365, 2, 4081,
	4082, 7, 336, 2, 2, 4082, 4084, 5, 728, 365, 2, 4083, 4081, 3, 2, 2, 2,
	4084, 4087, 3, 2, 2, 2, 4085, 4083, 3, 2, 2, 2, 4085, 4086, 3, 2, 2, 2,
	4086, 4088, 3, 2, 2, 2, 4087, 4085, 3, 2, 2, 2, 4088, 4089, 7, 339, 2,
	2, 4089, 727, 3, 2, 2, 2, 4090, 4093, 5, 740, 371, 2, 4091, 4092, 7, 344,
	2, 2, 4092, 4094, 5, 656, 329, 2, 4093, 4091, 3, 2, 2, 2, 4093, 4094, 3,
	2, 2, 2, 4094, 729, 3, 2, 2, 2, 4095, 4096, 7, 37, 2, 2, 4096, 4097, 7,
	338, 2, 2, 4097, 4102, 5, 732, 367, 2, 4098, 4099, 7, 336, 2, 2, 4099,
	4101, 5, 732, 367, 2, 4100, 4098, 3, 2, 2, 2, 4101, 4104, 3, 2, 2, 2, 4102,
	4100, 3, 2, 2, 2, 4102, 4103, 3, 2, 2, 2, 4103, 4105, 3, 2, 2, 2, 4104,
	4102, 3, 2, 2, 2, 4105, 4106, 7, 339, 2, 2, 4106, 731, 3, 2, 2, 2, 4107,
	4108, 5, 740, 371, 2, 4108, 4109, 5, 734, 368, 2, 4109, 4110, 5, 656, 329,
	2, 4110, 733, 3, 2, 2, 2, 4111, 4112, 9, 29, 2, 2, 4112, 735, 3, 2, 2,
	2, 4113, 4114, 9, 30, 2, 2, 4114, 737, 3, 2, 2, 2, 4115, 4119, 5, 736,
	369, 2, 4116, 4119, 7, 364, 2, 2, 4117, 4119, 5, 742, 372, 2, 4118, 4115,
	3, 2, 2, 2, 4118, 4116, 3, 2, 2, 2, 4118, 4117, 3, 2, 2, 2, 4119, 739,
	3, 2, 2, 2, 4120, 4123, 7, 370, 2, 2, 4121, 4123, 5, 746, 374, 2, 4122,
	4120, 3, 2, 2, 2, 4122, 4121, 3, 2, 2, 2, 4123, 741, 3, 2, 2, 2, 4124,
	4125, 5, 740, 371, 2, 4125, 4126, 7, 334, 2, 2, 4126, 4127, 5, 740, 371,
	2, 4127, 4130, 3, 2, 2, 2, 4128, 4130, 5, 740, 371, 2, 4129, 4124, 3, 2,
	2, 2, 4129, 4128, 3, 2, 2, 2, 4130, 743, 3, 2, 2, 2, 4131, 4134, 5, 740,
	371, 2, 4132, 4134, 7, 371, 2, 2, 4133, 4131, 3, 2, 2, 2, 4133, 4132, 3,
	2, 2, 2, 4134, 745, 3, 2, 2, 2, 4135, 4136, 9, 31, 2, 2, 4136, 747, 3,
	2, 2, 2, 4137, 4138, 9, 32, 2, 2, 4138, 749, 3, 2, 2, 2, 4139, 4154, 5,
	760, 381, 2, 4140, 4154, 5, 772, 387, 2, 4141, 4154, 5, 778, 390, 2, 4142,
	4154, 5, 774, 388, 2, 4143, 4154, 5, 776, 389, 2, 4144, 4154, 5, 800, 401,
	2, 4145, 4154, 5, 802, 402, 2, 4146, 4154, 5, 804, 403, 2, 4147, 4154,
	5, 810, 406, 2, 4148, 4154, 5, 812, 407, 2, 4149, 4154, 5, 814, 408, 2,
	4150, 4154, 5, 816, 409, 2, 4151, 4154, 5, 818, 410, 2, 4152, 4154, 5,
	820, 411, 2, 4153, 4139, 3, 2, 2, 2, 4153, 4140, 3, 2, 2, 2, 4153, 4141,
	3, 2, 2, 2, 4153, 4142, 3, 2, 2, 2, 4153, 4143, 3, 2, 2, 2, 4153, 4144,
	3, 2, 2, 2, 4153, 4145, 3, 2, 2, 2, 4153, 4146, 3, 2, 2, 2, 4153, 4147,
	3, 2, 2, 2, 4153, 4148, 3, 2, 2, 2, 4153, 4149, 3, 2, 2, 2, 4153, 4150,
	3, 2, 2, 2, 4153, 4151, 3, 2, 2, 2, 4153, 4152, 3, 2, 2, 2, 4154, 751,
	3, 2, 2, 2, 4155, 4156, 7, 316, 2, 2, 4156, 4157, 7, 344, 2, 2, 4157, 4163,
	7, 369, 2, 2, 4158, 4159, 7, 319, 2, 2, 4159, 4160, 7, 321, 2, 2, 4160,
	4161, 7, 344, 2, 2, 4161, 4163, 5, 780, 391, 2, 4162, 4155, 3, 2, 2, 2,
	4162, 4158, 3, 2, 2, 2, 4163, 753, 3, 2, 2, 2, 4164, 4169, 5, 752, 377,
	2, 4165, 4166, 7, 336, 2, 2, 4166, 4168, 5, 752, 377, 2, 4167, 4165, 3,
	2, 2, 2, 4168, 4171, 3, 2, 2, 2, 4169, 4167, 3, 2, 2, 2, 4169, 4170, 3,
	2, 2, 2, 4170, 755, 3, 2, 2, 2, 4171, 4169, 3, 2, 2, 2, 4172, 4176, 7,
	316, 2, 2, 4173, 4174, 7, 319, 2, 2, 4174, 4176, 7, 321, 2, 2, 4175, 4172,
	3, 2, 2, 2, 4175, 4173, 3, 2, 2, 2, 4176, 757, 3, 2, 2, 2, 4177, 4182,
	5, 756, 379, 2, 4178, 4179, 7, 336, 2, 2, 4179, 4181, 5, 756, 379, 2, 4180,
	4178, 3, 2, 2, 2, 4181, 4184, 3, 2, 2, 2, 4182, 4180, 3, 2, 2, 2, 4182,
	4183, 3, 2, 2, 2, 4183, 759, 3, 2, 2, 2, 4184, 4182, 3, 2, 2, 2, 4185,
	4186, 7, 67, 2, 2, 4186, 4187, 7, 314, 2, 2, 4187, 4197, 7, 315, 2, 2,
	4188, 4189, 5, 740, 371, 2, 4189, 4190, 7, 10, 2, 2, 4190, 4191, 5, 740,
	371, 2, 4191, 4198, 3, 2, 2, 2, 4192, 4195, 5, 740, 371, 2, 4193, 4194,
	7, 151, 2, 2, 4194, 4196, 5, 754, 378, 2, 4195, 4193, 3, 2, 2, 2, 4195,
	4196, 3, 2, 2, 2, 4196, 4198, 3, 2, 2, 2, 4197, 4188, 3, 2, 2, 2, 4197,
	4192, 3, 2, 2, 2, 4198, 761, 3, 2, 2, 2, 4199, 4200, 7, 151, 2, 2, 4200,
	4201, 7, 137, 2, 2, 4201, 763, 3, 2, 2, 2, 4202, 4204, 7, 318, 2, 2, 4203,
	4205, 5, 762, 382, 2, 4204, 4203, 3, 2, 2, 2, 4204, 4205, 3, 2, 2, 2, 4205,
	765, 3, 2, 2, 2, 4206, 4207, 7, 127, 2, 2, 4207, 767, 3, 2, 2, 2, 4208,
	4209, 7, 128, 2, 2, 4209, 769, 3, 2, 2, 2, 4210, 4211, 7, 331, 2, 2, 4211,
	771, 3, 2, 2, 2, 4212, 4213, 7, 69, 2, 2, 4213, 4214, 7, 314, 2, 2, 4214,
	4215, 7, 315, 2, 2, 4215, 4235, 5, 740, 371, 2, 4216, 4236, 7, 294, 2,
	2, 4217, 4236, 7, 128, 2, 2, 4218, 4219, 7, 157, 2, 2, 4219, 4236, 5, 754,
	378, 2, 4220, 4221, 7, 158, 2, 2, 4221, 4236, 5, 758, 380, 2, 4222, 4223,
	7, 76, 2, 2, 4223, 4224, 7, 77, 2, 2, 4224, 4236, 5, 740, 371, 2, 4225,
	4227, 5, 764, 383, 2, 4226, 4228, 5, 766, 384, 2, 4227, 4226, 3, 2, 2,
	2, 4227, 4228, 3, 2, 2, 2, 4228, 4234, 3, 2, 2, 2, 4229, 4231, 5, 766,
	384, 2, 4230, 4232, 5, 764, 383, 2, 4231, 4230, 3, 2, 2, 2, 4231, 4232,
	3, 2, 2, 2, 4232, 4234, 3, 2, 2, 2, 4233, 4225, 3, 2, 2, 2, 4233, 4229,
	3, 2, 2, 2, 4234, 4236, 3, 2, 2, 2, 4235, 4216, 3, 2, 2, 2, 4235, 4217,
	3, 2, 2, 2, 4235, 4218, 3, 2, 2, 2, 4235, 4220, 3, 2, 2, 2, 4235, 4222,
	3, 2, 2, 2, 4235, 4233, 3, 2, 2, 2, 4236, 773, 3, 2, 2, 2, 4237, 4240,
	5, 766, 384, 2, 4238, 4240, 5, 768, 385, 2, 4239, 4237, 3, 2, 2, 2, 4239,
	4238, 3, 2, 2, 2, 4240, 4241, 3, 2, 2, 2, 4241, 4242, 7, 328, 2, 2, 4242,
	4243, 7, 329, 2, 2, 4243, 775, 3, 2, 2, 2, 4244, 4256, 7, 137, 2, 2, 4245,
	4246, 7, 330, 2, 2, 4246, 4247, 7, 314, 2, 2, 4247, 4248, 7, 315, 2, 2,
	4248, 4249, 7, 151, 2, 2, 4249, 4257, 5, 740, 371, 2, 4250, 4251, 7, 314,
	2, 2, 4251, 4252, 7, 315, 2, 2, 4252, 4253, 5, 740, 371, 2, 4253, 4254,
	7, 151, 2, 2, 4254, 4255, 5, 740, 371, 2, 4255, 4257, 3, 2, 2, 2, 4256,
	4245, 3, 2, 2, 2, 4256, 4250, 3, 2, 2, 2, 4257, 777, 3, 2, 2, 2, 4258,
	4259, 7, 75, 2, 2, 4259, 4260, 7, 314, 2, 2, 4260, 4261, 7, 315, 2, 2,
	4261, 4262, 5, 740, 371, 2, 4262, 779, 3, 2, 2, 2, 4263, 4268, 5, 740,
	371, 2, 4264, 4265, 7, 334, 2, 2, 4265, 4267, 5, 740, 371, 2, 4266, 4264,
	3, 2, 2, 2, 4267, 4270, 3, 2, 2, 2, 4268, 4266, 3, 2, 2, 2, 4268, 4269,
	3, 2, 2, 2, 4269, 781, 3, 2, 2, 2, 4270, 4268, 3, 2, 2, 2, 4271, 4272,
	5, 790, 396, 2, 4272, 783, 3, 2, 2, 2, 4273, 4274, 5, 782, 392, 2, 4274,
	4275, 7, 2, 2, 3, 4275, 785, 3, 2, 2, 2, 4276, 4281, 5, 788, 395, 2, 4277,
	4278, 7, 8, 2, 2, 4278, 4280, 5, 788, 395, 2, 4279, 4277, 3, 2, 2, 2, 4280,
	4283, 3, 2, 2, 2, 4281, 4279, 3, 2, 2, 2, 4281, 4282, 3, 2, 2, 2, 4282,
	787, 3, 2, 2, 2, 4283, 4281, 3, 2, 2, 2, 4284, 4289, 5, 790, 396, 2, 4285,
	4286, 7, 7, 2, 2, 4286, 4288, 5, 790, 396, 2, 4287, 4285, 3, 2, 2, 2, 4288,
	4291, 3, 2, 2, 2, 4289, 4287, 3, 2, 2, 2, 4289, 4290, 3, 2, 2, 2, 4290,
	789, 3, 2, 2, 2, 4291, 4289, 3, 2, 2, 2, 4292, 4293, 5, 740, 371, 2, 4293,
	4294, 5, 794, 398, 2, 4294, 4295, 5, 792, 397, 2, 4295, 791, 3, 2, 2, 2,
	4296, 4297, 9, 23, 2, 2, 4297, 793, 3, 2, 2, 2, 4298, 4299, 7, 350, 2,
	2, 4299, 795, 3, 2, 2, 2, 4300, 4305, 7, 119, 2, 2, 4301, 4302, 7, 322,
	2, 2, 4302, 4303, 7, 77, 2, 2, 4303, 4305, 5, 780, 391, 2, 4304, 4300,
	3, 2, 2, 2, 4304, 4301, 3, 2, 2, 2, 4305, 797, 3, 2, 2, 2, 4306, 4307,
	5, 796, 399, 2, 4307, 4308, 7, 2, 2, 3, 4308, 799, 3, 2, 2, 2, 4309, 4310,
	7, 67, 2, 2, 4310, 4311, 7, 212, 2, 2, 4311, 4312, 5, 740, 371, 2, 4312,
	4313, 7, 334, 2, 2, 4313, 4314, 5, 740, 371, 2, 4314, 4315, 7, 165, 2,
	2, 4315, 4316, 5, 782, 392, 2, 4316, 4317, 7, 323, 2, 2, 4317, 4318, 5,
	796, 399, 2, 4318, 801, 3, 2, 2, 2, 4319, 4320, 7, 69, 2, 2, 4320, 4321,
	7, 212, 2, 2, 4321, 4322, 5, 740, 371, 2, 4322, 4323, 7, 334, 2, 2, 4323,
	4343, 5, 740, 371, 2, 4324, 4325, 7, 165, 2, 2, 4325, 4326, 5, 782, 392,
	2, 4326, 4327, 7, 323, 2, 2, 4327, 4328, 5, 796, 399, 2, 4328, 4344, 3,
	2, 2, 2, 4329, 4330, 7, 136, 2, 2, 4330, 4331, 7, 77, 2, 2, 4331, 4332,
	7, 321, 2, 2, 4332, 4344, 5, 780, 391, 2, 4333, 4334, 7, 75, 2, 2, 4334,
	4335, 7, 23, 2, 2, 4335, 4336, 7, 321, 2, 2, 4336, 4344, 5, 780, 391, 2,
	4337, 4338, 7, 136, 2, 2, 4338, 4339, 7, 77, 2, 2, 4339, 4344, 7, 331,
	2, 2, 4340, 4341, 7, 75, 2, 2, 4341, 4342, 7, 23, 2, 2, 4342, 4344, 7,
	331, 2, 2, 4343, 4324, 3, 2, 2, 2, 4343, 4329, 3, 2, 2, 2, 4343, 4333,
	3, 2, 2, 2, 4343, 4337, 3, 2, 2, 2, 4343, 4340, 3, 2, 2, 2, 4344, 803,
	3, 2, 2, 2, 4345, 4346, 7, 75, 2, 2, 4346, 4347, 7, 212, 2, 2, 4347, 4348,
	5, 740, 371, 2, 4348, 4349, 7, 334, 2, 2, 4349, 4350, 5, 740, 371, 2, 4350,
	805, 3, 2, 2, 2, 4351, 4352, 7, 324, 2, 2, 4352, 4353, 7, 344, 2, 2, 4353,
	4364, 7, 369, 2, 2, 4354, 4355, 7, 316, 2, 2, 4355, 4356, 7, 344, 2, 2,
	4356, 4364, 7, 369, 2, 2, 4357, 4358, 7, 325, 2, 2, 4358, 4359, 7, 344,
	2, 2, 4359, 4364, 7, 364, 2, 2, 4360, 4361, 7, 326, 2, 2, 4361, 4362, 7,
	344, 2, 2, 4362, 4364, 5, 780, 391, 2, 4363, 4351, 3, 2, 2, 2, 4363, 4354,
	3, 2, 2, 2, 4363, 4357, 3, 2, 2, 2, 4363, 4360, 3, 2, 2, 2, 4364, 807,
	3, 2, 2, 2, 4365, 4370, 5, 806, 404, 2, 4366, 4367, 7, 336, 2, 2, 4367,
	4369, 5, 806, 404, 2, 4368, 4366, 3, 2, 2, 2, 4369, 4372, 3, 2, 2, 2, 4370,
	4368, 3, 2, 2, 2, 4370, 4371, 3, 2, 2, 2, 4371, 809, 3, 2, 2, 2, 4372,
	4370, 3, 2, 2, 2, 4373, 4374, 7, 67, 2, 2, 4374, 4375, 7, 321, 2, 2, 4375,
	4376, 5, 740, 371, 2, 4376, 4377, 7, 334, 2, 2, 4377, 4378, 5, 780, 391,
	2, 4378, 4379, 7, 151, 2, 2, 4379, 4380, 5, 808, 405, 2, 4380, 811, 3,
	2, 2, 2, 4381, 4382, 7, 69, 2, 2, 4382, 4383, 7, 321, 2, 2, 4383, 4384,
	5, 740, 371, 2, 4384, 4385, 7, 334, 2, 2, 4385, 4396, 5, 780, 391, 2, 4386,
	4387, 7, 157, 2, 2, 4387, 4397, 5, 808, 405, 2, 4388, 4389, 7, 158, 2,
	2, 4389, 4397, 7, 325, 2, 2, 4390, 4391, 7, 136, 2, 2, 4391, 4392, 7, 212,
	2, 2, 4392, 4397, 5, 740, 371, 2, 4393, 4394, 7, 75, 2, 2, 4394, 4395,
	7, 212, 2, 2, 4395, 4397, 5, 740, 371, 2, 4396, 4386, 3, 2, 2, 2, 4396,
	4388, 3, 2, 2, 2, 4396, 4390, 3, 2, 2, 2, 4396, 4393, 3, 2, 2, 2, 4397,
	813, 3, 2, 2, 2, 4398, 4399, 7, 75, 2, 2, 4399, 4400, 7, 321, 2, 2, 4400,
	4401, 5, 740, 371, 2, 4401, 4402, 7, 334, 2, 2, 4402, 4403, 5, 780, 391,
	2, 4403, 815, 3, 2, 2, 2, 4404, 4405, 7, 67, 2, 2, 4405, 4406, 9, 33, 2,
	2, 4406, 4407, 7, 327, 2, 2, 4407, 4408, 7, 364, 2, 2, 4408, 4409, 7, 182,
	2, 2, 4409, 4413, 5, 740, 371, 2, 4410, 4411, 7, 77, 2, 2, 4411, 4414,
	5, 780, 391, 2, 4412, 4414, 5, 770, 386, 2, 4413, 4410, 3, 2, 2, 2, 4413,
	4412, 3, 2, 2, 2, 4414, 4418, 3, 2, 2, 2, 4415, 4416, 7, 151, 2, 2, 4416,
	4417, 7, 18, 2, 2, 4417, 4419, 7, 369, 2, 2, 4418, 4415, 3, 2, 2, 2, 4418,
	4419, 3, 2, 2, 2, 4419, 817, 3, 2, 2, 2, 4420, 4421, 7, 69, 2, 2, 4421,
	4422, 9, 33, 2, 2, 4422, 4423, 7, 327, 2, 2, 4423, 4424, 7, 364, 2, 2,
	4424, 4425, 7, 182, 2, 2, 4425, 4429, 5, 740, 371, 2, 4426, 4427, 7, 77,
	2, 2, 4427, 4430, 5, 780, 391, 2, 4428, 4430, 5, 770, 386, 2, 4429, 4426,
	3, 2, 2, 2, 4429, 4428, 3, 2, 2, 2, 4430, 4434, 3, 2, 2, 2, 4431, 4432,
	7, 151, 2, 2, 4432, 4433, 7, 18, 2, 2, 4433, 4435, 7, 369, 2, 2, 4434,
	4431, 3, 2, 2, 2, 4434, 4435, 3, 2, 2, 2, 4435, 819, 3, 2, 2, 2, 4436,
	4437, 7, 75, 2, 2, 4437, 4438, 9, 33, 2, 2, 4438, 4439, 7, 327, 2, 2, 4439,
	4440, 7, 364, 2, 2, 4440, 4441, 7, 182, 2, 2, 4441, 4442, 5, 740, 371,
	2, 4442, 821, 3, 2, 2, 2, 515, 828, 834, 840, 851, 854, 856, 874, 879,
	884, 890, 894, 907, 911, 915, 920, 927, 933, 937, 939, 943, 950, 952, 958,
	969, 977, 981, 1022, 1049, 1053, 1056, 1061, 1075, 1084, 1088, 1095, 1098,
	1102, 1108, 1111, 1114, 1117, 1123, 1126, 1129, 1132, 1135, 1138, 1141,
	1144, 1147, 1151, 1153, 1163, 1168, 1172, 1175, 1186, 1199, 1214, 1218,
	1234, 1247, 1251, 1256, 1283, 1288, 1293, 1301, 1307, 1311, 1314, 1317,
	1323, 1330, 1340, 1344, 1349, 1353, 1359, 1366, 1373, 1381, 1388, 1392,
	1395, 1403, 1406, 1414, 1417, 1421, 1431, 1436, 1440, 1451, 1467, 1483,
	1499, 1506, 1520, 1526, 1542, 1545, 1555, 1563, 1567, 1570, 1574, 1578,
	1581, 1586, 1591, 1597, 1608, 1610, 1614, 1620, 1626, 1631, 1637, 1642,
	1649, 1654, 1662, 1667, 1674, 1680, 1688, 1695, 1700, 1708, 1715, 1718,
	1721, 1723, 1737, 1739, 1745, 1760, 1777, 1782, 1786, 1790, 1797, 1804,
	1810, 1814, 1817, 1824, 1847, 1852, 1856, 1864, 1872, 1876, 1882, 1887,
	1894, 1897, 1903, 1910, 1918, 1927, 1936, 1956, 1962, 1965, 1967, 1974,
	1984, 1992, 1996, 2000, 2013, 2022, 2028, 2032, 2039, 2042, 2045, 2048,
	2057, 2061, 2064, 2067, 2070, 2073, 2076, 2090, 2098, 2104, 2108, 2121,
	2137, 2153, 2157, 2172, 2178, 2181, 2184, 2187, 2190, 2194, 2208, 2216,
	2219, 2234, 2268, 2276, 2281, 2291, 2299, 2307, 2315, 2326, 2330, 2338,
	2347, 2350, 2359, 2363, 2365, 2369, 2373, 2379, 2383, 2393, 2402, 2413,
	2417, 2424, 2436, 2443, 2451, 2455, 2458, 2465, 2471, 2475, 2478, 2484,
	2488, 2492, 2497, 2501, 2505, 2509, 2517, 2521, 2525, 2529, 2533, 2541,
	2545, 2549, 2557, 2562, 2567, 2580, 2589, 2597, 2607, 2625, 2628, 2638,
	2666, 2672, 2678, 2684, 2686, 2689, 2695, 2703, 2718, 2725, 2730, 2733,
	2737, 2740, 2743, 2746, 2749, 2755, 2759, 2762, 2765, 2768, 2771, 2774,
	2781, 2784, 2791, 2794, 2797, 2800, 2803, 2806, 2809, 2812, 2815, 2818,
	2822, 2825, 2828, 2831, 2834, 2837, 2840, 2843, 2846, 2849, 2851, 2857,
	2862, 2869, 2871, 2874, 2879, 2882, 2886, 2891, 2898, 2904, 2916, 2923,
	2929, 2938, 2941, 2945, 2951, 2961, 2965, 2976, 2982, 2985, 2995, 2997,
	3001, 3008, 3030, 3037, 3041, 3044, 3049, 3052, 3059, 3066, 3069, 3077,
	3083, 3085, 3087, 3090, 3093, 3098, 3108, 3113, 3115, 3121, 3124, 3127,
	3135, 3141, 3143, 3145, 3148, 3151, 3155, 3162, 3171, 3181, 3184, 3187,
	3190, 3194, 3204, 3214, 3222, 3230, 3237, 3246, 3254, 3266, 3269, 3275,
	3282, 3289, 3296, 3303, 3312, 3316, 3323, 3328, 3332, 3351, 3356, 3361,
	3367, 3380, 3383, 3386, 3398, 3401, 3404, 3412, 3421, 3426, 3428, 3445,
	3448, 3461, 3465, 3469, 3472, 3475, 3478, 3482, 3485, 3488, 3495, 3500,
	3508, 3514, 3519, 3523, 3528, 3535, 3549, 3552, 3556, 3571, 3581, 3590,
	3593, 3604, 3616, 3626, 3636, 3641, 3645, 3649, 3655, 3673, 3679, 3683,
	3691, 3701, 3711, 3730, 3736, 3743, 3746, 3748, 3753, 3757, 3775, 3779,
	3791, 3795, 3804, 3831, 3837, 3845, 3850, 3875, 3889, 3902, 3915, 3936,
	3949, 3965, 3967, 3982, 4011, 4028, 4030, 4043, 4058, 4062, 4068, 4076,
	4085, 4093, 4102, 4118, 4122, 4129, 4133, 4153, 4162, 4169, 4175, 4182,
	4195, 4197, 4204, 4227, 4231, 4233, 4235, 4239, 4256, 4268, 4281, 4289,
	4304, 4343, 4363, 4370, 4396, 4413, 4418, 4429, 4434,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'TRUE'", "'FALSE'", "'ALL'", "'NONE'", "'AND'", "'OR'", "", "'LIKE'",
	"'ANY'", "'IF'", "'EXISTS'", "'ASC'", "'DESC'", "'NULLS'", "'LAST'", "'ORDER'",
	"'GROUP'", "'BY'", "'HAVING'", "'WHERE'", "'FROM'", "'AS'", "'SELECT'",
	"'DISTINCT'", "'INSERT'", "'OVERWRITE'", "'OUTER'", "'UNIQUEJOIN'", "'PRESERVE'",
	"'JOIN'", "'LEFT'", "'RIGHT'", "'FULL'", "'ON'", "'PARTITION'", "'PARTITIONS'",
	"'TABLE'", "'TABLES'", "'COLUMNS'", "'INDEX'", "'INDEXES'", "'REBUILD'",
	"'FUNCTIONS'", "'SHOW'", "'MSCK'", "'REPAIR'", "'DIRECTORY'", "'LOCAL'",
	"'TRANSFORM'", "'USING'", "'CLUSTER'", "'DISTRIBUTE'", "'SORT'", "'UNION'",
	"'EXCEPT'", "'LOAD'", "'EXPORT'", "'IMPORT'", "'REPLICATION'", "'METADATA'",
	"'DATA'", "'INPATH'", "'IS'", "'NULL'", "'CREATE'", "'EXTERNAL'", "'ALTER'",
	"'CHANGE'", "'COLUMN'", "'FIRST'", "'AFTER'", "'DESCRIBE'", "'DROP'", "'RENAME'",
	"'TO'", "'COMMENT'", "'BOOLEAN'", "'TINYINT'", "'SMALLINT'", "", "'BIGINT'",
	"'FLOAT'", "'DOUBLE'", "'PRECISION'", "'DATE'", "'DATETIME'", "'TIMESTAMP'",
	"'TIMESTAMPLOCALTZ'", "'TIME'", "'ZONE'", "'INTERVAL'", "", "'STRING'",
	"'CHAR'", "'VARCHAR'", "'ARRAY'", "'STRUCT'", "'MAP'", "'UNIONTYPE'", "'REDUCE'",
	"'PARTITIONED'", "'CLUSTERED'", "'SORTED'", "'INTO'", "'BUCKETS'", "'ROW'",
	"'ROWS'", "'FORMAT'", "'DELIMITED'", "'FIELDS'", "'TERMINATED'", "'ESCAPED'",
	"'COLLECTION'", "'ITEMS'", "'KEYS'", "'$KEY$'", "'KILL'", "'LINES'", "'STORED'",
	"'FILEFORMAT'", "'INPUTFORMAT'", "'OUTPUTFORMAT'", "'INPUTDRIVER'", "'OUTPUTDRIVER'",
	"'ENABLE'", "'DISABLE'", "'LOCATION'", "'TABLESAMPLE'", "'BUCKET'", "'OUT'",
	"'OF'", "'PERCENT'", "'CAST'", "'ADD'", "'REPLACE'", "'RLIKE'", "'REGEXP'",
	"'TEMPORARY'", "'FUNCTION'", "'MACRO'", "'FILE'", "'JAR'", "'EXPLAIN'",
	"'EXTENDED'", "'FORMATTED'", "'DEPENDENCY'", "'LOGICAL'", "'SERDE'", "'WITH'",
	"'DEFERRED'", "'SERDEPROPERTIES'", "'DBPROPERTIES'", "'LIMIT'", "'OFFSET'",
	"'SET'", "'UNSET'", "'TBLPROPERTIES'", "'IDXPROPERTIES'", "'$VALUE$'",
	"'$ELEM$'", "'DEFINED'", "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'",
	"'MAPJOIN'", "'STREAMTABLE'", "'CLUSTERSTATUS'", "'UTC'", "'UTC_TMESTAMP'",
	"'LONG'", "'DELETE'", "'PLUS'", "'MINUS'", "'FETCH'", "'INTERSECT'", "'VIEW'",
	"'VIEWS'", "'IN'", "'DATABASE'", "'DATABASES'", "'MATERIALIZED'", "'SCHEMA'",
	"'SCHEMAS'", "'GRANT'", "'REVOKE'", "'SSL'", "'UNDO'", "'LOCK'", "'LOCKS'",
	"'UNLOCK'", "'SHARED'", "'EXCLUSIVE'", "'PROCEDURE'", "'UNSIGNED'", "'WHILE'",
	"'READ'", "'READS'", "'PURGE'", "'RANGE'", "'ANALYZE'", "'BEFORE'", "'BETWEEN'",
	"'BOTH'", "'BINARY'", "'CROSS'", "'CONTINUE'", "'CURSOR'", "'TRIGGER'",
	"'RECORDREADER'", "'RECORDWRITER'", "'SEMI'", "'LATERAL'", "'TOUCH'", "'ARCHIVE'",
	"'UNARCHIVE'", "'COMPUTE'", "'STATISTICS'", "'USE'", "'OPTION'", "'CONCATENATE'",
	"'SHOW_DATABASE'", "'UPDATE'", "'RESTRICT'", "'CASCADE'", "'SKEWED'", "'ROLLUP'",
	"'CUBE'", "'DIRECTORIES'", "'FOR'", "'WINDOW'", "'UNBOUNDED'", "'PRECEDING'",
	"'FOLLOWING'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'LESS'",
	"'MORE'", "'OVER'", "'GROUPING'", "'SETS'", "'TRUNCATE'", "'NOSCAN'", "'USER'",
	"'ROLE'", "'ROLES'", "'INNER'", "'EXCHANGE'", "'URI'", "'SERVER'", "'ADMIN'",
	"'OWNER'", "'PRINCIPALS'", "'COMPACT'", "'COMPACTIONS'", "'TRANSACTIONS'",
	"'REWRITE'", "'AUTHORIZATION'", "'REOPTIMIZATION'", "'CONF'", "'VALUES'",
	"'RELOAD'", "", "'QUERY'", "'QUARTER'", "", "", "", "'DAYOFWEEK'", "",
	"", "", "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", "'WORK'",
	"'ONLY'", "'WRITE'", "'ISOLATION'", "'LEVEL'", "'SNAPSHOT'", "'AUTOCOMMIT'",
	"'CACHE'", "'PRIMARY'", "'FOREIGN'", "'REFERENCES'", "'CONSTRAINT'", "'ENFORCED'",
	"'VALIDATE'", "'NOVALIDATE'", "'RELY'", "'NORELY'", "'UNIQUE'", "'KEY'",
	"'ABORT'", "'EXTRACT'", "'FLOOR'", "'MERGE'", "'MATCHED'", "'REPL'", "'DUMP'",
	"'STATUS'", "'VECTORIZATION'", "'SUMMARY'", "'OPERATOR'", "'EXPRESSION'",
	"'DETAIL'", "'WAIT'", "'RESOURCE'", "'PLAN'", "'QUERY_PARALLELISM'", "'PLANS'",
	"'ACTIVATE'", "'DEFAULT'", "'CHECK'", "'POOL'", "'MOVE'", "'DO'", "'ALLOC_FRACTION'",
	"'SCHEDULING_POLICY'", "'PATH'", "'MAPPING'", "'WORKLOAD'", "'MANAGEMENT'",
	"'ACTIVE'", "'UNMANAGED'", "'APPLICATION'", "'SYNC'", "'.'", "':'", "','",
	"';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "", "'<=>'", "", "'<='",
	"'<'", "'>='", "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", "'&'",
	"'~'", "'|'", "'||'", "'^'", "'?'", "'$'",
}
var symbolicNames = []string{
	"", "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", "KW_AND", "KW_OR", "KW_NOT",
	"KW_LIKE", "KW_ANY", "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", "KW_NULLS",
	"KW_LAST", "KW_ORDER", "KW_GROUP", "KW_BY", "KW_HAVING", "KW_WHERE", "KW_FROM",
	"KW_AS", "KW_SELECT", "KW_DISTINCT", "KW_INSERT", "KW_OVERWRITE", "KW_OUTER",
	"KW_UNIQUEJOIN", "KW_PRESERVE", "KW_JOIN", "KW_LEFT", "KW_RIGHT", "KW_FULL",
	"KW_ON", "KW_PARTITION", "KW_PARTITIONS", "KW_TABLE", "KW_TABLES", "KW_COLUMNS",
	"KW_INDEX", "KW_INDEXES", "KW_REBUILD", "KW_FUNCTIONS", "KW_SHOW", "KW_MSCK",
	"KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", "KW_TRANSFORM", "KW_USING", "KW_CLUSTER",
	"KW_DISTRIBUTE", "KW_SORT", "KW_UNION", "KW_EXCEPT", "KW_LOAD", "KW_EXPORT",
	"KW_IMPORT", "KW_REPLICATION", "KW_METADATA", "KW_DATA", "KW_INPATH", "KW_IS",
	"KW_NULL", "KW_CREATE", "KW_EXTERNAL", "KW_ALTER", "KW_CHANGE", "KW_COLUMN",
	"KW_FIRST", "KW_AFTER", "KW_DESCRIBE", "KW_DROP", "KW_RENAME", "KW_TO",
	"KW_COMMENT", "KW_BOOLEAN", "KW_TINYINT", "KW_SMALLINT", "KW_INT", "KW_BIGINT",
	"KW_FLOAT", "KW_DOUBLE", "KW_PRECISION", "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP",
	"KW_TIMESTAMPLOCALTZ", "KW_TIME", "KW_ZONE", "KW_INTERVAL", "KW_DECIMAL",
	"KW_STRING", "KW_CHAR", "KW_VARCHAR", "KW_ARRAY", "KW_STRUCT", "KW_MAP",
	"KW_UNIONTYPE", "KW_REDUCE", "KW_PARTITIONED", "KW_CLUSTERED", "KW_SORTED",
	"KW_INTO", "KW_BUCKETS", "KW_ROW", "KW_ROWS", "KW_FORMAT", "KW_DELIMITED",
	"KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", "KW_ITEMS",
	"KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LINES", "KW_STORED", "KW_FILEFORMAT",
	"KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", "KW_OUTPUTDRIVER",
	"KW_ENABLE", "KW_DISABLE", "KW_LOCATION", "KW_TABLESAMPLE", "KW_BUCKET",
	"KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", "KW_ADD", "KW_REPLACE", "KW_RLIKE",
	"KW_REGEXP", "KW_TEMPORARY", "KW_FUNCTION", "KW_MACRO", "KW_FILE", "KW_JAR",
	"KW_EXPLAIN", "KW_EXTENDED", "KW_FORMATTED", "KW_DEPENDENCY", "KW_LOGICAL",
	"KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", "KW_DBPROPERTIES",
	"KW_LIMIT", "KW_OFFSET", "KW_SET", "KW_UNSET", "KW_TBLPROPERTIES", "KW_IDXPROPERTIES",
	"KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", "KW_CASE", "KW_WHEN", "KW_THEN",
	"KW_ELSE", "KW_END", "KW_MAPJOIN", "KW_STREAMTABLE", "KW_CLUSTERSTATUS",
	"KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS",
	"KW_FETCH", "KW_INTERSECT", "KW_VIEW", "KW_VIEWS", "KW_IN", "KW_DATABASE",
	"KW_DATABASES", "KW_MATERIALIZED", "KW_SCHEMA", "KW_SCHEMAS", "KW_GRANT",
	"KW_REVOKE", "KW_SSL", "KW_UNDO", "KW_LOCK", "KW_LOCKS", "KW_UNLOCK", "KW_SHARED",
	"KW_EXCLUSIVE", "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS",
	"KW_PURGE", "KW_RANGE", "KW_ANALYZE", "KW_BEFORE", "KW_BETWEEN", "KW_BOTH",
	"KW_BINARY", "KW_CROSS", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "KW_RECORDREADER",
	"KW_RECORDWRITER", "KW_SEMI", "KW_LATERAL", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE",
	"KW_COMPUTE", "KW_STATISTICS", "KW_USE", "KW_OPTION", "KW_CONCATENATE",
	"KW_SHOW_DATABASE", "KW_UPDATE", "KW_RESTRICT", "KW_CASCADE", "KW_SKEWED",
	"KW_ROLLUP", "KW_CUBE", "KW_DIRECTORIES", "KW_FOR", "KW_WINDOW", "KW_UNBOUNDED",
	"KW_PRECEDING", "KW_FOLLOWING", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP",
	"KW_LESS", "KW_MORE", "KW_OVER", "KW_GROUPING", "KW_SETS", "KW_TRUNCATE",
	"KW_NOSCAN", "KW_USER", "KW_ROLE", "KW_ROLES", "KW_INNER", "KW_EXCHANGE",
	"KW_URI", "KW_SERVER", "KW_ADMIN", "KW_OWNER", "KW_PRINCIPALS", "KW_COMPACT",
	"KW_COMPACTIONS", "KW_TRANSACTIONS", "KW_REWRITE", "KW_AUTHORIZATION",
	"KW_REOPTIMIZATION", "KW_CONF", "KW_VALUES", "KW_RELOAD", "KW_YEAR", "KW_QUERY",
	"KW_QUARTER", "KW_MONTH", "KW_WEEK", "KW_DAY", "KW_DOW", "KW_HOUR", "KW_MINUTE",
	"KW_SECOND", "KW_START", "KW_TRANSACTION", "KW_COMMIT", "KW_ROLLBACK",
	"KW_WORK", "KW_ONLY", "KW_WRITE", "KW_ISOLATION", "KW_LEVEL", "KW_SNAPSHOT",
	"KW_AUTOCOMMIT", "KW_CACHE", "KW_PRIMARY", "KW_FOREIGN", "KW_REFERENCES",
	"KW_CONSTRAINT", "KW_ENFORCED", "KW_VALIDATE", "KW_NOVALIDATE", "KW_RELY",
	"KW_NORELY", "KW_UNIQUE", "KW_KEY", "KW_ABORT", "KW_EXTRACT", "KW_FLOOR",
	"KW_MERGE", "KW_MATCHED", "KW_REPL", "KW_DUMP", "KW_STATUS", "KW_VECTORIZATION",
	"KW_SUMMARY", "KW_OPERATOR", "KW_EXPRESSION", "KW_DETAIL", "KW_WAIT", "KW_RESOURCE",
	"KW_PLAN", "KW_QUERY_PARALLELISM", "KW_PLANS", "KW_ACTIVATE", "KW_DEFAULT",
	"KW_CHECK", "KW_POOL", "KW_MOVE", "KW_DO", "KW_ALLOC_FRACTION", "KW_SCHEDULING_POLICY",
	"KW_PATH", "KW_MAPPING", "KW_WORKLOAD", "KW_MANAGEMENT", "KW_ACTIVE", "KW_UNMANAGED",
	"KW_APPLICATION", "KW_SYNC", "DOT", "COLON", "COMMA", "SEMICOLON", "LPAREN",
	"RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", "EQUAL_NS",
	"NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", "GREATERTHAN",
	"DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", "AMPERSAND", "TILDE",
	"BITWISEOR", "CONCATENATE", "BITWISEXOR", "QUESTION", "DOLLAR", "StringLiteral",
	"CharSetLiteral", "IntegralLiteral", "NumberLiteral", "ByteLengthLiteral",
	"Number", "Identifier", "QuotedIdentifier", "CharSetName", "WS", "LINE_COMMENT",
	"QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT",
}

var ruleNames = []string{
	"statement", "explainStatement", "explainOption", "vectorizationOnly",
	"vectorizatonDetail", "execStatement", "loadStatement", "replicationClause",
	"exportStatement", "importStatement", "replDumpStatement", "replLoadStatement",
	"replConfigs", "replConfigsList", "replStatusStatement", "ddlStatement",
	"ifExists", "restrictOrCascade", "ifNotExists", "rewriteEnabled", "rewriteDisabled",
	"storedAsDirs", "orReplace", "createDatabaseStatement", "dbLocation", "dbProperties",
	"dbPropertiesList", "switchDatabaseStatement", "dropDatabaseStatement",
	"databaseComment", "createTableStatement", "truncateTableStatement", "dropTableStatement",
	"alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix",
	"alterStatementPartitionKeyType", "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix",
	"alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner",
	"alterDatabaseSuffixSetLocation", "alterStatementSuffixRename", "alterStatementSuffixAddCol",
	"alterStatementSuffixAddConstraint", "alterStatementSuffixUpdateColumns",
	"alterStatementSuffixDropConstraint", "alterStatementSuffixRenameCol",
	"alterStatementSuffixUpdateStatsCol", "alterStatementSuffixUpdateStats",
	"alterStatementChangeColPosition", "alterStatementSuffixAddPartitions",
	"alterStatementSuffixAddPartitionsElement", "alterStatementSuffixTouch",
	"alterStatementSuffixArchive", "alterStatementSuffixUnArchive", "partitionLocation",
	"alterStatementSuffixDropPartitions", "alterStatementSuffixProperties",
	"alterViewSuffixProperties", "alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild",
	"alterStatementSuffixSerdeProperties", "tablePartitionPrefix", "alterStatementSuffixFileFormat",
	"alterStatementSuffixClusterbySortby", "alterTblPartitionStatementSuffixSkewedLocation",
	"skewedLocations", "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation",
	"alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition",
	"alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", "alterStatementSuffixMergeFiles",
	"alterStatementSuffixBucketNum", "blocking", "alterStatementSuffixCompact",
	"alterStatementSuffixSetOwner", "fileFormat", "inputFileFormat", "tabTypeExpr",
	"partTypeExpr", "tabPartColTypeExpr", "descStatement", "analyzeStatement",
	"showStatement", "lockStatement", "lockDatabase", "lockMode", "unlockStatement",
	"unlockDatabase", "createRoleStatement", "dropRoleStatement", "grantPrivileges",
	"revokePrivileges", "grantRole", "revokeRole", "showRoleGrants", "showRoles",
	"showCurrentRole", "setRole", "showGrants", "showRolePrincipals", "privilegeIncludeColObject",
	"privilegeObject", "privObject", "privObjectCols", "privilegeList", "privlegeDef",
	"privilegeType", "principalSpecification", "principalName", "withGrantOption",
	"grantOptionFor", "adminOptionFor", "withAdminOption", "metastoreCheck",
	"resourceList", "resource", "resourceType", "createFunctionStatement",
	"dropFunctionStatement", "reloadFunctionStatement", "createMacroStatement",
	"dropMacroStatement", "createViewStatement", "createMaterializedViewStatement",
	"viewPartition", "dropViewStatement", "dropMaterializedViewStatement",
	"showFunctionIdentifier", "showStmtIdentifier", "tableComment", "tablePartition",
	"tableBuckets", "tableSkewed", "rowFormat", "recordReader", "recordWriter",
	"rowFormatSerde", "rowFormatDelimited", "tableRowFormat", "tablePropertiesPrefixed",
	"tableProperties", "tablePropertiesList", "keyValueProperty", "keyProperty",
	"tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", "tableRowFormatMapKeysIdentifier",
	"tableRowFormatLinesIdentifier", "tableRowNullFormat", "tableFileFormat",
	"tableLocation", "columnNameTypeList", "columnNameTypeOrConstraintList",
	"columnNameColonTypeList", "columnNameList", "columnName", "extColumnName",
	"columnNameOrderList", "columnParenthesesList", "enableValidateSpecification",
	"enableSpecification", "validateSpecification", "enforcedSpecification",
	"relySpecification", "createConstraint", "alterConstraintWithName", "tableLevelConstraint",
	"pkUkConstraint", "checkConstraint", "createForeignKey", "alterForeignKeyWithName",
	"skewedValueElement", "skewedColumnValuePairList", "skewedColumnValuePair",
	"skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement",
	"orderSpecification", "nullOrdering", "columnNameOrder", "columnNameCommentList",
	"columnNameComment", "columnRefOrder", "columnNameType", "columnNameTypeOrConstraint",
	"tableConstraint", "columnNameTypeConstraint", "columnConstraint", "foreignKeyConstraint",
	"colConstraint", "alterColumnConstraint", "alterForeignKeyConstraint",
	"alterColConstraint", "columnConstraintType", "defaultVal", "tableConstraintType",
	"constraintOptsCreate", "constraintOptsAlter", "columnNameColonType", "colType",
	"colTypeList", "type_db_col", "primitiveType", "listType", "structType",
	"mapType", "unionType", "setOperator", "queryStatementExpression", "queryStatementExpressionBody",
	"withClause", "cteStatement", "fromStatement", "singleFromStatement", "regularBody",
	"atomSelectStatement", "selectStatement", "setOpSelectStatement", "selectStatementWithCTE",
	"body", "insertClause", "destination", "limitClause", "deleteStatement",
	"columnAssignmentClause", "setColumnsClause", "updateStatement", "sqlTransactionStatement",
	"startTransactionStatement", "transactionMode", "transactionAccessMode",
	"isolationLevel", "levelOfIsolation", "commitStatement", "rollbackStatement",
	"setAutoCommitStatement", "abortTransactionStatement", "mergeStatement",
	"whenClauses", "whenNotMatchedClause", "whenMatchedAndClause", "whenMatchedThenClause",
	"updateOrDelete", "killQueryStatement", "selectClause", "selectList", "selectTrfmClause",
	"selectItem", "trfmClause", "selectExpression", "selectExpressionList",
	"window_clause", "window_defn", "window_specification", "window_frame",
	"window_range_expression", "window_value_expression", "window_frame_start_boundary",
	"window_frame_boundary", "tableAllColumns", "tableOrColumn", "expressionList",
	"aliasList", "fromClause", "fromSource", "atomjoinSource", "joinSource",
	"joinSourcePart", "uniqueJoinSource", "uniqueJoinExpr", "uniqueJoinToken",
	"joinToken", "lateralView", "tableAlias", "tableBucketSample", "splitSample",
	"tableSample", "tableSource", "uniqueJoinTableSource", "tableName", "viewName",
	"subQuerySource", "partitioningSpec", "partitionTableFunctionSource", "partitionedTableFunction",
	"whereClause", "searchCondition", "valuesClause", "valuesTableConstructor",
	"valueRowConstructor", "virtualTableSource", "groupByClause", "groupby_expression",
	"groupByEmpty", "rollupStandard", "rollupOldSyntax", "groupingSetExpression",
	"groupingSetExpressionMultiple", "groupingExpressionSingle", "havingClause",
	"havingCondition", "expressionsInParenthesis", "expressionsNotInParenthesis",
	"expressionPart", "expressions", "columnRefOrderInParenthesis", "columnRefOrderNotInParenthesis",
	"orderByClause", "clusterByClause", "partitionByClause", "distributeByClause",
	"sortByClause", "function", "functionName", "castExpression", "caseExpression",
	"whenExpression", "floorExpression", "floorDateQualifiers", "extractExpression",
	"timeQualifiers", "constant", "stringLiteralSequence", "charSetStringLiteral",
	"dateLiteral", "timestampLiteral", "timestampLocalTZLiteral", "intervalValue",
	"intervalLiteral", "intervalExpression", "intervalQualifiers", "atomExpression",
	"precedenceUnaryOperator", "isCondition", "precedenceBitwiseXorOperator",
	"precedenceStarOperator", "precedencePlusOperator", "precedenceConcatenateOperator",
	"precedenceAmpersandOperator", "precedenceBitwiseOrOperator", "precedenceRegexpOperator",
	"precedenceSimilarOperator", "precedenceDistinctOperator", "precedenceEqualOperator",
	"precedenceNotOperator", "precedenceAndOperator", "precedenceOrOperator",
	"expression", "subQueryExpression", "precedenceSimilarExpressionPart",
	"precedenceSimilarExpressionAtom", "precedenceSimilarExpressionIn", "precedenceSimilarExpressionPartNot",
	"booleanValue", "booleanValueTok", "tableOrPartition", "partitionSpec",
	"partitionVal", "dropPartitionSpec", "dropPartitionVal", "dropPartitionOperator",
	"sysFuncNames", "descFuncNames", "identifier", "functionIdentifier", "principalIdentifier",
	"nonReserved", "sql11ReservedKeywordsUsedAsFunctionName", "resourcePlanDdlStatements",
	"rpAssign", "rpAssignList", "rpUnassign", "rpUnassignList", "createResourcePlanStatement",
	"withReplace", "activate", "enable", "disable", "unmanaged", "alterResourcePlanStatement",
	"globalWmStatement", "replaceResourcePlanStatement", "dropResourcePlanStatement",
	"poolPath", "triggerExpression", "triggerExpressionStandalone", "triggerOrExpression",
	"triggerAndExpression", "triggerAtomExpression", "triggerLiteral", "comparisionOperator",
	"triggerActionExpression", "triggerActionExpressionStandalone", "createTriggerStatement",
	"alterTriggerStatement", "dropTriggerStatement", "poolAssign", "poolAssignList",
	"createPoolStatement", "alterPoolStatement", "dropPoolStatement", "createMappingStatement",
	"alterMappingStatement", "dropMappingStatement",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type HiveParser struct {
	*antlr.BaseParser
}

func NewHiveParser(input antlr.TokenStream) *HiveParser {
	this := new(HiveParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "HiveParser.g4"

	return this
}

// HiveParser tokens.
const (
	HiveParserEOF                  = antlr.TokenEOF
	HiveParserKW_TRUE              = 1
	HiveParserKW_FALSE             = 2
	HiveParserKW_ALL               = 3
	HiveParserKW_NONE              = 4
	HiveParserKW_AND               = 5
	HiveParserKW_OR                = 6
	HiveParserKW_NOT               = 7
	HiveParserKW_LIKE              = 8
	HiveParserKW_ANY               = 9
	HiveParserKW_IF                = 10
	HiveParserKW_EXISTS            = 11
	HiveParserKW_ASC               = 12
	HiveParserKW_DESC              = 13
	HiveParserKW_NULLS             = 14
	HiveParserKW_LAST              = 15
	HiveParserKW_ORDER             = 16
	HiveParserKW_GROUP             = 17
	HiveParserKW_BY                = 18
	HiveParserKW_HAVING            = 19
	HiveParserKW_WHERE             = 20
	HiveParserKW_FROM              = 21
	HiveParserKW_AS                = 22
	HiveParserKW_SELECT            = 23
	HiveParserKW_DISTINCT          = 24
	HiveParserKW_INSERT            = 25
	HiveParserKW_OVERWRITE         = 26
	HiveParserKW_OUTER             = 27
	HiveParserKW_UNIQUEJOIN        = 28
	HiveParserKW_PRESERVE          = 29
	HiveParserKW_JOIN              = 30
	HiveParserKW_LEFT              = 31
	HiveParserKW_RIGHT             = 32
	HiveParserKW_FULL              = 33
	HiveParserKW_ON                = 34
	HiveParserKW_PARTITION         = 35
	HiveParserKW_PARTITIONS        = 36
	HiveParserKW_TABLE             = 37
	HiveParserKW_TABLES            = 38
	HiveParserKW_COLUMNS           = 39
	HiveParserKW_INDEX             = 40
	HiveParserKW_INDEXES           = 41
	HiveParserKW_REBUILD           = 42
	HiveParserKW_FUNCTIONS         = 43
	HiveParserKW_SHOW              = 44
	HiveParserKW_MSCK              = 45
	HiveParserKW_REPAIR            = 46
	HiveParserKW_DIRECTORY         = 47
	HiveParserKW_LOCAL             = 48
	HiveParserKW_TRANSFORM         = 49
	HiveParserKW_USING             = 50
	HiveParserKW_CLUSTER           = 51
	HiveParserKW_DISTRIBUTE        = 52
	HiveParserKW_SORT              = 53
	HiveParserKW_UNION             = 54
	HiveParserKW_EXCEPT            = 55
	HiveParserKW_LOAD              = 56
	HiveParserKW_EXPORT            = 57
	HiveParserKW_IMPORT            = 58
	HiveParserKW_REPLICATION       = 59
	HiveParserKW_METADATA          = 60
	HiveParserKW_DATA              = 61
	HiveParserKW_INPATH            = 62
	HiveParserKW_IS                = 63
	HiveParserKW_NULL              = 64
	HiveParserKW_CREATE            = 65
	HiveParserKW_EXTERNAL          = 66
	HiveParserKW_ALTER             = 67
	HiveParserKW_CHANGE            = 68
	HiveParserKW_COLUMN            = 69
	HiveParserKW_FIRST             = 70
	HiveParserKW_AFTER             = 71
	HiveParserKW_DESCRIBE          = 72
	HiveParserKW_DROP              = 73
	HiveParserKW_RENAME            = 74
	HiveParserKW_TO                = 75
	HiveParserKW_COMMENT           = 76
	HiveParserKW_BOOLEAN           = 77
	HiveParserKW_TINYINT           = 78
	HiveParserKW_SMALLINT          = 79
	HiveParserKW_INT               = 80
	HiveParserKW_BIGINT            = 81
	HiveParserKW_FLOAT             = 82
	HiveParserKW_DOUBLE            = 83
	HiveParserKW_PRECISION         = 84
	HiveParserKW_DATE              = 85
	HiveParserKW_DATETIME          = 86
	HiveParserKW_TIMESTAMP         = 87
	HiveParserKW_TIMESTAMPLOCALTZ  = 88
	HiveParserKW_TIME              = 89
	HiveParserKW_ZONE              = 90
	HiveParserKW_INTERVAL          = 91
	HiveParserKW_DECIMAL           = 92
	HiveParserKW_STRING            = 93
	HiveParserKW_CHAR              = 94
	HiveParserKW_VARCHAR           = 95
	HiveParserKW_ARRAY             = 96
	HiveParserKW_STRUCT            = 97
	HiveParserKW_MAP               = 98
	HiveParserKW_UNIONTYPE         = 99
	HiveParserKW_REDUCE            = 100
	HiveParserKW_PARTITIONED       = 101
	HiveParserKW_CLUSTERED         = 102
	HiveParserKW_SORTED            = 103
	HiveParserKW_INTO              = 104
	HiveParserKW_BUCKETS           = 105
	HiveParserKW_ROW               = 106
	HiveParserKW_ROWS              = 107
	HiveParserKW_FORMAT            = 108
	HiveParserKW_DELIMITED         = 109
	HiveParserKW_FIELDS            = 110
	HiveParserKW_TERMINATED        = 111
	HiveParserKW_ESCAPED           = 112
	HiveParserKW_COLLECTION        = 113
	HiveParserKW_ITEMS             = 114
	HiveParserKW_KEYS              = 115
	HiveParserKW_KEY_TYPE          = 116
	HiveParserKW_KILL              = 117
	HiveParserKW_LINES             = 118
	HiveParserKW_STORED            = 119
	HiveParserKW_FILEFORMAT        = 120
	HiveParserKW_INPUTFORMAT       = 121
	HiveParserKW_OUTPUTFORMAT      = 122
	HiveParserKW_INPUTDRIVER       = 123
	HiveParserKW_OUTPUTDRIVER      = 124
	HiveParserKW_ENABLE            = 125
	HiveParserKW_DISABLE           = 126
	HiveParserKW_LOCATION          = 127
	HiveParserKW_TABLESAMPLE       = 128
	HiveParserKW_BUCKET            = 129
	HiveParserKW_OUT               = 130
	HiveParserKW_OF                = 131
	HiveParserKW_PERCENT           = 132
	HiveParserKW_CAST              = 133
	HiveParserKW_ADD               = 134
	HiveParserKW_REPLACE           = 135
	HiveParserKW_RLIKE             = 136
	HiveParserKW_REGEXP            = 137
	HiveParserKW_TEMPORARY         = 138
	HiveParserKW_FUNCTION          = 139
	HiveParserKW_MACRO             = 140
	HiveParserKW_FILE              = 141
	HiveParserKW_JAR               = 142
	HiveParserKW_EXPLAIN           = 143
	HiveParserKW_EXTENDED          = 144
	HiveParserKW_FORMATTED         = 145
	HiveParserKW_DEPENDENCY        = 146
	HiveParserKW_LOGICAL           = 147
	HiveParserKW_SERDE             = 148
	HiveParserKW_WITH              = 149
	HiveParserKW_DEFERRED          = 150
	HiveParserKW_SERDEPROPERTIES   = 151
	HiveParserKW_DBPROPERTIES      = 152
	HiveParserKW_LIMIT             = 153
	HiveParserKW_OFFSET            = 154
	HiveParserKW_SET               = 155
	HiveParserKW_UNSET             = 156
	HiveParserKW_TBLPROPERTIES     = 157
	HiveParserKW_IDXPROPERTIES     = 158
	HiveParserKW_VALUE_TYPE        = 159
	HiveParserKW_ELEM_TYPE         = 160
	HiveParserKW_DEFINED           = 161
	HiveParserKW_CASE              = 162
	HiveParserKW_WHEN              = 163
	HiveParserKW_THEN              = 164
	HiveParserKW_ELSE              = 165
	HiveParserKW_END               = 166
	HiveParserKW_MAPJOIN           = 167
	HiveParserKW_STREAMTABLE       = 168
	HiveParserKW_CLUSTERSTATUS     = 169
	HiveParserKW_UTC               = 170
	HiveParserKW_UTCTIMESTAMP      = 171
	HiveParserKW_LONG              = 172
	HiveParserKW_DELETE            = 173
	HiveParserKW_PLUS              = 174
	HiveParserKW_MINUS             = 175
	HiveParserKW_FETCH             = 176
	HiveParserKW_INTERSECT         = 177
	HiveParserKW_VIEW              = 178
	HiveParserKW_VIEWS             = 179
	HiveParserKW_IN                = 180
	HiveParserKW_DATABASE          = 181
	HiveParserKW_DATABASES         = 182
	HiveParserKW_MATERIALIZED      = 183
	HiveParserKW_SCHEMA            = 184
	HiveParserKW_SCHEMAS           = 185
	HiveParserKW_GRANT             = 186
	HiveParserKW_REVOKE            = 187
	HiveParserKW_SSL               = 188
	HiveParserKW_UNDO              = 189
	HiveParserKW_LOCK              = 190
	HiveParserKW_LOCKS             = 191
	HiveParserKW_UNLOCK            = 192
	HiveParserKW_SHARED            = 193
	HiveParserKW_EXCLUSIVE         = 194
	HiveParserKW_PROCEDURE         = 195
	HiveParserKW_UNSIGNED          = 196
	HiveParserKW_WHILE             = 197
	HiveParserKW_READ              = 198
	HiveParserKW_READS             = 199
	HiveParserKW_PURGE             = 200
	HiveParserKW_RANGE             = 201
	HiveParserKW_ANALYZE           = 202
	HiveParserKW_BEFORE            = 203
	HiveParserKW_BETWEEN           = 204
	HiveParserKW_BOTH              = 205
	HiveParserKW_BINARY            = 206
	HiveParserKW_CROSS             = 207
	HiveParserKW_CONTINUE          = 208
	HiveParserKW_CURSOR            = 209
	HiveParserKW_TRIGGER           = 210
	HiveParserKW_RECORDREADER      = 211
	HiveParserKW_RECORDWRITER      = 212
	HiveParserKW_SEMI              = 213
	HiveParserKW_LATERAL           = 214
	HiveParserKW_TOUCH             = 215
	HiveParserKW_ARCHIVE           = 216
	HiveParserKW_UNARCHIVE         = 217
	HiveParserKW_COMPUTE           = 218
	HiveParserKW_STATISTICS        = 219
	HiveParserKW_USE               = 220
	HiveParserKW_OPTION            = 221
	HiveParserKW_CONCATENATE       = 222
	HiveParserKW_SHOW_DATABASE     = 223
	HiveParserKW_UPDATE            = 224
	HiveParserKW_RESTRICT          = 225
	HiveParserKW_CASCADE           = 226
	HiveParserKW_SKEWED            = 227
	HiveParserKW_ROLLUP            = 228
	HiveParserKW_CUBE              = 229
	HiveParserKW_DIRECTORIES       = 230
	HiveParserKW_FOR               = 231
	HiveParserKW_WINDOW            = 232
	HiveParserKW_UNBOUNDED         = 233
	HiveParserKW_PRECEDING         = 234
	HiveParserKW_FOLLOWING         = 235
	HiveParserKW_CURRENT           = 236
	HiveParserKW_CURRENT_DATE      = 237
	HiveParserKW_CURRENT_TIMESTAMP = 238
	HiveParserKW_LESS              = 239
	HiveParserKW_MORE              = 240
	HiveParserKW_OVER              = 241
	HiveParserKW_GROUPING          = 242
	HiveParserKW_SETS              = 243
	HiveParserKW_TRUNCATE          = 244
	HiveParserKW_NOSCAN            = 245
	HiveParserKW_USER              = 246
	HiveParserKW_ROLE              = 247
	HiveParserKW_ROLES             = 248
	HiveParserKW_INNER             = 249
	HiveParserKW_EXCHANGE          = 250
	HiveParserKW_URI               = 251
	HiveParserKW_SERVER            = 252
	HiveParserKW_ADMIN             = 253
	HiveParserKW_OWNER             = 254
	HiveParserKW_PRINCIPALS        = 255
	HiveParserKW_COMPACT           = 256
	HiveParserKW_COMPACTIONS       = 257
	HiveParserKW_TRANSACTIONS      = 258
	HiveParserKW_REWRITE           = 259
	HiveParserKW_AUTHORIZATION     = 260
	HiveParserKW_REOPTIMIZATION    = 261
	HiveParserKW_CONF              = 262
	HiveParserKW_VALUES            = 263
	HiveParserKW_RELOAD            = 264
	HiveParserKW_YEAR              = 265
	HiveParserKW_QUERY             = 266
	HiveParserKW_QUARTER           = 267
	HiveParserKW_MONTH             = 268
	HiveParserKW_WEEK              = 269
	HiveParserKW_DAY               = 270
	HiveParserKW_DOW               = 271
	HiveParserKW_HOUR              = 272
	HiveParserKW_MINUTE            = 273
	HiveParserKW_SECOND            = 274
	HiveParserKW_START             = 275
	HiveParserKW_TRANSACTION       = 276
	HiveParserKW_COMMIT            = 277
	HiveParserKW_ROLLBACK          = 278
	HiveParserKW_WORK              = 279
	HiveParserKW_ONLY              = 280
	HiveParserKW_WRITE             = 281
	HiveParserKW_ISOLATION         = 282
	HiveParserKW_LEVEL             = 283
	HiveParserKW_SNAPSHOT          = 284
	HiveParserKW_AUTOCOMMIT        = 285
	HiveParserKW_CACHE             = 286
	HiveParserKW_PRIMARY           = 287
	HiveParserKW_FOREIGN           = 288
	HiveParserKW_REFERENCES        = 289
	HiveParserKW_CONSTRAINT        = 290
	HiveParserKW_ENFORCED          = 291
	HiveParserKW_VALIDATE          = 292
	HiveParserKW_NOVALIDATE        = 293
	HiveParserKW_RELY              = 294
	HiveParserKW_NORELY            = 295
	HiveParserKW_UNIQUE            = 296
	HiveParserKW_KEY               = 297
	HiveParserKW_ABORT             = 298
	HiveParserKW_EXTRACT           = 299
	HiveParserKW_FLOOR             = 300
	HiveParserKW_MERGE             = 301
	HiveParserKW_MATCHED           = 302
	HiveParserKW_REPL              = 303
	HiveParserKW_DUMP              = 304
	HiveParserKW_STATUS            = 305
	HiveParserKW_VECTORIZATION     = 306
	HiveParserKW_SUMMARY           = 307
	HiveParserKW_OPERATOR          = 308
	HiveParserKW_EXPRESSION        = 309
	HiveParserKW_DETAIL            = 310
	HiveParserKW_WAIT              = 311
	HiveParserKW_RESOURCE          = 312
	HiveParserKW_PLAN              = 313
	HiveParserKW_QUERY_PARALLELISM = 314
	HiveParserKW_PLANS             = 315
	HiveParserKW_ACTIVATE          = 316
	HiveParserKW_DEFAULT           = 317
	HiveParserKW_CHECK             = 318
	HiveParserKW_POOL              = 319
	HiveParserKW_MOVE              = 320
	HiveParserKW_DO                = 321
	HiveParserKW_ALLOC_FRACTION    = 322
	HiveParserKW_SCHEDULING_POLICY = 323
	HiveParserKW_PATH              = 324
	HiveParserKW_MAPPING           = 325
	HiveParserKW_WORKLOAD          = 326
	HiveParserKW_MANAGEMENT        = 327
	HiveParserKW_ACTIVE            = 328
	HiveParserKW_UNMANAGED         = 329
	HiveParserKW_APPLICATION       = 330
	HiveParserKW_SYNC              = 331
	HiveParserDOT                  = 332
	HiveParserCOLON                = 333
	HiveParserCOMMA                = 334
	HiveParserSEMICOLON            = 335
	HiveParserLPAREN               = 336
	HiveParserRPAREN               = 337
	HiveParserLSQUARE              = 338
	HiveParserRSQUARE              = 339
	HiveParserLCURLY               = 340
	HiveParserRCURLY               = 341
	HiveParserEQUAL                = 342
	HiveParserEQUAL_NS             = 343
	HiveParserNOTEQUAL             = 344
	HiveParserLESSTHANOREQUALTO    = 345
	HiveParserLESSTHAN             = 346
	HiveParserGREATERTHANOREQUALTO = 347
	HiveParserGREATERTHAN          = 348
	HiveParserDIVIDE               = 349
	HiveParserPLUS                 = 350
	HiveParserMINUS                = 351
	HiveParserSTAR                 = 352
	HiveParserMOD                  = 353
	HiveParserDIV                  = 354
	HiveParserAMPERSAND            = 355
	HiveParserTILDE                = 356
	HiveParserBITWISEOR            = 357
	HiveParserCONCATENATE          = 358
	HiveParserBITWISEXOR           = 359
	HiveParserQUESTION             = 360
	HiveParserDOLLAR               = 361
	HiveParserStringLiteral        = 362
	HiveParserCharSetLiteral       = 363
	HiveParserIntegralLiteral      = 364
	HiveParserNumberLiteral        = 365
	HiveParserByteLengthLiteral    = 366
	HiveParserNumber               = 367
	HiveParserIdentifier           = 368
	HiveParserQuotedIdentifier     = 369
	HiveParserCharSetName          = 370
	HiveParserWS                   = 371
	HiveParserLINE_COMMENT         = 372
	HiveParserQUERY_HINT           = 373
	HiveParserSHOW_HINT            = 374
	HiveParserHIDDEN_HINT          = 375
)

// HiveParser rules.
const (
	HiveParserRULE_statement                                      = 0
	HiveParserRULE_explainStatement                               = 1
	HiveParserRULE_explainOption                                  = 2
	HiveParserRULE_vectorizationOnly                              = 3
	HiveParserRULE_vectorizatonDetail                             = 4
	HiveParserRULE_execStatement                                  = 5
	HiveParserRULE_loadStatement                                  = 6
	HiveParserRULE_replicationClause                              = 7
	HiveParserRULE_exportStatement                                = 8
	HiveParserRULE_importStatement                                = 9
	HiveParserRULE_replDumpStatement                              = 10
	HiveParserRULE_replLoadStatement                              = 11
	HiveParserRULE_replConfigs                                    = 12
	HiveParserRULE_replConfigsList                                = 13
	HiveParserRULE_replStatusStatement                            = 14
	HiveParserRULE_ddlStatement                                   = 15
	HiveParserRULE_ifExists                                       = 16
	HiveParserRULE_restrictOrCascade                              = 17
	HiveParserRULE_ifNotExists                                    = 18
	HiveParserRULE_rewriteEnabled                                 = 19
	HiveParserRULE_rewriteDisabled                                = 20
	HiveParserRULE_storedAsDirs                                   = 21
	HiveParserRULE_orReplace                                      = 22
	HiveParserRULE_createDatabaseStatement                        = 23
	HiveParserRULE_dbLocation                                     = 24
	HiveParserRULE_dbProperties                                   = 25
	HiveParserRULE_dbPropertiesList                               = 26
	HiveParserRULE_switchDatabaseStatement                        = 27
	HiveParserRULE_dropDatabaseStatement                          = 28
	HiveParserRULE_databaseComment                                = 29
	HiveParserRULE_createTableStatement                           = 30
	HiveParserRULE_truncateTableStatement                         = 31
	HiveParserRULE_dropTableStatement                             = 32
	HiveParserRULE_alterStatement                                 = 33
	HiveParserRULE_alterTableStatementSuffix                      = 34
	HiveParserRULE_alterTblPartitionStatementSuffix               = 35
	HiveParserRULE_alterStatementPartitionKeyType                 = 36
	HiveParserRULE_alterViewStatementSuffix                       = 37
	HiveParserRULE_alterMaterializedViewStatementSuffix           = 38
	HiveParserRULE_alterDatabaseStatementSuffix                   = 39
	HiveParserRULE_alterDatabaseSuffixProperties                  = 40
	HiveParserRULE_alterDatabaseSuffixSetOwner                    = 41
	HiveParserRULE_alterDatabaseSuffixSetLocation                 = 42
	HiveParserRULE_alterStatementSuffixRename                     = 43
	HiveParserRULE_alterStatementSuffixAddCol                     = 44
	HiveParserRULE_alterStatementSuffixAddConstraint              = 45
	HiveParserRULE_alterStatementSuffixUpdateColumns              = 46
	HiveParserRULE_alterStatementSuffixDropConstraint             = 47
	HiveParserRULE_alterStatementSuffixRenameCol                  = 48
	HiveParserRULE_alterStatementSuffixUpdateStatsCol             = 49
	HiveParserRULE_alterStatementSuffixUpdateStats                = 50
	HiveParserRULE_alterStatementChangeColPosition                = 51
	HiveParserRULE_alterStatementSuffixAddPartitions              = 52
	HiveParserRULE_alterStatementSuffixAddPartitionsElement       = 53
	HiveParserRULE_alterStatementSuffixTouch                      = 54
	HiveParserRULE_alterStatementSuffixArchive                    = 55
	HiveParserRULE_alterStatementSuffixUnArchive                  = 56
	HiveParserRULE_partitionLocation                              = 57
	HiveParserRULE_alterStatementSuffixDropPartitions             = 58
	HiveParserRULE_alterStatementSuffixProperties                 = 59
	HiveParserRULE_alterViewSuffixProperties                      = 60
	HiveParserRULE_alterMaterializedViewSuffixRewrite             = 61
	HiveParserRULE_alterMaterializedViewSuffixRebuild             = 62
	HiveParserRULE_alterStatementSuffixSerdeProperties            = 63
	HiveParserRULE_tablePartitionPrefix                           = 64
	HiveParserRULE_alterStatementSuffixFileFormat                 = 65
	HiveParserRULE_alterStatementSuffixClusterbySortby            = 66
	HiveParserRULE_alterTblPartitionStatementSuffixSkewedLocation = 67
	HiveParserRULE_skewedLocations                                = 68
	HiveParserRULE_skewedLocationsList                            = 69
	HiveParserRULE_skewedLocationMap                              = 70
	HiveParserRULE_alterStatementSuffixLocation                   = 71
	HiveParserRULE_alterStatementSuffixSkewedby                   = 72
	HiveParserRULE_alterStatementSuffixExchangePartition          = 73
	HiveParserRULE_alterStatementSuffixRenamePart                 = 74
	HiveParserRULE_alterStatementSuffixStatsPart                  = 75
	HiveParserRULE_alterStatementSuffixMergeFiles                 = 76
	HiveParserRULE_alterStatementSuffixBucketNum                  = 77
	HiveParserRULE_blocking                                       = 78
	HiveParserRULE_alterStatementSuffixCompact                    = 79
	HiveParserRULE_alterStatementSuffixSetOwner                   = 80
	HiveParserRULE_fileFormat                                     = 81
	HiveParserRULE_inputFileFormat                                = 82
	HiveParserRULE_tabTypeExpr                                    = 83
	HiveParserRULE_partTypeExpr                                   = 84
	HiveParserRULE_tabPartColTypeExpr                             = 85
	HiveParserRULE_descStatement                                  = 86
	HiveParserRULE_analyzeStatement                               = 87
	HiveParserRULE_showStatement                                  = 88
	HiveParserRULE_lockStatement                                  = 89
	HiveParserRULE_lockDatabase                                   = 90
	HiveParserRULE_lockMode                                       = 91
	HiveParserRULE_unlockStatement                                = 92
	HiveParserRULE_unlockDatabase                                 = 93
	HiveParserRULE_createRoleStatement                            = 94
	HiveParserRULE_dropRoleStatement                              = 95
	HiveParserRULE_grantPrivileges                                = 96
	HiveParserRULE_revokePrivileges                               = 97
	HiveParserRULE_grantRole                                      = 98
	HiveParserRULE_revokeRole                                     = 99
	HiveParserRULE_showRoleGrants                                 = 100
	HiveParserRULE_showRoles                                      = 101
	HiveParserRULE_showCurrentRole                                = 102
	HiveParserRULE_setRole                                        = 103
	HiveParserRULE_showGrants                                     = 104
	HiveParserRULE_showRolePrincipals                             = 105
	HiveParserRULE_privilegeIncludeColObject                      = 106
	HiveParserRULE_privilegeObject                                = 107
	HiveParserRULE_privObject                                     = 108
	HiveParserRULE_privObjectCols                                 = 109
	HiveParserRULE_privilegeList                                  = 110
	HiveParserRULE_privlegeDef                                    = 111
	HiveParserRULE_privilegeType                                  = 112
	HiveParserRULE_principalSpecification                         = 113
	HiveParserRULE_principalName                                  = 114
	HiveParserRULE_withGrantOption                                = 115
	HiveParserRULE_grantOptionFor                                 = 116
	HiveParserRULE_adminOptionFor                                 = 117
	HiveParserRULE_withAdminOption                                = 118
	HiveParserRULE_metastoreCheck                                 = 119
	HiveParserRULE_resourceList                                   = 120
	HiveParserRULE_resource                                       = 121
	HiveParserRULE_resourceType                                   = 122
	HiveParserRULE_createFunctionStatement                        = 123
	HiveParserRULE_dropFunctionStatement                          = 124
	HiveParserRULE_reloadFunctionStatement                        = 125
	HiveParserRULE_createMacroStatement                           = 126
	HiveParserRULE_dropMacroStatement                             = 127
	HiveParserRULE_createViewStatement                            = 128
	HiveParserRULE_createMaterializedViewStatement                = 129
	HiveParserRULE_viewPartition                                  = 130
	HiveParserRULE_dropViewStatement                              = 131
	HiveParserRULE_dropMaterializedViewStatement                  = 132
	HiveParserRULE_showFunctionIdentifier                         = 133
	HiveParserRULE_showStmtIdentifier                             = 134
	HiveParserRULE_tableComment                                   = 135
	HiveParserRULE_tablePartition                                 = 136
	HiveParserRULE_tableBuckets                                   = 137
	HiveParserRULE_tableSkewed                                    = 138
	HiveParserRULE_rowFormat                                      = 139
	HiveParserRULE_recordReader                                   = 140
	HiveParserRULE_recordWriter                                   = 141
	HiveParserRULE_rowFormatSerde                                 = 142
	HiveParserRULE_rowFormatDelimited                             = 143
	HiveParserRULE_tableRowFormat                                 = 144
	HiveParserRULE_tablePropertiesPrefixed                        = 145
	HiveParserRULE_tableProperties                                = 146
	HiveParserRULE_tablePropertiesList                            = 147
	HiveParserRULE_keyValueProperty                               = 148
	HiveParserRULE_keyProperty                                    = 149
	HiveParserRULE_tableRowFormatFieldIdentifier                  = 150
	HiveParserRULE_tableRowFormatCollItemsIdentifier              = 151
	HiveParserRULE_tableRowFormatMapKeysIdentifier                = 152
	HiveParserRULE_tableRowFormatLinesIdentifier                  = 153
	HiveParserRULE_tableRowNullFormat                             = 154
	HiveParserRULE_tableFileFormat                                = 155
	HiveParserRULE_tableLocation                                  = 156
	HiveParserRULE_columnNameTypeList                             = 157
	HiveParserRULE_columnNameTypeOrConstraintList                 = 158
	HiveParserRULE_columnNameColonTypeList                        = 159
	HiveParserRULE_columnNameList                                 = 160
	HiveParserRULE_columnName                                     = 161
	HiveParserRULE_extColumnName                                  = 162
	HiveParserRULE_columnNameOrderList                            = 163
	HiveParserRULE_columnParenthesesList                          = 164
	HiveParserRULE_enableValidateSpecification                    = 165
	HiveParserRULE_enableSpecification                            = 166
	HiveParserRULE_validateSpecification                          = 167
	HiveParserRULE_enforcedSpecification                          = 168
	HiveParserRULE_relySpecification                              = 169
	HiveParserRULE_createConstraint                               = 170
	HiveParserRULE_alterConstraintWithName                        = 171
	HiveParserRULE_tableLevelConstraint                           = 172
	HiveParserRULE_pkUkConstraint                                 = 173
	HiveParserRULE_checkConstraint                                = 174
	HiveParserRULE_createForeignKey                               = 175
	HiveParserRULE_alterForeignKeyWithName                        = 176
	HiveParserRULE_skewedValueElement                             = 177
	HiveParserRULE_skewedColumnValuePairList                      = 178
	HiveParserRULE_skewedColumnValuePair                          = 179
	HiveParserRULE_skewedColumnValues                             = 180
	HiveParserRULE_skewedColumnValue                              = 181
	HiveParserRULE_skewedValueLocationElement                     = 182
	HiveParserRULE_orderSpecification                             = 183
	HiveParserRULE_nullOrdering                                   = 184
	HiveParserRULE_columnNameOrder                                = 185
	HiveParserRULE_columnNameCommentList                          = 186
	HiveParserRULE_columnNameComment                              = 187
	HiveParserRULE_columnRefOrder                                 = 188
	HiveParserRULE_columnNameType                                 = 189
	HiveParserRULE_columnNameTypeOrConstraint                     = 190
	HiveParserRULE_tableConstraint                                = 191
	HiveParserRULE_columnNameTypeConstraint                       = 192
	HiveParserRULE_columnConstraint                               = 193
	HiveParserRULE_foreignKeyConstraint                           = 194
	HiveParserRULE_colConstraint                                  = 195
	HiveParserRULE_alterColumnConstraint                          = 196
	HiveParserRULE_alterForeignKeyConstraint                      = 197
	HiveParserRULE_alterColConstraint                             = 198
	HiveParserRULE_columnConstraintType                           = 199
	HiveParserRULE_defaultVal                                     = 200
	HiveParserRULE_tableConstraintType                            = 201
	HiveParserRULE_constraintOptsCreate                           = 202
	HiveParserRULE_constraintOptsAlter                            = 203
	HiveParserRULE_columnNameColonType                            = 204
	HiveParserRULE_colType                                        = 205
	HiveParserRULE_colTypeList                                    = 206
	HiveParserRULE_type_db_col                                    = 207
	HiveParserRULE_primitiveType                                  = 208
	HiveParserRULE_listType                                       = 209
	HiveParserRULE_structType                                     = 210
	HiveParserRULE_mapType                                        = 211
	HiveParserRULE_unionType                                      = 212
	HiveParserRULE_setOperator                                    = 213
	HiveParserRULE_queryStatementExpression                       = 214
	HiveParserRULE_queryStatementExpressionBody                   = 215
	HiveParserRULE_withClause                                     = 216
	HiveParserRULE_cteStatement                                   = 217
	HiveParserRULE_fromStatement                                  = 218
	HiveParserRULE_singleFromStatement                            = 219
	HiveParserRULE_regularBody                                    = 220
	HiveParserRULE_atomSelectStatement                            = 221
	HiveParserRULE_selectStatement                                = 222
	HiveParserRULE_setOpSelectStatement                           = 223
	HiveParserRULE_selectStatementWithCTE                         = 224
	HiveParserRULE_body                                           = 225
	HiveParserRULE_insertClause                                   = 226
	HiveParserRULE_destination                                    = 227
	HiveParserRULE_limitClause                                    = 228
	HiveParserRULE_deleteStatement                                = 229
	HiveParserRULE_columnAssignmentClause                         = 230
	HiveParserRULE_setColumnsClause                               = 231
	HiveParserRULE_updateStatement                                = 232
	HiveParserRULE_sqlTransactionStatement                        = 233
	HiveParserRULE_startTransactionStatement                      = 234
	HiveParserRULE_transactionMode                                = 235
	HiveParserRULE_transactionAccessMode                          = 236
	HiveParserRULE_isolationLevel                                 = 237
	HiveParserRULE_levelOfIsolation                               = 238
	HiveParserRULE_commitStatement                                = 239
	HiveParserRULE_rollbackStatement                              = 240
	HiveParserRULE_setAutoCommitStatement                         = 241
	HiveParserRULE_abortTransactionStatement                      = 242
	HiveParserRULE_mergeStatement                                 = 243
	HiveParserRULE_whenClauses                                    = 244
	HiveParserRULE_whenNotMatchedClause                           = 245
	HiveParserRULE_whenMatchedAndClause                           = 246
	HiveParserRULE_whenMatchedThenClause                          = 247
	HiveParserRULE_updateOrDelete                                 = 248
	HiveParserRULE_killQueryStatement                             = 249
	HiveParserRULE_selectClause                                   = 250
	HiveParserRULE_selectList                                     = 251
	HiveParserRULE_selectTrfmClause                               = 252
	HiveParserRULE_selectItem                                     = 253
	HiveParserRULE_trfmClause                                     = 254
	HiveParserRULE_selectExpression                               = 255
	HiveParserRULE_selectExpressionList                           = 256
	HiveParserRULE_window_clause                                  = 257
	HiveParserRULE_window_defn                                    = 258
	HiveParserRULE_window_specification                           = 259
	HiveParserRULE_window_frame                                   = 260
	HiveParserRULE_window_range_expression                        = 261
	HiveParserRULE_window_value_expression                        = 262
	HiveParserRULE_window_frame_start_boundary                    = 263
	HiveParserRULE_window_frame_boundary                          = 264
	HiveParserRULE_tableAllColumns                                = 265
	HiveParserRULE_tableOrColumn                                  = 266
	HiveParserRULE_expressionList                                 = 267
	HiveParserRULE_aliasList                                      = 268
	HiveParserRULE_fromClause                                     = 269
	HiveParserRULE_fromSource                                     = 270
	HiveParserRULE_atomjoinSource                                 = 271
	HiveParserRULE_joinSource                                     = 272
	HiveParserRULE_joinSourcePart                                 = 273
	HiveParserRULE_uniqueJoinSource                               = 274
	HiveParserRULE_uniqueJoinExpr                                 = 275
	HiveParserRULE_uniqueJoinToken                                = 276
	HiveParserRULE_joinToken                                      = 277
	HiveParserRULE_lateralView                                    = 278
	HiveParserRULE_tableAlias                                     = 279
	HiveParserRULE_tableBucketSample                              = 280
	HiveParserRULE_splitSample                                    = 281
	HiveParserRULE_tableSample                                    = 282
	HiveParserRULE_tableSource                                    = 283
	HiveParserRULE_uniqueJoinTableSource                          = 284
	HiveParserRULE_tableName                                      = 285
	HiveParserRULE_viewName                                       = 286
	HiveParserRULE_subQuerySource                                 = 287
	HiveParserRULE_partitioningSpec                               = 288
	HiveParserRULE_partitionTableFunctionSource                   = 289
	HiveParserRULE_partitionedTableFunction                       = 290
	HiveParserRULE_whereClause                                    = 291
	HiveParserRULE_searchCondition                                = 292
	HiveParserRULE_valuesClause                                   = 293
	HiveParserRULE_valuesTableConstructor                         = 294
	HiveParserRULE_valueRowConstructor                            = 295
	HiveParserRULE_virtualTableSource                             = 296
	HiveParserRULE_groupByClause                                  = 297
	HiveParserRULE_groupby_expression                             = 298
	HiveParserRULE_groupByEmpty                                   = 299
	HiveParserRULE_rollupStandard                                 = 300
	HiveParserRULE_rollupOldSyntax                                = 301
	HiveParserRULE_groupingSetExpression                          = 302
	HiveParserRULE_groupingSetExpressionMultiple                  = 303
	HiveParserRULE_groupingExpressionSingle                       = 304
	HiveParserRULE_havingClause                                   = 305
	HiveParserRULE_havingCondition                                = 306
	HiveParserRULE_expressionsInParenthesis                       = 307
	HiveParserRULE_expressionsNotInParenthesis                    = 308
	HiveParserRULE_expressionPart                                 = 309
	HiveParserRULE_expressions                                    = 310
	HiveParserRULE_columnRefOrderInParenthesis                    = 311
	HiveParserRULE_columnRefOrderNotInParenthesis                 = 312
	HiveParserRULE_orderByClause                                  = 313
	HiveParserRULE_clusterByClause                                = 314
	HiveParserRULE_partitionByClause                              = 315
	HiveParserRULE_distributeByClause                             = 316
	HiveParserRULE_sortByClause                                   = 317
	HiveParserRULE_function                                       = 318
	HiveParserRULE_functionName                                   = 319
	HiveParserRULE_castExpression                                 = 320
	HiveParserRULE_caseExpression                                 = 321
	HiveParserRULE_whenExpression                                 = 322
	HiveParserRULE_floorExpression                                = 323
	HiveParserRULE_floorDateQualifiers                            = 324
	HiveParserRULE_extractExpression                              = 325
	HiveParserRULE_timeQualifiers                                 = 326
	HiveParserRULE_constant                                       = 327
	HiveParserRULE_stringLiteralSequence                          = 328
	HiveParserRULE_charSetStringLiteral                           = 329
	HiveParserRULE_dateLiteral                                    = 330
	HiveParserRULE_timestampLiteral                               = 331
	HiveParserRULE_timestampLocalTZLiteral                        = 332
	HiveParserRULE_intervalValue                                  = 333
	HiveParserRULE_intervalLiteral                                = 334
	HiveParserRULE_intervalExpression                             = 335
	HiveParserRULE_intervalQualifiers                             = 336
	HiveParserRULE_atomExpression                                 = 337
	HiveParserRULE_precedenceUnaryOperator                        = 338
	HiveParserRULE_isCondition                                    = 339
	HiveParserRULE_precedenceBitwiseXorOperator                   = 340
	HiveParserRULE_precedenceStarOperator                         = 341
	HiveParserRULE_precedencePlusOperator                         = 342
	HiveParserRULE_precedenceConcatenateOperator                  = 343
	HiveParserRULE_precedenceAmpersandOperator                    = 344
	HiveParserRULE_precedenceBitwiseOrOperator                    = 345
	HiveParserRULE_precedenceRegexpOperator                       = 346
	HiveParserRULE_precedenceSimilarOperator                      = 347
	HiveParserRULE_precedenceDistinctOperator                     = 348
	HiveParserRULE_precedenceEqualOperator                        = 349
	HiveParserRULE_precedenceNotOperator                          = 350
	HiveParserRULE_precedenceAndOperator                          = 351
	HiveParserRULE_precedenceOrOperator                           = 352
	HiveParserRULE_expression                                     = 353
	HiveParserRULE_subQueryExpression                             = 354
	HiveParserRULE_precedenceSimilarExpressionPart                = 355
	HiveParserRULE_precedenceSimilarExpressionAtom                = 356
	HiveParserRULE_precedenceSimilarExpressionIn                  = 357
	HiveParserRULE_precedenceSimilarExpressionPartNot             = 358
	HiveParserRULE_booleanValue                                   = 359
	HiveParserRULE_booleanValueTok                                = 360
	HiveParserRULE_tableOrPartition                               = 361
	HiveParserRULE_partitionSpec                                  = 362
	HiveParserRULE_partitionVal                                   = 363
	HiveParserRULE_dropPartitionSpec                              = 364
	HiveParserRULE_dropPartitionVal                               = 365
	HiveParserRULE_dropPartitionOperator                          = 366
	HiveParserRULE_sysFuncNames                                   = 367
	HiveParserRULE_descFuncNames                                  = 368
	HiveParserRULE_identifier                                     = 369
	HiveParserRULE_functionIdentifier                             = 370
	HiveParserRULE_principalIdentifier                            = 371
	HiveParserRULE_nonReserved                                    = 372
	HiveParserRULE_sql11ReservedKeywordsUsedAsFunctionName        = 373
	HiveParserRULE_resourcePlanDdlStatements                      = 374
	HiveParserRULE_rpAssign                                       = 375
	HiveParserRULE_rpAssignList                                   = 376
	HiveParserRULE_rpUnassign                                     = 377
	HiveParserRULE_rpUnassignList                                 = 378
	HiveParserRULE_createResourcePlanStatement                    = 379
	HiveParserRULE_withReplace                                    = 380
	HiveParserRULE_activate                                       = 381
	HiveParserRULE_enable                                         = 382
	HiveParserRULE_disable                                        = 383
	HiveParserRULE_unmanaged                                      = 384
	HiveParserRULE_alterResourcePlanStatement                     = 385
	HiveParserRULE_globalWmStatement                              = 386
	HiveParserRULE_replaceResourcePlanStatement                   = 387
	HiveParserRULE_dropResourcePlanStatement                      = 388
	HiveParserRULE_poolPath                                       = 389
	HiveParserRULE_triggerExpression                              = 390
	HiveParserRULE_triggerExpressionStandalone                    = 391
	HiveParserRULE_triggerOrExpression                            = 392
	HiveParserRULE_triggerAndExpression                           = 393
	HiveParserRULE_triggerAtomExpression                          = 394
	HiveParserRULE_triggerLiteral                                 = 395
	HiveParserRULE_comparisionOperator                            = 396
	HiveParserRULE_triggerActionExpression                        = 397
	HiveParserRULE_triggerActionExpressionStandalone              = 398
	HiveParserRULE_createTriggerStatement                         = 399
	HiveParserRULE_alterTriggerStatement                          = 400
	HiveParserRULE_dropTriggerStatement                           = 401
	HiveParserRULE_poolAssign                                     = 402
	HiveParserRULE_poolAssignList                                 = 403
	HiveParserRULE_createPoolStatement                            = 404
	HiveParserRULE_alterPoolStatement                             = 405
	HiveParserRULE_dropPoolStatement                              = 406
	HiveParserRULE_createMappingStatement                         = 407
	HiveParserRULE_alterMappingStatement                          = 408
	HiveParserRULE_dropMappingStatement                           = 409
)

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) ExplainStatement() IExplainStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplainStatementContext)
}

func (s *StatementContext) EOF() antlr.TerminalNode {
	return s.GetToken(HiveParserEOF, 0)
}

func (s *StatementContext) ExecStatement() IExecStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *HiveParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, HiveParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(826)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_EXPLAIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(820)
			p.ExplainStatement()
		}
		{
			p.SetState(821)
			p.Match(HiveParserEOF)
		}

	case HiveParserKW_DESC, HiveParserKW_FROM, HiveParserKW_SELECT, HiveParserKW_INSERT, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_IMPORT, HiveParserKW_CREATE, HiveParserKW_ALTER, HiveParserKW_DESCRIBE, HiveParserKW_DROP, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserKW_KILL, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_REPLACE, HiveParserKW_WITH, HiveParserKW_SET, HiveParserKW_DELETE, HiveParserKW_GRANT, HiveParserKW_REVOKE, HiveParserKW_LOCK, HiveParserKW_UNLOCK, HiveParserKW_ANALYZE, HiveParserKW_USE, HiveParserKW_UPDATE, HiveParserKW_TRUNCATE, HiveParserKW_RELOAD, HiveParserKW_START, HiveParserKW_COMMIT, HiveParserKW_ROLLBACK, HiveParserKW_ABORT, HiveParserKW_MERGE, HiveParserKW_REPL, HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(823)
			p.ExecStatement()
		}
		{
			p.SetState(824)
			p.Match(HiveParserEOF)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExplainStatementContext is an interface to support dynamic dispatch.
type IExplainStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainStatementContext differentiates from other interfaces.
	IsExplainStatementContext()
}

type ExplainStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainStatementContext() *ExplainStatementContext {
	var p = new(ExplainStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_explainStatement
	return p
}

func (*ExplainStatementContext) IsExplainStatementContext() {}

func NewExplainStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainStatementContext {
	var p = new(ExplainStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_explainStatement

	return p
}

func (s *ExplainStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainStatementContext) KW_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXPLAIN, 0)
}

func (s *ExplainStatementContext) ExecStatement() IExecStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecStatementContext)
}

func (s *ExplainStatementContext) KW_REWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REWRITE, 0)
}

func (s *ExplainStatementContext) QueryStatementExpression() IQueryStatementExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryStatementExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryStatementExpressionContext)
}

func (s *ExplainStatementContext) AllExplainOption() []IExplainOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExplainOptionContext)(nil)).Elem())
	var tst = make([]IExplainOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExplainOptionContext)
		}
	}

	return tst
}

func (s *ExplainStatementContext) ExplainOption(i int) IExplainOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExplainOptionContext)
}

func (s *ExplainStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplainStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExplainStatement(s)
	}
}

func (s *ExplainStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExplainStatement(s)
	}
}

func (p *HiveParser) ExplainStatement() (localctx IExplainStatementContext) {
	localctx = NewExplainStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, HiveParserRULE_explainStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(828)
		p.Match(HiveParserKW_EXPLAIN)
	}
	p.SetState(838)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_DESC, HiveParserKW_FROM, HiveParserKW_SELECT, HiveParserKW_INSERT, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_IMPORT, HiveParserKW_CREATE, HiveParserKW_ALTER, HiveParserKW_DESCRIBE, HiveParserKW_DROP, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserKW_KILL, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_REPLACE, HiveParserKW_EXTENDED, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_WITH, HiveParserKW_SET, HiveParserKW_DELETE, HiveParserKW_GRANT, HiveParserKW_REVOKE, HiveParserKW_LOCK, HiveParserKW_UNLOCK, HiveParserKW_ANALYZE, HiveParserKW_USE, HiveParserKW_UPDATE, HiveParserKW_TRUNCATE, HiveParserKW_AUTHORIZATION, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_START, HiveParserKW_COMMIT, HiveParserKW_ROLLBACK, HiveParserKW_ABORT, HiveParserKW_MERGE, HiveParserKW_REPL, HiveParserKW_VECTORIZATION, HiveParserLPAREN:
		p.SetState(832)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(829)
					p.ExplainOption()
				}

			}
			p.SetState(834)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
		}
		{
			p.SetState(835)
			p.ExecStatement()
		}

	case HiveParserKW_REWRITE:
		{
			p.SetState(836)
			p.Match(HiveParserKW_REWRITE)
		}
		{
			p.SetState(837)
			p.QueryStatementExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExplainOptionContext is an interface to support dynamic dispatch.
type IExplainOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainOptionContext differentiates from other interfaces.
	IsExplainOptionContext()
}

type ExplainOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainOptionContext() *ExplainOptionContext {
	var p = new(ExplainOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_explainOption
	return p
}

func (*ExplainOptionContext) IsExplainOptionContext() {}

func NewExplainOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainOptionContext {
	var p = new(ExplainOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_explainOption

	return p
}

func (s *ExplainOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainOptionContext) KW_EXTENDED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXTENDED, 0)
}

func (s *ExplainOptionContext) KW_FORMATTED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FORMATTED, 0)
}

func (s *ExplainOptionContext) KW_DEPENDENCY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEPENDENCY, 0)
}

func (s *ExplainOptionContext) KW_LOGICAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOGICAL, 0)
}

func (s *ExplainOptionContext) KW_AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AUTHORIZATION, 0)
}

func (s *ExplainOptionContext) KW_ANALYZE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ANALYZE, 0)
}

func (s *ExplainOptionContext) KW_REOPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REOPTIMIZATION, 0)
}

func (s *ExplainOptionContext) KW_VECTORIZATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VECTORIZATION, 0)
}

func (s *ExplainOptionContext) VectorizationOnly() IVectorizationOnlyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVectorizationOnlyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVectorizationOnlyContext)
}

func (s *ExplainOptionContext) VectorizatonDetail() IVectorizatonDetailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVectorizatonDetailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVectorizatonDetailContext)
}

func (s *ExplainOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplainOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExplainOption(s)
	}
}

func (s *ExplainOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExplainOption(s)
	}
}

func (p *HiveParser) ExplainOption() (localctx IExplainOptionContext) {
	localctx = NewExplainOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, HiveParserRULE_explainOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(854)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_EXTENDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(840)
			p.Match(HiveParserKW_EXTENDED)
		}

	case HiveParserKW_FORMATTED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(841)
			p.Match(HiveParserKW_FORMATTED)
		}

	case HiveParserKW_DEPENDENCY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(842)
			p.Match(HiveParserKW_DEPENDENCY)
		}

	case HiveParserKW_LOGICAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(843)
			p.Match(HiveParserKW_LOGICAL)
		}

	case HiveParserKW_AUTHORIZATION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(844)
			p.Match(HiveParserKW_AUTHORIZATION)
		}

	case HiveParserKW_ANALYZE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(845)
			p.Match(HiveParserKW_ANALYZE)
		}

	case HiveParserKW_REOPTIMIZATION:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(846)
			p.Match(HiveParserKW_REOPTIMIZATION)
		}

	case HiveParserKW_VECTORIZATION:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(847)
			p.Match(HiveParserKW_VECTORIZATION)
		}
		p.SetState(849)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ONLY {
			{
				p.SetState(848)
				p.VectorizationOnly()
			}

		}
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-307)&-(0x1f+1)) == 0 && ((1<<uint((_la-307)))&((1<<(HiveParserKW_SUMMARY-307))|(1<<(HiveParserKW_OPERATOR-307))|(1<<(HiveParserKW_EXPRESSION-307))|(1<<(HiveParserKW_DETAIL-307)))) != 0 {
			{
				p.SetState(851)
				p.VectorizatonDetail()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVectorizationOnlyContext is an interface to support dynamic dispatch.
type IVectorizationOnlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVectorizationOnlyContext differentiates from other interfaces.
	IsVectorizationOnlyContext()
}

type VectorizationOnlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVectorizationOnlyContext() *VectorizationOnlyContext {
	var p = new(VectorizationOnlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_vectorizationOnly
	return p
}

func (*VectorizationOnlyContext) IsVectorizationOnlyContext() {}

func NewVectorizationOnlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VectorizationOnlyContext {
	var p = new(VectorizationOnlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_vectorizationOnly

	return p
}

func (s *VectorizationOnlyContext) GetParser() antlr.Parser { return s.parser }

func (s *VectorizationOnlyContext) KW_ONLY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ONLY, 0)
}

func (s *VectorizationOnlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectorizationOnlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VectorizationOnlyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterVectorizationOnly(s)
	}
}

func (s *VectorizationOnlyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitVectorizationOnly(s)
	}
}

func (p *HiveParser) VectorizationOnly() (localctx IVectorizationOnlyContext) {
	localctx = NewVectorizationOnlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, HiveParserRULE_vectorizationOnly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(856)
		p.Match(HiveParserKW_ONLY)
	}

	return localctx
}

// IVectorizatonDetailContext is an interface to support dynamic dispatch.
type IVectorizatonDetailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVectorizatonDetailContext differentiates from other interfaces.
	IsVectorizatonDetailContext()
}

type VectorizatonDetailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVectorizatonDetailContext() *VectorizatonDetailContext {
	var p = new(VectorizatonDetailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_vectorizatonDetail
	return p
}

func (*VectorizatonDetailContext) IsVectorizatonDetailContext() {}

func NewVectorizatonDetailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VectorizatonDetailContext {
	var p = new(VectorizatonDetailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_vectorizatonDetail

	return p
}

func (s *VectorizatonDetailContext) GetParser() antlr.Parser { return s.parser }

func (s *VectorizatonDetailContext) KW_SUMMARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SUMMARY, 0)
}

func (s *VectorizatonDetailContext) KW_OPERATOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPERATOR, 0)
}

func (s *VectorizatonDetailContext) KW_EXPRESSION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXPRESSION, 0)
}

func (s *VectorizatonDetailContext) KW_DETAIL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DETAIL, 0)
}

func (s *VectorizatonDetailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectorizatonDetailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VectorizatonDetailContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterVectorizatonDetail(s)
	}
}

func (s *VectorizatonDetailContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitVectorizatonDetail(s)
	}
}

func (p *HiveParser) VectorizatonDetail() (localctx IVectorizatonDetailContext) {
	localctx = NewVectorizatonDetailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, HiveParserRULE_vectorizatonDetail)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(858)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-307)&-(0x1f+1)) == 0 && ((1<<uint((_la-307)))&((1<<(HiveParserKW_SUMMARY-307))|(1<<(HiveParserKW_OPERATOR-307))|(1<<(HiveParserKW_EXPRESSION-307))|(1<<(HiveParserKW_DETAIL-307)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExecStatementContext is an interface to support dynamic dispatch.
type IExecStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecStatementContext differentiates from other interfaces.
	IsExecStatementContext()
}

type ExecStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecStatementContext() *ExecStatementContext {
	var p = new(ExecStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_execStatement
	return p
}

func (*ExecStatementContext) IsExecStatementContext() {}

func NewExecStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecStatementContext {
	var p = new(ExecStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_execStatement

	return p
}

func (s *ExecStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecStatementContext) QueryStatementExpression() IQueryStatementExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryStatementExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryStatementExpressionContext)
}

func (s *ExecStatementContext) LoadStatement() ILoadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadStatementContext)
}

func (s *ExecStatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *ExecStatementContext) ImportStatement() IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *ExecStatementContext) ReplDumpStatement() IReplDumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplDumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplDumpStatementContext)
}

func (s *ExecStatementContext) ReplLoadStatement() IReplLoadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplLoadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplLoadStatementContext)
}

func (s *ExecStatementContext) ReplStatusStatement() IReplStatusStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplStatusStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplStatusStatementContext)
}

func (s *ExecStatementContext) DdlStatement() IDdlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdlStatementContext)
}

func (s *ExecStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *ExecStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *ExecStatementContext) SqlTransactionStatement() ISqlTransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlTransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlTransactionStatementContext)
}

func (s *ExecStatementContext) MergeStatement() IMergeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMergeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMergeStatementContext)
}

func (s *ExecStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExecStatement(s)
	}
}

func (s *ExecStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExecStatement(s)
	}
}

func (p *HiveParser) ExecStatement() (localctx IExecStatementContext) {
	localctx = NewExecStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, HiveParserRULE_execStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(860)
			p.QueryStatementExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(861)
			p.LoadStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(862)
			p.ExportStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(863)
			p.ImportStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(864)
			p.ReplDumpStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(865)
			p.ReplLoadStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(866)
			p.ReplStatusStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(867)
			p.DdlStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(868)
			p.DeleteStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(869)
			p.UpdateStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(870)
			p.SqlTransactionStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(871)
			p.MergeStatement()
		}

	}

	return localctx
}

// ILoadStatementContext is an interface to support dynamic dispatch.
type ILoadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadStatementContext differentiates from other interfaces.
	IsLoadStatementContext()
}

type LoadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadStatementContext() *LoadStatementContext {
	var p = new(LoadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_loadStatement
	return p
}

func (*LoadStatementContext) IsLoadStatementContext() {}

func NewLoadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadStatementContext {
	var p = new(LoadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_loadStatement

	return p
}

func (s *LoadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadStatementContext) KW_LOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOAD, 0)
}

func (s *LoadStatementContext) KW_DATA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATA, 0)
}

func (s *LoadStatementContext) KW_INPATH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPATH, 0)
}

func (s *LoadStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *LoadStatementContext) KW_INTO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTO, 0)
}

func (s *LoadStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *LoadStatementContext) TableOrPartition() ITableOrPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrPartitionContext)
}

func (s *LoadStatementContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCAL, 0)
}

func (s *LoadStatementContext) KW_OVERWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OVERWRITE, 0)
}

func (s *LoadStatementContext) InputFileFormat() IInputFileFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputFileFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInputFileFormatContext)
}

func (s *LoadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLoadStatement(s)
	}
}

func (s *LoadStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLoadStatement(s)
	}
}

func (p *HiveParser) LoadStatement() (localctx ILoadStatementContext) {
	localctx = NewLoadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, HiveParserRULE_loadStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		p.Match(HiveParserKW_LOAD)
	}
	{
		p.SetState(875)
		p.Match(HiveParserKW_DATA)
	}
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LOCAL {
		{
			p.SetState(876)
			p.Match(HiveParserKW_LOCAL)
		}

	}
	{
		p.SetState(879)
		p.Match(HiveParserKW_INPATH)
	}
	{
		p.SetState(880)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_OVERWRITE {
		{
			p.SetState(881)
			p.Match(HiveParserKW_OVERWRITE)
		}

	}
	{
		p.SetState(884)
		p.Match(HiveParserKW_INTO)
	}
	{
		p.SetState(885)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(886)
		p.TableOrPartition()
	}
	p.SetState(888)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_INPUTFORMAT {
		{
			p.SetState(887)
			p.InputFileFormat()
		}

	}

	return localctx
}

// IReplicationClauseContext is an interface to support dynamic dispatch.
type IReplicationClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplicationClauseContext differentiates from other interfaces.
	IsReplicationClauseContext()
}

type ReplicationClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplicationClauseContext() *ReplicationClauseContext {
	var p = new(ReplicationClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replicationClause
	return p
}

func (*ReplicationClauseContext) IsReplicationClauseContext() {}

func NewReplicationClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplicationClauseContext {
	var p = new(ReplicationClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replicationClause

	return p
}

func (s *ReplicationClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplicationClauseContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOR, 0)
}

func (s *ReplicationClauseContext) KW_REPLICATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLICATION, 0)
}

func (s *ReplicationClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ReplicationClauseContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ReplicationClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ReplicationClauseContext) KW_METADATA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_METADATA, 0)
}

func (s *ReplicationClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplicationClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplicationClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplicationClause(s)
	}
}

func (s *ReplicationClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplicationClause(s)
	}
}

func (p *HiveParser) ReplicationClause() (localctx IReplicationClauseContext) {
	localctx = NewReplicationClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, HiveParserRULE_replicationClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(890)
		p.Match(HiveParserKW_FOR)
	}
	p.SetState(892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_METADATA {
		{
			p.SetState(891)
			p.Match(HiveParserKW_METADATA)
		}

	}
	{
		p.SetState(894)
		p.Match(HiveParserKW_REPLICATION)
	}
	{
		p.SetState(895)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(896)
		p.Match(HiveParserStringLiteral)
	}
	{
		p.SetState(897)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) KW_EXPORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXPORT, 0)
}

func (s *ExportStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *ExportStatementContext) TableOrPartition() ITableOrPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrPartitionContext)
}

func (s *ExportStatementContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *ExportStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ExportStatementContext) ReplicationClause() IReplicationClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplicationClauseContext)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExportStatement(s)
	}
}

func (s *ExportStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExportStatement(s)
	}
}

func (p *HiveParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, HiveParserRULE_exportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(899)
		p.Match(HiveParserKW_EXPORT)
	}
	{
		p.SetState(900)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(901)
		p.TableOrPartition()
	}
	{
		p.SetState(902)
		p.Match(HiveParserKW_TO)
	}
	{
		p.SetState(903)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_FOR {
		{
			p.SetState(904)
			p.ReplicationClause()
		}

	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPath returns the path token.
	GetPath() antlr.Token

	// SetPath sets the path token.
	SetPath(antlr.Token)

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	path   antlr.Token
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) GetPath() antlr.Token { return s.path }

func (s *ImportStatementContext) SetPath(v antlr.Token) { s.path = v }

func (s *ImportStatementContext) KW_IMPORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IMPORT, 0)
}

func (s *ImportStatementContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *ImportStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *ImportStatementContext) TableOrPartition() ITableOrPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrPartitionContext)
}

func (s *ImportStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ImportStatementContext) TableLocation() ITableLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableLocationContext)
}

func (s *ImportStatementContext) KW_EXTERNAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXTERNAL, 0)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterImportStatement(s)
	}
}

func (s *ImportStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitImportStatement(s)
	}
}

func (p *HiveParser) ImportStatement() (localctx IImportStatementContext) {
	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, HiveParserRULE_importStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(907)
		p.Match(HiveParserKW_IMPORT)
	}
	p.SetState(913)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TABLE || _la == HiveParserKW_EXTERNAL {
		p.SetState(909)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_EXTERNAL {
			{
				p.SetState(908)
				p.Match(HiveParserKW_EXTERNAL)
			}

		}
		{
			p.SetState(911)
			p.Match(HiveParserKW_TABLE)
		}
		{
			p.SetState(912)
			p.TableOrPartition()
		}

	}
	{
		p.SetState(915)
		p.Match(HiveParserKW_FROM)
	}

	{
		p.SetState(916)

		var _m = p.Match(HiveParserStringLiteral)

		localctx.(*ImportStatementContext).path = _m
	}

	p.SetState(918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LOCATION {
		{
			p.SetState(917)
			p.TableLocation()
		}

	}

	return localctx
}

// IReplDumpStatementContext is an interface to support dynamic dispatch.
type IReplDumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplDumpStatementContext differentiates from other interfaces.
	IsReplDumpStatementContext()
}

type ReplDumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplDumpStatementContext() *ReplDumpStatementContext {
	var p = new(ReplDumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replDumpStatement
	return p
}

func (*ReplDumpStatementContext) IsReplDumpStatementContext() {}

func NewReplDumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplDumpStatementContext {
	var p = new(ReplDumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replDumpStatement

	return p
}

func (s *ReplDumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplDumpStatementContext) KW_REPL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPL, 0)
}

func (s *ReplDumpStatementContext) KW_DUMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DUMP, 0)
}

func (s *ReplDumpStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ReplDumpStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ReplDumpStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *ReplDumpStatementContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *ReplDumpStatementContext) AllNumber() []antlr.TerminalNode {
	return s.GetTokens(HiveParserNumber)
}

func (s *ReplDumpStatementContext) Number(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, i)
}

func (s *ReplDumpStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *ReplDumpStatementContext) ReplConfigs() IReplConfigsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplConfigsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplConfigsContext)
}

func (s *ReplDumpStatementContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *ReplDumpStatementContext) KW_LIMIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIMIT, 0)
}

func (s *ReplDumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplDumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplDumpStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplDumpStatement(s)
	}
}

func (s *ReplDumpStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplDumpStatement(s)
	}
}

func (p *HiveParser) ReplDumpStatement() (localctx IReplDumpStatementContext) {
	localctx = NewReplDumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, HiveParserRULE_replDumpStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(920)
		p.Match(HiveParserKW_REPL)
	}
	{
		p.SetState(921)
		p.Match(HiveParserKW_DUMP)
	}
	{
		p.SetState(922)
		p.Identifier()
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserDOT {
		{
			p.SetState(923)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(924)
			p.Identifier()
		}

	}
	p.SetState(937)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_FROM {
		{
			p.SetState(927)
			p.Match(HiveParserKW_FROM)
		}
		{
			p.SetState(928)
			p.Match(HiveParserNumber)
		}
		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_TO {
			{
				p.SetState(929)
				p.Match(HiveParserKW_TO)
			}
			{
				p.SetState(930)
				p.Match(HiveParserNumber)
			}

		}
		p.SetState(935)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LIMIT {
			{
				p.SetState(933)
				p.Match(HiveParserKW_LIMIT)
			}
			{
				p.SetState(934)
				p.Match(HiveParserNumber)
			}

		}

	}
	p.SetState(941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(939)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(940)
			p.ReplConfigs()
		}

	}

	return localctx
}

// IReplLoadStatementContext is an interface to support dynamic dispatch.
type IReplLoadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplLoadStatementContext differentiates from other interfaces.
	IsReplLoadStatementContext()
}

type ReplLoadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplLoadStatementContext() *ReplLoadStatementContext {
	var p = new(ReplLoadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replLoadStatement
	return p
}

func (*ReplLoadStatementContext) IsReplLoadStatementContext() {}

func NewReplLoadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplLoadStatementContext {
	var p = new(ReplLoadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replLoadStatement

	return p
}

func (s *ReplLoadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplLoadStatementContext) KW_REPL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPL, 0)
}

func (s *ReplLoadStatementContext) KW_LOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOAD, 0)
}

func (s *ReplLoadStatementContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *ReplLoadStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ReplLoadStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ReplLoadStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ReplLoadStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *ReplLoadStatementContext) ReplConfigs() IReplConfigsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplConfigsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplConfigsContext)
}

func (s *ReplLoadStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *ReplLoadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplLoadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplLoadStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplLoadStatement(s)
	}
}

func (s *ReplLoadStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplLoadStatement(s)
	}
}

func (p *HiveParser) ReplLoadStatement() (localctx IReplLoadStatementContext) {
	localctx = NewReplLoadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, HiveParserRULE_replLoadStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(943)
		p.Match(HiveParserKW_REPL)
	}
	{
		p.SetState(944)
		p.Match(HiveParserKW_LOAD)
	}
	p.SetState(950)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
		{
			p.SetState(945)
			p.Identifier()
		}
		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserDOT {
			{
				p.SetState(946)
				p.Match(HiveParserDOT)
			}
			{
				p.SetState(947)
				p.Identifier()
			}

		}

	}
	{
		p.SetState(952)
		p.Match(HiveParserKW_FROM)
	}
	{
		p.SetState(953)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(954)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(955)
			p.ReplConfigs()
		}

	}

	return localctx
}

// IReplConfigsContext is an interface to support dynamic dispatch.
type IReplConfigsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplConfigsContext differentiates from other interfaces.
	IsReplConfigsContext()
}

type ReplConfigsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplConfigsContext() *ReplConfigsContext {
	var p = new(ReplConfigsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replConfigs
	return p
}

func (*ReplConfigsContext) IsReplConfigsContext() {}

func NewReplConfigsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplConfigsContext {
	var p = new(ReplConfigsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replConfigs

	return p
}

func (s *ReplConfigsContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplConfigsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ReplConfigsContext) ReplConfigsList() IReplConfigsListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplConfigsListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplConfigsListContext)
}

func (s *ReplConfigsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ReplConfigsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplConfigsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplConfigsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplConfigs(s)
	}
}

func (s *ReplConfigsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplConfigs(s)
	}
}

func (p *HiveParser) ReplConfigs() (localctx IReplConfigsContext) {
	localctx = NewReplConfigsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, HiveParserRULE_replConfigs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(958)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(959)
		p.ReplConfigsList()
	}
	{
		p.SetState(960)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IReplConfigsListContext is an interface to support dynamic dispatch.
type IReplConfigsListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplConfigsListContext differentiates from other interfaces.
	IsReplConfigsListContext()
}

type ReplConfigsListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplConfigsListContext() *ReplConfigsListContext {
	var p = new(ReplConfigsListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replConfigsList
	return p
}

func (*ReplConfigsListContext) IsReplConfigsListContext() {}

func NewReplConfigsListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplConfigsListContext {
	var p = new(ReplConfigsListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replConfigsList

	return p
}

func (s *ReplConfigsListContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplConfigsListContext) AllKeyValueProperty() []IKeyValuePropertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyValuePropertyContext)(nil)).Elem())
	var tst = make([]IKeyValuePropertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyValuePropertyContext)
		}
	}

	return tst
}

func (s *ReplConfigsListContext) KeyValueProperty(i int) IKeyValuePropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyValuePropertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyValuePropertyContext)
}

func (s *ReplConfigsListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ReplConfigsListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ReplConfigsListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplConfigsListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplConfigsListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplConfigsList(s)
	}
}

func (s *ReplConfigsListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplConfigsList(s)
	}
}

func (p *HiveParser) ReplConfigsList() (localctx IReplConfigsListContext) {
	localctx = NewReplConfigsListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, HiveParserRULE_replConfigsList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(962)
		p.KeyValueProperty()
	}
	p.SetState(967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(963)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(964)
			p.KeyValueProperty()
		}

		p.SetState(969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IReplStatusStatementContext is an interface to support dynamic dispatch.
type IReplStatusStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplStatusStatementContext differentiates from other interfaces.
	IsReplStatusStatementContext()
}

type ReplStatusStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplStatusStatementContext() *ReplStatusStatementContext {
	var p = new(ReplStatusStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replStatusStatement
	return p
}

func (*ReplStatusStatementContext) IsReplStatusStatementContext() {}

func NewReplStatusStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplStatusStatementContext {
	var p = new(ReplStatusStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replStatusStatement

	return p
}

func (s *ReplStatusStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplStatusStatementContext) KW_REPL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPL, 0)
}

func (s *ReplStatusStatementContext) KW_STATUS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATUS, 0)
}

func (s *ReplStatusStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ReplStatusStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ReplStatusStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *ReplStatusStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *ReplStatusStatementContext) ReplConfigs() IReplConfigsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplConfigsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplConfigsContext)
}

func (s *ReplStatusStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplStatusStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplStatusStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplStatusStatement(s)
	}
}

func (s *ReplStatusStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplStatusStatement(s)
	}
}

func (p *HiveParser) ReplStatusStatement() (localctx IReplStatusStatementContext) {
	localctx = NewReplStatusStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, HiveParserRULE_replStatusStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(970)
		p.Match(HiveParserKW_REPL)
	}
	{
		p.SetState(971)
		p.Match(HiveParserKW_STATUS)
	}
	{
		p.SetState(972)
		p.Identifier()
	}
	p.SetState(975)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserDOT {
		{
			p.SetState(973)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(974)
			p.Identifier()
		}

	}
	p.SetState(979)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(977)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(978)
			p.ReplConfigs()
		}

	}

	return localctx
}

// IDdlStatementContext is an interface to support dynamic dispatch.
type IDdlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdlStatementContext differentiates from other interfaces.
	IsDdlStatementContext()
}

type DdlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdlStatementContext() *DdlStatementContext {
	var p = new(DdlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_ddlStatement
	return p
}

func (*DdlStatementContext) IsDdlStatementContext() {}

func NewDdlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DdlStatementContext {
	var p = new(DdlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_ddlStatement

	return p
}

func (s *DdlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DdlStatementContext) CreateDatabaseStatement() ICreateDatabaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseStatementContext)
}

func (s *DdlStatementContext) SwitchDatabaseStatement() ISwitchDatabaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchDatabaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchDatabaseStatementContext)
}

func (s *DdlStatementContext) DropDatabaseStatement() IDropDatabaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropDatabaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropDatabaseStatementContext)
}

func (s *DdlStatementContext) CreateTableStatement() ICreateTableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTableStatementContext)
}

func (s *DdlStatementContext) DropTableStatement() IDropTableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTableStatementContext)
}

func (s *DdlStatementContext) TruncateTableStatement() ITruncateTableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncateTableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncateTableStatementContext)
}

func (s *DdlStatementContext) AlterStatement() IAlterStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementContext)
}

func (s *DdlStatementContext) DescStatement() IDescStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescStatementContext)
}

func (s *DdlStatementContext) ShowStatement() IShowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowStatementContext)
}

func (s *DdlStatementContext) MetastoreCheck() IMetastoreCheckContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetastoreCheckContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetastoreCheckContext)
}

func (s *DdlStatementContext) CreateViewStatement() ICreateViewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateViewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateViewStatementContext)
}

func (s *DdlStatementContext) CreateMaterializedViewStatement() ICreateMaterializedViewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateMaterializedViewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateMaterializedViewStatementContext)
}

func (s *DdlStatementContext) DropViewStatement() IDropViewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropViewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropViewStatementContext)
}

func (s *DdlStatementContext) DropMaterializedViewStatement() IDropMaterializedViewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropMaterializedViewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropMaterializedViewStatementContext)
}

func (s *DdlStatementContext) CreateFunctionStatement() ICreateFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateFunctionStatementContext)
}

func (s *DdlStatementContext) CreateMacroStatement() ICreateMacroStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateMacroStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateMacroStatementContext)
}

func (s *DdlStatementContext) DropFunctionStatement() IDropFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropFunctionStatementContext)
}

func (s *DdlStatementContext) ReloadFunctionStatement() IReloadFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReloadFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReloadFunctionStatementContext)
}

func (s *DdlStatementContext) DropMacroStatement() IDropMacroStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropMacroStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropMacroStatementContext)
}

func (s *DdlStatementContext) AnalyzeStatement() IAnalyzeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyzeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyzeStatementContext)
}

func (s *DdlStatementContext) LockStatement() ILockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockStatementContext)
}

func (s *DdlStatementContext) UnlockStatement() IUnlockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlockStatementContext)
}

func (s *DdlStatementContext) LockDatabase() ILockDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockDatabaseContext)
}

func (s *DdlStatementContext) UnlockDatabase() IUnlockDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlockDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlockDatabaseContext)
}

func (s *DdlStatementContext) CreateRoleStatement() ICreateRoleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateRoleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateRoleStatementContext)
}

func (s *DdlStatementContext) DropRoleStatement() IDropRoleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropRoleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropRoleStatementContext)
}

func (s *DdlStatementContext) GrantPrivileges() IGrantPrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantPrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantPrivilegesContext)
}

func (s *DdlStatementContext) RevokePrivileges() IRevokePrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokePrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokePrivilegesContext)
}

func (s *DdlStatementContext) ShowGrants() IShowGrantsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowGrantsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowGrantsContext)
}

func (s *DdlStatementContext) ShowRoleGrants() IShowRoleGrantsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowRoleGrantsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowRoleGrantsContext)
}

func (s *DdlStatementContext) ShowRolePrincipals() IShowRolePrincipalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowRolePrincipalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowRolePrincipalsContext)
}

func (s *DdlStatementContext) ShowRoles() IShowRolesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowRolesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowRolesContext)
}

func (s *DdlStatementContext) GrantRole() IGrantRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantRoleContext)
}

func (s *DdlStatementContext) RevokeRole() IRevokeRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokeRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokeRoleContext)
}

func (s *DdlStatementContext) SetRole() ISetRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetRoleContext)
}

func (s *DdlStatementContext) ShowCurrentRole() IShowCurrentRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCurrentRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCurrentRoleContext)
}

func (s *DdlStatementContext) AbortTransactionStatement() IAbortTransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbortTransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbortTransactionStatementContext)
}

func (s *DdlStatementContext) KillQueryStatement() IKillQueryStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKillQueryStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKillQueryStatementContext)
}

func (s *DdlStatementContext) ResourcePlanDdlStatements() IResourcePlanDdlStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResourcePlanDdlStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResourcePlanDdlStatementsContext)
}

func (s *DdlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DdlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DdlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDdlStatement(s)
	}
}

func (s *DdlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDdlStatement(s)
	}
}

func (p *HiveParser) DdlStatement() (localctx IDdlStatementContext) {
	localctx = NewDdlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, HiveParserRULE_ddlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1020)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(981)
			p.CreateDatabaseStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(982)
			p.SwitchDatabaseStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(983)
			p.DropDatabaseStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(984)
			p.CreateTableStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(985)
			p.DropTableStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(986)
			p.TruncateTableStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(987)
			p.AlterStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(988)
			p.DescStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(989)
			p.ShowStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(990)
			p.MetastoreCheck()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(991)
			p.CreateViewStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(992)
			p.CreateMaterializedViewStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(993)
			p.DropViewStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(994)
			p.DropMaterializedViewStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(995)
			p.CreateFunctionStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(996)
			p.CreateMacroStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(997)
			p.DropFunctionStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(998)
			p.ReloadFunctionStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(999)
			p.DropMacroStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1000)
			p.AnalyzeStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1001)
			p.LockStatement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1002)
			p.UnlockStatement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1003)
			p.LockDatabase()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1004)
			p.UnlockDatabase()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1005)
			p.CreateRoleStatement()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1006)
			p.DropRoleStatement()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1007)
			p.GrantPrivileges()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(1008)
			p.RevokePrivileges()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(1009)
			p.ShowGrants()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(1010)
			p.ShowRoleGrants()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(1011)
			p.ShowRolePrincipals()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(1012)
			p.ShowRoles()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(1013)
			p.GrantRole()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(1014)
			p.RevokeRole()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(1015)
			p.SetRole()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(1016)
			p.ShowCurrentRole()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(1017)
			p.AbortTransactionStatement()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(1018)
			p.KillQueryStatement()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(1019)
			p.ResourcePlanDdlStatements()
		}

	}

	return localctx
}

// IIfExistsContext is an interface to support dynamic dispatch.
type IIfExistsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfExistsContext differentiates from other interfaces.
	IsIfExistsContext()
}

type IfExistsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfExistsContext() *IfExistsContext {
	var p = new(IfExistsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_ifExists
	return p
}

func (*IfExistsContext) IsIfExistsContext() {}

func NewIfExistsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfExistsContext {
	var p = new(IfExistsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_ifExists

	return p
}

func (s *IfExistsContext) GetParser() antlr.Parser { return s.parser }

func (s *IfExistsContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IF, 0)
}

func (s *IfExistsContext) KW_EXISTS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXISTS, 0)
}

func (s *IfExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfExistsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfExistsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIfExists(s)
	}
}

func (s *IfExistsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIfExists(s)
	}
}

func (p *HiveParser) IfExists() (localctx IIfExistsContext) {
	localctx = NewIfExistsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, HiveParserRULE_ifExists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1022)
		p.Match(HiveParserKW_IF)
	}
	{
		p.SetState(1023)
		p.Match(HiveParserKW_EXISTS)
	}

	return localctx
}

// IRestrictOrCascadeContext is an interface to support dynamic dispatch.
type IRestrictOrCascadeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestrictOrCascadeContext differentiates from other interfaces.
	IsRestrictOrCascadeContext()
}

type RestrictOrCascadeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestrictOrCascadeContext() *RestrictOrCascadeContext {
	var p = new(RestrictOrCascadeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_restrictOrCascade
	return p
}

func (*RestrictOrCascadeContext) IsRestrictOrCascadeContext() {}

func NewRestrictOrCascadeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestrictOrCascadeContext {
	var p = new(RestrictOrCascadeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_restrictOrCascade

	return p
}

func (s *RestrictOrCascadeContext) GetParser() antlr.Parser { return s.parser }

func (s *RestrictOrCascadeContext) KW_RESTRICT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESTRICT, 0)
}

func (s *RestrictOrCascadeContext) KW_CASCADE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CASCADE, 0)
}

func (s *RestrictOrCascadeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestrictOrCascadeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestrictOrCascadeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRestrictOrCascade(s)
	}
}

func (s *RestrictOrCascadeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRestrictOrCascade(s)
	}
}

func (p *HiveParser) RestrictOrCascade() (localctx IRestrictOrCascadeContext) {
	localctx = NewRestrictOrCascadeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, HiveParserRULE_restrictOrCascade)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1025)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_RESTRICT || _la == HiveParserKW_CASCADE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIfNotExistsContext is an interface to support dynamic dispatch.
type IIfNotExistsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfNotExistsContext differentiates from other interfaces.
	IsIfNotExistsContext()
}

type IfNotExistsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfNotExistsContext() *IfNotExistsContext {
	var p = new(IfNotExistsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_ifNotExists
	return p
}

func (*IfNotExistsContext) IsIfNotExistsContext() {}

func NewIfNotExistsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfNotExistsContext {
	var p = new(IfNotExistsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_ifNotExists

	return p
}

func (s *IfNotExistsContext) GetParser() antlr.Parser { return s.parser }

func (s *IfNotExistsContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IF, 0)
}

func (s *IfNotExistsContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *IfNotExistsContext) KW_EXISTS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXISTS, 0)
}

func (s *IfNotExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfNotExistsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfNotExistsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIfNotExists(s)
	}
}

func (s *IfNotExistsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIfNotExists(s)
	}
}

func (p *HiveParser) IfNotExists() (localctx IIfNotExistsContext) {
	localctx = NewIfNotExistsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, HiveParserRULE_ifNotExists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1027)
		p.Match(HiveParserKW_IF)
	}
	{
		p.SetState(1028)
		p.Match(HiveParserKW_NOT)
	}
	{
		p.SetState(1029)
		p.Match(HiveParserKW_EXISTS)
	}

	return localctx
}

// IRewriteEnabledContext is an interface to support dynamic dispatch.
type IRewriteEnabledContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRewriteEnabledContext differentiates from other interfaces.
	IsRewriteEnabledContext()
}

type RewriteEnabledContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRewriteEnabledContext() *RewriteEnabledContext {
	var p = new(RewriteEnabledContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rewriteEnabled
	return p
}

func (*RewriteEnabledContext) IsRewriteEnabledContext() {}

func NewRewriteEnabledContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RewriteEnabledContext {
	var p = new(RewriteEnabledContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rewriteEnabled

	return p
}

func (s *RewriteEnabledContext) GetParser() antlr.Parser { return s.parser }

func (s *RewriteEnabledContext) KW_ENABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ENABLE, 0)
}

func (s *RewriteEnabledContext) KW_REWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REWRITE, 0)
}

func (s *RewriteEnabledContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RewriteEnabledContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RewriteEnabledContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRewriteEnabled(s)
	}
}

func (s *RewriteEnabledContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRewriteEnabled(s)
	}
}

func (p *HiveParser) RewriteEnabled() (localctx IRewriteEnabledContext) {
	localctx = NewRewriteEnabledContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, HiveParserRULE_rewriteEnabled)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1031)
		p.Match(HiveParserKW_ENABLE)
	}
	{
		p.SetState(1032)
		p.Match(HiveParserKW_REWRITE)
	}

	return localctx
}

// IRewriteDisabledContext is an interface to support dynamic dispatch.
type IRewriteDisabledContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRewriteDisabledContext differentiates from other interfaces.
	IsRewriteDisabledContext()
}

type RewriteDisabledContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRewriteDisabledContext() *RewriteDisabledContext {
	var p = new(RewriteDisabledContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rewriteDisabled
	return p
}

func (*RewriteDisabledContext) IsRewriteDisabledContext() {}

func NewRewriteDisabledContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RewriteDisabledContext {
	var p = new(RewriteDisabledContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rewriteDisabled

	return p
}

func (s *RewriteDisabledContext) GetParser() antlr.Parser { return s.parser }

func (s *RewriteDisabledContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISABLE, 0)
}

func (s *RewriteDisabledContext) KW_REWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REWRITE, 0)
}

func (s *RewriteDisabledContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RewriteDisabledContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RewriteDisabledContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRewriteDisabled(s)
	}
}

func (s *RewriteDisabledContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRewriteDisabled(s)
	}
}

func (p *HiveParser) RewriteDisabled() (localctx IRewriteDisabledContext) {
	localctx = NewRewriteDisabledContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, HiveParserRULE_rewriteDisabled)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1034)
		p.Match(HiveParserKW_DISABLE)
	}
	{
		p.SetState(1035)
		p.Match(HiveParserKW_REWRITE)
	}

	return localctx
}

// IStoredAsDirsContext is an interface to support dynamic dispatch.
type IStoredAsDirsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStoredAsDirsContext differentiates from other interfaces.
	IsStoredAsDirsContext()
}

type StoredAsDirsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStoredAsDirsContext() *StoredAsDirsContext {
	var p = new(StoredAsDirsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_storedAsDirs
	return p
}

func (*StoredAsDirsContext) IsStoredAsDirsContext() {}

func NewStoredAsDirsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StoredAsDirsContext {
	var p = new(StoredAsDirsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_storedAsDirs

	return p
}

func (s *StoredAsDirsContext) GetParser() antlr.Parser { return s.parser }

func (s *StoredAsDirsContext) KW_STORED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STORED, 0)
}

func (s *StoredAsDirsContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *StoredAsDirsContext) KW_DIRECTORIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DIRECTORIES, 0)
}

func (s *StoredAsDirsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StoredAsDirsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StoredAsDirsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterStoredAsDirs(s)
	}
}

func (s *StoredAsDirsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitStoredAsDirs(s)
	}
}

func (p *HiveParser) StoredAsDirs() (localctx IStoredAsDirsContext) {
	localctx = NewStoredAsDirsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, HiveParserRULE_storedAsDirs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1037)
		p.Match(HiveParserKW_STORED)
	}
	{
		p.SetState(1038)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(1039)
		p.Match(HiveParserKW_DIRECTORIES)
	}

	return localctx
}

// IOrReplaceContext is an interface to support dynamic dispatch.
type IOrReplaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrReplaceContext differentiates from other interfaces.
	IsOrReplaceContext()
}

type OrReplaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrReplaceContext() *OrReplaceContext {
	var p = new(OrReplaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_orReplace
	return p
}

func (*OrReplaceContext) IsOrReplaceContext() {}

func NewOrReplaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrReplaceContext {
	var p = new(OrReplaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_orReplace

	return p
}

func (s *OrReplaceContext) GetParser() antlr.Parser { return s.parser }

func (s *OrReplaceContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OR, 0)
}

func (s *OrReplaceContext) KW_REPLACE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLACE, 0)
}

func (s *OrReplaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrReplaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrReplaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterOrReplace(s)
	}
}

func (s *OrReplaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitOrReplace(s)
	}
}

func (p *HiveParser) OrReplace() (localctx IOrReplaceContext) {
	localctx = NewOrReplaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, HiveParserRULE_orReplace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1041)
		p.Match(HiveParserKW_OR)
	}
	{
		p.SetState(1042)
		p.Match(HiveParserKW_REPLACE)
	}

	return localctx
}

// ICreateDatabaseStatementContext is an interface to support dynamic dispatch.
type ICreateDatabaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDatabaseStatementContext differentiates from other interfaces.
	IsCreateDatabaseStatementContext()
}

type CreateDatabaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDatabaseStatementContext() *CreateDatabaseStatementContext {
	var p = new(CreateDatabaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createDatabaseStatement
	return p
}

func (*CreateDatabaseStatementContext) IsCreateDatabaseStatementContext() {}

func NewCreateDatabaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseStatementContext {
	var p = new(CreateDatabaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createDatabaseStatement

	return p
}

func (s *CreateDatabaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateDatabaseStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateDatabaseStatementContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *CreateDatabaseStatementContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *CreateDatabaseStatementContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateDatabaseStatementContext) DatabaseComment() IDatabaseCommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabaseCommentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabaseCommentContext)
}

func (s *CreateDatabaseStatementContext) DbLocation() IDbLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDbLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDbLocationContext)
}

func (s *CreateDatabaseStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *CreateDatabaseStatementContext) KW_DBPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DBPROPERTIES, 0)
}

func (s *CreateDatabaseStatementContext) DbProperties() IDbPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDbPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDbPropertiesContext)
}

func (s *CreateDatabaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateDatabaseStatement(s)
	}
}

func (s *CreateDatabaseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateDatabaseStatement(s)
	}
}

func (p *HiveParser) CreateDatabaseStatement() (localctx ICreateDatabaseStatementContext) {
	localctx = NewCreateDatabaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, HiveParserRULE_createDatabaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1044)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(1045)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1047)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1046)
			p.IfNotExists()
		}

	}
	{
		p.SetState(1049)
		p.Identifier()
	}
	p.SetState(1051)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(1050)
			p.DatabaseComment()
		}

	}
	p.SetState(1054)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LOCATION {
		{
			p.SetState(1053)
			p.DbLocation()
		}

	}
	p.SetState(1059)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(1056)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(1057)
			p.Match(HiveParserKW_DBPROPERTIES)
		}
		{
			p.SetState(1058)
			p.DbProperties()
		}

	}

	return localctx
}

// IDbLocationContext is an interface to support dynamic dispatch.
type IDbLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDbLocationContext differentiates from other interfaces.
	IsDbLocationContext()
}

type DbLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDbLocationContext() *DbLocationContext {
	var p = new(DbLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dbLocation
	return p
}

func (*DbLocationContext) IsDbLocationContext() {}

func NewDbLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DbLocationContext {
	var p = new(DbLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dbLocation

	return p
}

func (s *DbLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *DbLocationContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *DbLocationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *DbLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DbLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DbLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDbLocation(s)
	}
}

func (s *DbLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDbLocation(s)
	}
}

func (p *HiveParser) DbLocation() (localctx IDbLocationContext) {
	localctx = NewDbLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, HiveParserRULE_dbLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1061)
		p.Match(HiveParserKW_LOCATION)
	}
	{
		p.SetState(1062)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IDbPropertiesContext is an interface to support dynamic dispatch.
type IDbPropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDbPropertiesContext differentiates from other interfaces.
	IsDbPropertiesContext()
}

type DbPropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDbPropertiesContext() *DbPropertiesContext {
	var p = new(DbPropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dbProperties
	return p
}

func (*DbPropertiesContext) IsDbPropertiesContext() {}

func NewDbPropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DbPropertiesContext {
	var p = new(DbPropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dbProperties

	return p
}

func (s *DbPropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *DbPropertiesContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *DbPropertiesContext) DbPropertiesList() IDbPropertiesListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDbPropertiesListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDbPropertiesListContext)
}

func (s *DbPropertiesContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *DbPropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DbPropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DbPropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDbProperties(s)
	}
}

func (s *DbPropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDbProperties(s)
	}
}

func (p *HiveParser) DbProperties() (localctx IDbPropertiesContext) {
	localctx = NewDbPropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, HiveParserRULE_dbProperties)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1064)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(1065)
		p.DbPropertiesList()
	}
	{
		p.SetState(1066)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IDbPropertiesListContext is an interface to support dynamic dispatch.
type IDbPropertiesListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDbPropertiesListContext differentiates from other interfaces.
	IsDbPropertiesListContext()
}

type DbPropertiesListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDbPropertiesListContext() *DbPropertiesListContext {
	var p = new(DbPropertiesListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dbPropertiesList
	return p
}

func (*DbPropertiesListContext) IsDbPropertiesListContext() {}

func NewDbPropertiesListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DbPropertiesListContext {
	var p = new(DbPropertiesListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dbPropertiesList

	return p
}

func (s *DbPropertiesListContext) GetParser() antlr.Parser { return s.parser }

func (s *DbPropertiesListContext) AllKeyValueProperty() []IKeyValuePropertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyValuePropertyContext)(nil)).Elem())
	var tst = make([]IKeyValuePropertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyValuePropertyContext)
		}
	}

	return tst
}

func (s *DbPropertiesListContext) KeyValueProperty(i int) IKeyValuePropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyValuePropertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyValuePropertyContext)
}

func (s *DbPropertiesListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *DbPropertiesListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *DbPropertiesListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DbPropertiesListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DbPropertiesListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDbPropertiesList(s)
	}
}

func (s *DbPropertiesListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDbPropertiesList(s)
	}
}

func (p *HiveParser) DbPropertiesList() (localctx IDbPropertiesListContext) {
	localctx = NewDbPropertiesListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, HiveParserRULE_dbPropertiesList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1068)
		p.KeyValueProperty()
	}
	p.SetState(1073)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1069)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1070)
			p.KeyValueProperty()
		}

		p.SetState(1075)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISwitchDatabaseStatementContext is an interface to support dynamic dispatch.
type ISwitchDatabaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchDatabaseStatementContext differentiates from other interfaces.
	IsSwitchDatabaseStatementContext()
}

type SwitchDatabaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchDatabaseStatementContext() *SwitchDatabaseStatementContext {
	var p = new(SwitchDatabaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_switchDatabaseStatement
	return p
}

func (*SwitchDatabaseStatementContext) IsSwitchDatabaseStatementContext() {}

func NewSwitchDatabaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchDatabaseStatementContext {
	var p = new(SwitchDatabaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_switchDatabaseStatement

	return p
}

func (s *SwitchDatabaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchDatabaseStatementContext) KW_USE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USE, 0)
}

func (s *SwitchDatabaseStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SwitchDatabaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchDatabaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchDatabaseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSwitchDatabaseStatement(s)
	}
}

func (s *SwitchDatabaseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSwitchDatabaseStatement(s)
	}
}

func (p *HiveParser) SwitchDatabaseStatement() (localctx ISwitchDatabaseStatementContext) {
	localctx = NewSwitchDatabaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, HiveParserRULE_switchDatabaseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1076)
		p.Match(HiveParserKW_USE)
	}
	{
		p.SetState(1077)
		p.Identifier()
	}

	return localctx
}

// IDropDatabaseStatementContext is an interface to support dynamic dispatch.
type IDropDatabaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropDatabaseStatementContext differentiates from other interfaces.
	IsDropDatabaseStatementContext()
}

type DropDatabaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropDatabaseStatementContext() *DropDatabaseStatementContext {
	var p = new(DropDatabaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropDatabaseStatement
	return p
}

func (*DropDatabaseStatementContext) IsDropDatabaseStatementContext() {}

func NewDropDatabaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropDatabaseStatementContext {
	var p = new(DropDatabaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropDatabaseStatement

	return p
}

func (s *DropDatabaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropDatabaseStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropDatabaseStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropDatabaseStatementContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *DropDatabaseStatementContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *DropDatabaseStatementContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropDatabaseStatementContext) RestrictOrCascade() IRestrictOrCascadeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictOrCascadeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictOrCascadeContext)
}

func (s *DropDatabaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropDatabaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropDatabaseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropDatabaseStatement(s)
	}
}

func (s *DropDatabaseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropDatabaseStatement(s)
	}
}

func (p *HiveParser) DropDatabaseStatement() (localctx IDropDatabaseStatementContext) {
	localctx = NewDropDatabaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, HiveParserRULE_dropDatabaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1079)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(1080)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1081)
			p.IfExists()
		}

	}
	{
		p.SetState(1084)
		p.Identifier()
	}
	p.SetState(1086)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RESTRICT || _la == HiveParserKW_CASCADE {
		{
			p.SetState(1085)
			p.RestrictOrCascade()
		}

	}

	return localctx
}

// IDatabaseCommentContext is an interface to support dynamic dispatch.
type IDatabaseCommentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabaseCommentContext differentiates from other interfaces.
	IsDatabaseCommentContext()
}

type DatabaseCommentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabaseCommentContext() *DatabaseCommentContext {
	var p = new(DatabaseCommentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_databaseComment
	return p
}

func (*DatabaseCommentContext) IsDatabaseCommentContext() {}

func NewDatabaseCommentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatabaseCommentContext {
	var p = new(DatabaseCommentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_databaseComment

	return p
}

func (s *DatabaseCommentContext) GetParser() antlr.Parser { return s.parser }

func (s *DatabaseCommentContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *DatabaseCommentContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *DatabaseCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatabaseCommentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatabaseCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDatabaseComment(s)
	}
}

func (s *DatabaseCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDatabaseComment(s)
	}
}

func (p *HiveParser) DatabaseComment() (localctx IDatabaseCommentContext) {
	localctx = NewDatabaseCommentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, HiveParserRULE_databaseComment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1088)
		p.Match(HiveParserKW_COMMENT)
	}
	{
		p.SetState(1089)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ICreateTableStatementContext is an interface to support dynamic dispatch.
type ICreateTableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTableStatementContext differentiates from other interfaces.
	IsCreateTableStatementContext()
}

type CreateTableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTableStatementContext() *CreateTableStatementContext {
	var p = new(CreateTableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createTableStatement
	return p
}

func (*CreateTableStatementContext) IsCreateTableStatementContext() {}

func NewCreateTableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableStatementContext {
	var p = new(CreateTableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createTableStatement

	return p
}

func (s *CreateTableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateTableStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *CreateTableStatementContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *CreateTableStatementContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateTableStatementContext) KW_LIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIKE, 0)
}

func (s *CreateTableStatementContext) KW_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TEMPORARY, 0)
}

func (s *CreateTableStatementContext) KW_EXTERNAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXTERNAL, 0)
}

func (s *CreateTableStatementContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateTableStatementContext) TableRowFormat() ITableRowFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatContext)
}

func (s *CreateTableStatementContext) TableFileFormat() ITableFileFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableFileFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableFileFormatContext)
}

func (s *CreateTableStatementContext) TableLocation() ITableLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableLocationContext)
}

func (s *CreateTableStatementContext) TablePropertiesPrefixed() ITablePropertiesPrefixedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesPrefixedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesPrefixedContext)
}

func (s *CreateTableStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *CreateTableStatementContext) ColumnNameTypeOrConstraintList() IColumnNameTypeOrConstraintListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeOrConstraintListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeOrConstraintListContext)
}

func (s *CreateTableStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *CreateTableStatementContext) TableComment() ITableCommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableCommentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableCommentContext)
}

func (s *CreateTableStatementContext) TablePartition() ITablePartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePartitionContext)
}

func (s *CreateTableStatementContext) TableBuckets() ITableBucketsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableBucketsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableBucketsContext)
}

func (s *CreateTableStatementContext) TableSkewed() ITableSkewedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSkewedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSkewedContext)
}

func (s *CreateTableStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *CreateTableStatementContext) SelectStatementWithCTE() ISelectStatementWithCTEContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementWithCTEContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementWithCTEContext)
}

func (s *CreateTableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTableStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateTableStatement(s)
	}
}

func (s *CreateTableStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateTableStatement(s)
	}
}

func (p *HiveParser) CreateTableStatement() (localctx ICreateTableStatementContext) {
	localctx = NewCreateTableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, HiveParserRULE_createTableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1091)
		p.Match(HiveParserKW_CREATE)
	}
	p.SetState(1093)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TEMPORARY {
		{
			p.SetState(1092)
			p.Match(HiveParserKW_TEMPORARY)
		}

	}
	p.SetState(1096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_EXTERNAL {
		{
			p.SetState(1095)
			p.Match(HiveParserKW_EXTERNAL)
		}

	}
	{
		p.SetState(1098)
		p.Match(HiveParserKW_TABLE)
	}
	p.SetState(1100)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1099)
			p.IfNotExists()
		}

	}
	{
		p.SetState(1102)
		p.TableName()
	}
	p.SetState(1151)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_LIKE:
		{
			p.SetState(1103)
			p.Match(HiveParserKW_LIKE)
		}
		{
			p.SetState(1104)
			p.TableName()
		}
		p.SetState(1106)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ROW {
			{
				p.SetState(1105)
				p.TableRowFormat()
			}

		}
		p.SetState(1109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_STORED {
			{
				p.SetState(1108)
				p.TableFileFormat()
			}

		}
		p.SetState(1112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LOCATION {
			{
				p.SetState(1111)
				p.TableLocation()
			}

		}
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_TBLPROPERTIES {
			{
				p.SetState(1114)
				p.TablePropertiesPrefixed()
			}

		}

	case HiveParserEOF, HiveParserKW_AS, HiveParserKW_COMMENT, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_ROW, HiveParserKW_STORED, HiveParserKW_LOCATION, HiveParserKW_TBLPROPERTIES, HiveParserKW_SKEWED, HiveParserLPAREN:
		p.SetState(1121)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserLPAREN {
			{
				p.SetState(1117)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(1118)
				p.ColumnNameTypeOrConstraintList()
			}
			{
				p.SetState(1119)
				p.Match(HiveParserRPAREN)
			}

		}
		p.SetState(1124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_COMMENT {
			{
				p.SetState(1123)
				p.TableComment()
			}

		}
		p.SetState(1127)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITIONED {
			{
				p.SetState(1126)
				p.TablePartition()
			}

		}
		p.SetState(1130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_CLUSTERED {
			{
				p.SetState(1129)
				p.TableBuckets()
			}

		}
		p.SetState(1133)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_SKEWED {
			{
				p.SetState(1132)
				p.TableSkewed()
			}

		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ROW {
			{
				p.SetState(1135)
				p.TableRowFormat()
			}

		}
		p.SetState(1139)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_STORED {
			{
				p.SetState(1138)
				p.TableFileFormat()
			}

		}
		p.SetState(1142)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LOCATION {
			{
				p.SetState(1141)
				p.TableLocation()
			}

		}
		p.SetState(1145)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_TBLPROPERTIES {
			{
				p.SetState(1144)
				p.TablePropertiesPrefixed()
			}

		}
		p.SetState(1149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(1147)
				p.Match(HiveParserKW_AS)
			}
			{
				p.SetState(1148)
				p.SelectStatementWithCTE()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITruncateTableStatementContext is an interface to support dynamic dispatch.
type ITruncateTableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncateTableStatementContext differentiates from other interfaces.
	IsTruncateTableStatementContext()
}

type TruncateTableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncateTableStatementContext() *TruncateTableStatementContext {
	var p = new(TruncateTableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_truncateTableStatement
	return p
}

func (*TruncateTableStatementContext) IsTruncateTableStatementContext() {}

func NewTruncateTableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TruncateTableStatementContext {
	var p = new(TruncateTableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_truncateTableStatement

	return p
}

func (s *TruncateTableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TruncateTableStatementContext) KW_TRUNCATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRUNCATE, 0)
}

func (s *TruncateTableStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *TruncateTableStatementContext) TablePartitionPrefix() ITablePartitionPrefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePartitionPrefixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePartitionPrefixContext)
}

func (s *TruncateTableStatementContext) KW_COLUMNS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMNS, 0)
}

func (s *TruncateTableStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *TruncateTableStatementContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *TruncateTableStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *TruncateTableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TruncateTableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TruncateTableStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTruncateTableStatement(s)
	}
}

func (s *TruncateTableStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTruncateTableStatement(s)
	}
}

func (p *HiveParser) TruncateTableStatement() (localctx ITruncateTableStatementContext) {
	localctx = NewTruncateTableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, HiveParserRULE_truncateTableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1153)
		p.Match(HiveParserKW_TRUNCATE)
	}
	{
		p.SetState(1154)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(1155)
		p.TablePartitionPrefix()
	}
	p.SetState(1161)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COLUMNS {
		{
			p.SetState(1156)
			p.Match(HiveParserKW_COLUMNS)
		}
		{
			p.SetState(1157)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(1158)
			p.ColumnNameList()
		}
		{
			p.SetState(1159)
			p.Match(HiveParserRPAREN)
		}

	}

	return localctx
}

// IDropTableStatementContext is an interface to support dynamic dispatch.
type IDropTableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTableStatementContext differentiates from other interfaces.
	IsDropTableStatementContext()
}

type DropTableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTableStatementContext() *DropTableStatementContext {
	var p = new(DropTableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropTableStatement
	return p
}

func (*DropTableStatementContext) IsDropTableStatementContext() {}

func NewDropTableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTableStatementContext {
	var p = new(DropTableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropTableStatement

	return p
}

func (s *DropTableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTableStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropTableStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *DropTableStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DropTableStatementContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropTableStatementContext) KW_PURGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PURGE, 0)
}

func (s *DropTableStatementContext) ReplicationClause() IReplicationClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplicationClauseContext)
}

func (s *DropTableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTableStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropTableStatement(s)
	}
}

func (s *DropTableStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropTableStatement(s)
	}
}

func (p *HiveParser) DropTableStatement() (localctx IDropTableStatementContext) {
	localctx = NewDropTableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, HiveParserRULE_dropTableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1163)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(1164)
		p.Match(HiveParserKW_TABLE)
	}
	p.SetState(1166)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1165)
			p.IfExists()
		}

	}
	{
		p.SetState(1168)
		p.TableName()
	}
	p.SetState(1170)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PURGE {
		{
			p.SetState(1169)
			p.Match(HiveParserKW_PURGE)
		}

	}
	p.SetState(1173)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_FOR {
		{
			p.SetState(1172)
			p.ReplicationClause()
		}

	}

	return localctx
}

// IAlterStatementContext is an interface to support dynamic dispatch.
type IAlterStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementContext differentiates from other interfaces.
	IsAlterStatementContext()
}

type AlterStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementContext() *AlterStatementContext {
	var p = new(AlterStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatement
	return p
}

func (*AlterStatementContext) IsAlterStatementContext() {}

func NewAlterStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementContext {
	var p = new(AlterStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatement

	return p
}

func (s *AlterStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementContext) KW_ALTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALTER, 0)
}

func (s *AlterStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *AlterStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterStatementContext) AlterTableStatementSuffix() IAlterTableStatementSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTableStatementSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTableStatementSuffixContext)
}

func (s *AlterStatementContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *AlterStatementContext) AlterViewStatementSuffix() IAlterViewStatementSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterViewStatementSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterViewStatementSuffixContext)
}

func (s *AlterStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *AlterStatementContext) KW_MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATERIALIZED, 0)
}

func (s *AlterStatementContext) AlterMaterializedViewStatementSuffix() IAlterMaterializedViewStatementSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterMaterializedViewStatementSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterMaterializedViewStatementSuffixContext)
}

func (s *AlterStatementContext) AlterDatabaseStatementSuffix() IAlterDatabaseStatementSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseStatementSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseStatementSuffixContext)
}

func (s *AlterStatementContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *AlterStatementContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *AlterStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatement(s)
	}
}

func (s *AlterStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatement(s)
	}
}

func (p *HiveParser) AlterStatement() (localctx IAlterStatementContext) {
	localctx = NewAlterStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, HiveParserRULE_alterStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1175)
			p.Match(HiveParserKW_ALTER)
		}
		{
			p.SetState(1176)
			p.Match(HiveParserKW_TABLE)
		}
		{
			p.SetState(1177)
			p.TableName()
		}
		{
			p.SetState(1178)
			p.AlterTableStatementSuffix()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1180)
			p.Match(HiveParserKW_ALTER)
		}
		{
			p.SetState(1181)
			p.Match(HiveParserKW_VIEW)
		}
		{
			p.SetState(1182)
			p.TableName()
		}
		p.SetState(1184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(1183)
				p.Match(HiveParserKW_AS)
			}

		}
		{
			p.SetState(1186)
			p.AlterViewStatementSuffix()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1188)
			p.Match(HiveParserKW_ALTER)
		}
		{
			p.SetState(1189)
			p.Match(HiveParserKW_MATERIALIZED)
		}
		{
			p.SetState(1190)
			p.Match(HiveParserKW_VIEW)
		}
		{
			p.SetState(1191)
			p.TableName()
		}
		{
			p.SetState(1192)
			p.AlterMaterializedViewStatementSuffix()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1194)
			p.Match(HiveParserKW_ALTER)
		}
		{
			p.SetState(1195)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1196)
			p.AlterDatabaseStatementSuffix()
		}

	}

	return localctx
}

// IAlterTableStatementSuffixContext is an interface to support dynamic dispatch.
type IAlterTableStatementSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTableStatementSuffixContext differentiates from other interfaces.
	IsAlterTableStatementSuffixContext()
}

type AlterTableStatementSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTableStatementSuffixContext() *AlterTableStatementSuffixContext {
	var p = new(AlterTableStatementSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterTableStatementSuffix
	return p
}

func (*AlterTableStatementSuffixContext) IsAlterTableStatementSuffixContext() {}

func NewAlterTableStatementSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTableStatementSuffixContext {
	var p = new(AlterTableStatementSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterTableStatementSuffix

	return p
}

func (s *AlterTableStatementSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixRename() IAlterStatementSuffixRenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixRenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixRenameContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixDropPartitions() IAlterStatementSuffixDropPartitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixDropPartitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixDropPartitionsContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixAddPartitions() IAlterStatementSuffixAddPartitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixAddPartitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixAddPartitionsContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixTouch() IAlterStatementSuffixTouchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixTouchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixTouchContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixArchive() IAlterStatementSuffixArchiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixArchiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixArchiveContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixUnArchive() IAlterStatementSuffixUnArchiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixUnArchiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixUnArchiveContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixProperties() IAlterStatementSuffixPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixPropertiesContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixSkewedby() IAlterStatementSuffixSkewedbyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixSkewedbyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixSkewedbyContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixExchangePartition() IAlterStatementSuffixExchangePartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixExchangePartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixExchangePartitionContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementPartitionKeyType() IAlterStatementPartitionKeyTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementPartitionKeyTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementPartitionKeyTypeContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixDropConstraint() IAlterStatementSuffixDropConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixDropConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixDropConstraintContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixAddConstraint() IAlterStatementSuffixAddConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixAddConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixAddConstraintContext)
}

func (s *AlterTableStatementSuffixContext) AlterTblPartitionStatementSuffix() IAlterTblPartitionStatementSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTblPartitionStatementSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTblPartitionStatementSuffixContext)
}

func (s *AlterTableStatementSuffixContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterTableStatementSuffixContext) AlterStatementSuffixSetOwner() IAlterStatementSuffixSetOwnerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixSetOwnerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixSetOwnerContext)
}

func (s *AlterTableStatementSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableStatementSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTableStatementSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterTableStatementSuffix(s)
	}
}

func (s *AlterTableStatementSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterTableStatementSuffix(s)
	}
}

func (p *HiveParser) AlterTableStatementSuffix() (localctx IAlterTableStatementSuffixContext) {
	localctx = NewAlterTableStatementSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, HiveParserRULE_alterTableStatementSuffix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1216)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1199)
			p.AlterStatementSuffixRename()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1200)
			p.AlterStatementSuffixDropPartitions()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1201)
			p.AlterStatementSuffixAddPartitions()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1202)
			p.AlterStatementSuffixTouch()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1203)
			p.AlterStatementSuffixArchive()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1204)
			p.AlterStatementSuffixUnArchive()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1205)
			p.AlterStatementSuffixProperties()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1206)
			p.AlterStatementSuffixSkewedby()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1207)
			p.AlterStatementSuffixExchangePartition()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1208)
			p.AlterStatementPartitionKeyType()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1209)
			p.AlterStatementSuffixDropConstraint()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1210)
			p.AlterStatementSuffixAddConstraint()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		p.SetState(1212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITION {
			{
				p.SetState(1211)
				p.PartitionSpec()
			}

		}
		{
			p.SetState(1214)
			p.AlterTblPartitionStatementSuffix()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1215)
			p.AlterStatementSuffixSetOwner()
		}

	}

	return localctx
}

// IAlterTblPartitionStatementSuffixContext is an interface to support dynamic dispatch.
type IAlterTblPartitionStatementSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTblPartitionStatementSuffixContext differentiates from other interfaces.
	IsAlterTblPartitionStatementSuffixContext()
}

type AlterTblPartitionStatementSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTblPartitionStatementSuffixContext() *AlterTblPartitionStatementSuffixContext {
	var p = new(AlterTblPartitionStatementSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterTblPartitionStatementSuffix
	return p
}

func (*AlterTblPartitionStatementSuffixContext) IsAlterTblPartitionStatementSuffixContext() {}

func NewAlterTblPartitionStatementSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTblPartitionStatementSuffixContext {
	var p = new(AlterTblPartitionStatementSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterTblPartitionStatementSuffix

	return p
}

func (s *AlterTblPartitionStatementSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixFileFormat() IAlterStatementSuffixFileFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixFileFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixFileFormatContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixLocation() IAlterStatementSuffixLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixLocationContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixMergeFiles() IAlterStatementSuffixMergeFilesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixMergeFilesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixMergeFilesContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixSerdeProperties() IAlterStatementSuffixSerdePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixSerdePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixSerdePropertiesContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixRenamePart() IAlterStatementSuffixRenamePartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixRenamePartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixRenamePartContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixBucketNum() IAlterStatementSuffixBucketNumContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixBucketNumContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixBucketNumContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterTblPartitionStatementSuffixSkewedLocation() IAlterTblPartitionStatementSuffixSkewedLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTblPartitionStatementSuffixSkewedLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTblPartitionStatementSuffixSkewedLocationContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixClusterbySortby() IAlterStatementSuffixClusterbySortbyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixClusterbySortbyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixClusterbySortbyContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixCompact() IAlterStatementSuffixCompactContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixCompactContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixCompactContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixUpdateStatsCol() IAlterStatementSuffixUpdateStatsColContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixUpdateStatsColContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixUpdateStatsColContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixUpdateStats() IAlterStatementSuffixUpdateStatsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixUpdateStatsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixUpdateStatsContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixRenameCol() IAlterStatementSuffixRenameColContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixRenameColContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixRenameColContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixAddCol() IAlterStatementSuffixAddColContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixAddColContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixAddColContext)
}

func (s *AlterTblPartitionStatementSuffixContext) AlterStatementSuffixUpdateColumns() IAlterStatementSuffixUpdateColumnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixUpdateColumnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixUpdateColumnsContext)
}

func (s *AlterTblPartitionStatementSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTblPartitionStatementSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTblPartitionStatementSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterTblPartitionStatementSuffix(s)
	}
}

func (s *AlterTblPartitionStatementSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterTblPartitionStatementSuffix(s)
	}
}

func (p *HiveParser) AlterTblPartitionStatementSuffix() (localctx IAlterTblPartitionStatementSuffixContext) {
	localctx = NewAlterTblPartitionStatementSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, HiveParserRULE_alterTblPartitionStatementSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1232)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1218)
			p.AlterStatementSuffixFileFormat()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1219)
			p.AlterStatementSuffixLocation()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1220)
			p.AlterStatementSuffixMergeFiles()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1221)
			p.AlterStatementSuffixSerdeProperties()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1222)
			p.AlterStatementSuffixRenamePart()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1223)
			p.AlterStatementSuffixBucketNum()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1224)
			p.AlterTblPartitionStatementSuffixSkewedLocation()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1225)
			p.AlterStatementSuffixClusterbySortby()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1226)
			p.AlterStatementSuffixCompact()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1227)
			p.AlterStatementSuffixUpdateStatsCol()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1228)
			p.AlterStatementSuffixUpdateStats()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1229)
			p.AlterStatementSuffixRenameCol()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1230)
			p.AlterStatementSuffixAddCol()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1231)
			p.AlterStatementSuffixUpdateColumns()
		}

	}

	return localctx
}

// IAlterStatementPartitionKeyTypeContext is an interface to support dynamic dispatch.
type IAlterStatementPartitionKeyTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementPartitionKeyTypeContext differentiates from other interfaces.
	IsAlterStatementPartitionKeyTypeContext()
}

type AlterStatementPartitionKeyTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementPartitionKeyTypeContext() *AlterStatementPartitionKeyTypeContext {
	var p = new(AlterStatementPartitionKeyTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementPartitionKeyType
	return p
}

func (*AlterStatementPartitionKeyTypeContext) IsAlterStatementPartitionKeyTypeContext() {}

func NewAlterStatementPartitionKeyTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementPartitionKeyTypeContext {
	var p = new(AlterStatementPartitionKeyTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementPartitionKeyType

	return p
}

func (s *AlterStatementPartitionKeyTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementPartitionKeyTypeContext) KW_PARTITION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITION, 0)
}

func (s *AlterStatementPartitionKeyTypeContext) KW_COLUMN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMN, 0)
}

func (s *AlterStatementPartitionKeyTypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *AlterStatementPartitionKeyTypeContext) ColumnNameType() IColumnNameTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeContext)
}

func (s *AlterStatementPartitionKeyTypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *AlterStatementPartitionKeyTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementPartitionKeyTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementPartitionKeyTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementPartitionKeyType(s)
	}
}

func (s *AlterStatementPartitionKeyTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementPartitionKeyType(s)
	}
}

func (p *HiveParser) AlterStatementPartitionKeyType() (localctx IAlterStatementPartitionKeyTypeContext) {
	localctx = NewAlterStatementPartitionKeyTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, HiveParserRULE_alterStatementPartitionKeyType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1234)
		p.Match(HiveParserKW_PARTITION)
	}
	{
		p.SetState(1235)
		p.Match(HiveParserKW_COLUMN)
	}
	{
		p.SetState(1236)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(1237)
		p.ColumnNameType()
	}
	{
		p.SetState(1238)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IAlterViewStatementSuffixContext is an interface to support dynamic dispatch.
type IAlterViewStatementSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterViewStatementSuffixContext differentiates from other interfaces.
	IsAlterViewStatementSuffixContext()
}

type AlterViewStatementSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterViewStatementSuffixContext() *AlterViewStatementSuffixContext {
	var p = new(AlterViewStatementSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterViewStatementSuffix
	return p
}

func (*AlterViewStatementSuffixContext) IsAlterViewStatementSuffixContext() {}

func NewAlterViewStatementSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterViewStatementSuffixContext {
	var p = new(AlterViewStatementSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterViewStatementSuffix

	return p
}

func (s *AlterViewStatementSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterViewStatementSuffixContext) AlterViewSuffixProperties() IAlterViewSuffixPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterViewSuffixPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterViewSuffixPropertiesContext)
}

func (s *AlterViewStatementSuffixContext) AlterStatementSuffixRename() IAlterStatementSuffixRenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixRenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixRenameContext)
}

func (s *AlterViewStatementSuffixContext) AlterStatementSuffixAddPartitions() IAlterStatementSuffixAddPartitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixAddPartitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixAddPartitionsContext)
}

func (s *AlterViewStatementSuffixContext) AlterStatementSuffixDropPartitions() IAlterStatementSuffixDropPartitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixDropPartitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixDropPartitionsContext)
}

func (s *AlterViewStatementSuffixContext) SelectStatementWithCTE() ISelectStatementWithCTEContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementWithCTEContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementWithCTEContext)
}

func (s *AlterViewStatementSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterViewStatementSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterViewStatementSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterViewStatementSuffix(s)
	}
}

func (s *AlterViewStatementSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterViewStatementSuffix(s)
	}
}

func (p *HiveParser) AlterViewStatementSuffix() (localctx IAlterViewStatementSuffixContext) {
	localctx = NewAlterViewStatementSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, HiveParserRULE_alterViewStatementSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1245)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_SET, HiveParserKW_UNSET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1240)
			p.AlterViewSuffixProperties()
		}

	case HiveParserKW_RENAME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1241)
			p.AlterStatementSuffixRename()
		}

	case HiveParserKW_ADD:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1242)
			p.AlterStatementSuffixAddPartitions()
		}

	case HiveParserKW_DROP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1243)
			p.AlterStatementSuffixDropPartitions()
		}

	case HiveParserKW_SELECT, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserKW_WITH, HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1244)
			p.SelectStatementWithCTE()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterMaterializedViewStatementSuffixContext is an interface to support dynamic dispatch.
type IAlterMaterializedViewStatementSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterMaterializedViewStatementSuffixContext differentiates from other interfaces.
	IsAlterMaterializedViewStatementSuffixContext()
}

type AlterMaterializedViewStatementSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterMaterializedViewStatementSuffixContext() *AlterMaterializedViewStatementSuffixContext {
	var p = new(AlterMaterializedViewStatementSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterMaterializedViewStatementSuffix
	return p
}

func (*AlterMaterializedViewStatementSuffixContext) IsAlterMaterializedViewStatementSuffixContext() {}

func NewAlterMaterializedViewStatementSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterMaterializedViewStatementSuffixContext {
	var p = new(AlterMaterializedViewStatementSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterMaterializedViewStatementSuffix

	return p
}

func (s *AlterMaterializedViewStatementSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterMaterializedViewStatementSuffixContext) AlterMaterializedViewSuffixRewrite() IAlterMaterializedViewSuffixRewriteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterMaterializedViewSuffixRewriteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterMaterializedViewSuffixRewriteContext)
}

func (s *AlterMaterializedViewStatementSuffixContext) AlterMaterializedViewSuffixRebuild() IAlterMaterializedViewSuffixRebuildContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterMaterializedViewSuffixRebuildContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterMaterializedViewSuffixRebuildContext)
}

func (s *AlterMaterializedViewStatementSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterMaterializedViewStatementSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterMaterializedViewStatementSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterMaterializedViewStatementSuffix(s)
	}
}

func (s *AlterMaterializedViewStatementSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterMaterializedViewStatementSuffix(s)
	}
}

func (p *HiveParser) AlterMaterializedViewStatementSuffix() (localctx IAlterMaterializedViewStatementSuffixContext) {
	localctx = NewAlterMaterializedViewStatementSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, HiveParserRULE_alterMaterializedViewStatementSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1249)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ENABLE, HiveParserKW_DISABLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1247)
			p.AlterMaterializedViewSuffixRewrite()
		}

	case HiveParserKW_REBUILD:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1248)
			p.AlterMaterializedViewSuffixRebuild()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterDatabaseStatementSuffixContext is an interface to support dynamic dispatch.
type IAlterDatabaseStatementSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseStatementSuffixContext differentiates from other interfaces.
	IsAlterDatabaseStatementSuffixContext()
}

type AlterDatabaseStatementSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseStatementSuffixContext() *AlterDatabaseStatementSuffixContext {
	var p = new(AlterDatabaseStatementSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterDatabaseStatementSuffix
	return p
}

func (*AlterDatabaseStatementSuffixContext) IsAlterDatabaseStatementSuffixContext() {}

func NewAlterDatabaseStatementSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseStatementSuffixContext {
	var p = new(AlterDatabaseStatementSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterDatabaseStatementSuffix

	return p
}

func (s *AlterDatabaseStatementSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseStatementSuffixContext) AlterDatabaseSuffixProperties() IAlterDatabaseSuffixPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseSuffixPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseSuffixPropertiesContext)
}

func (s *AlterDatabaseStatementSuffixContext) AlterDatabaseSuffixSetOwner() IAlterDatabaseSuffixSetOwnerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseSuffixSetOwnerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseSuffixSetOwnerContext)
}

func (s *AlterDatabaseStatementSuffixContext) AlterDatabaseSuffixSetLocation() IAlterDatabaseSuffixSetLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseSuffixSetLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseSuffixSetLocationContext)
}

func (s *AlterDatabaseStatementSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseStatementSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterDatabaseStatementSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterDatabaseStatementSuffix(s)
	}
}

func (s *AlterDatabaseStatementSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterDatabaseStatementSuffix(s)
	}
}

func (p *HiveParser) AlterDatabaseStatementSuffix() (localctx IAlterDatabaseStatementSuffixContext) {
	localctx = NewAlterDatabaseStatementSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, HiveParserRULE_alterDatabaseStatementSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1254)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1251)
			p.AlterDatabaseSuffixProperties()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1252)
			p.AlterDatabaseSuffixSetOwner()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1253)
			p.AlterDatabaseSuffixSetLocation()
		}

	}

	return localctx
}

// IAlterDatabaseSuffixPropertiesContext is an interface to support dynamic dispatch.
type IAlterDatabaseSuffixPropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseSuffixPropertiesContext differentiates from other interfaces.
	IsAlterDatabaseSuffixPropertiesContext()
}

type AlterDatabaseSuffixPropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseSuffixPropertiesContext() *AlterDatabaseSuffixPropertiesContext {
	var p = new(AlterDatabaseSuffixPropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterDatabaseSuffixProperties
	return p
}

func (*AlterDatabaseSuffixPropertiesContext) IsAlterDatabaseSuffixPropertiesContext() {}

func NewAlterDatabaseSuffixPropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseSuffixPropertiesContext {
	var p = new(AlterDatabaseSuffixPropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterDatabaseSuffixProperties

	return p
}

func (s *AlterDatabaseSuffixPropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseSuffixPropertiesContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterDatabaseSuffixPropertiesContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterDatabaseSuffixPropertiesContext) KW_DBPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DBPROPERTIES, 0)
}

func (s *AlterDatabaseSuffixPropertiesContext) DbProperties() IDbPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDbPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDbPropertiesContext)
}

func (s *AlterDatabaseSuffixPropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseSuffixPropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterDatabaseSuffixPropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterDatabaseSuffixProperties(s)
	}
}

func (s *AlterDatabaseSuffixPropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterDatabaseSuffixProperties(s)
	}
}

func (p *HiveParser) AlterDatabaseSuffixProperties() (localctx IAlterDatabaseSuffixPropertiesContext) {
	localctx = NewAlterDatabaseSuffixPropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, HiveParserRULE_alterDatabaseSuffixProperties)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1256)
		p.Identifier()
	}
	{
		p.SetState(1257)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1258)
		p.Match(HiveParserKW_DBPROPERTIES)
	}
	{
		p.SetState(1259)
		p.DbProperties()
	}

	return localctx
}

// IAlterDatabaseSuffixSetOwnerContext is an interface to support dynamic dispatch.
type IAlterDatabaseSuffixSetOwnerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseSuffixSetOwnerContext differentiates from other interfaces.
	IsAlterDatabaseSuffixSetOwnerContext()
}

type AlterDatabaseSuffixSetOwnerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseSuffixSetOwnerContext() *AlterDatabaseSuffixSetOwnerContext {
	var p = new(AlterDatabaseSuffixSetOwnerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterDatabaseSuffixSetOwner
	return p
}

func (*AlterDatabaseSuffixSetOwnerContext) IsAlterDatabaseSuffixSetOwnerContext() {}

func NewAlterDatabaseSuffixSetOwnerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseSuffixSetOwnerContext {
	var p = new(AlterDatabaseSuffixSetOwnerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterDatabaseSuffixSetOwner

	return p
}

func (s *AlterDatabaseSuffixSetOwnerContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseSuffixSetOwnerContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterDatabaseSuffixSetOwnerContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterDatabaseSuffixSetOwnerContext) KW_OWNER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OWNER, 0)
}

func (s *AlterDatabaseSuffixSetOwnerContext) PrincipalName() IPrincipalNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalNameContext)
}

func (s *AlterDatabaseSuffixSetOwnerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseSuffixSetOwnerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterDatabaseSuffixSetOwnerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterDatabaseSuffixSetOwner(s)
	}
}

func (s *AlterDatabaseSuffixSetOwnerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterDatabaseSuffixSetOwner(s)
	}
}

func (p *HiveParser) AlterDatabaseSuffixSetOwner() (localctx IAlterDatabaseSuffixSetOwnerContext) {
	localctx = NewAlterDatabaseSuffixSetOwnerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, HiveParserRULE_alterDatabaseSuffixSetOwner)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1261)
		p.Identifier()
	}
	{
		p.SetState(1262)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1263)
		p.Match(HiveParserKW_OWNER)
	}
	{
		p.SetState(1264)
		p.PrincipalName()
	}

	return localctx
}

// IAlterDatabaseSuffixSetLocationContext is an interface to support dynamic dispatch.
type IAlterDatabaseSuffixSetLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseSuffixSetLocationContext differentiates from other interfaces.
	IsAlterDatabaseSuffixSetLocationContext()
}

type AlterDatabaseSuffixSetLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseSuffixSetLocationContext() *AlterDatabaseSuffixSetLocationContext {
	var p = new(AlterDatabaseSuffixSetLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterDatabaseSuffixSetLocation
	return p
}

func (*AlterDatabaseSuffixSetLocationContext) IsAlterDatabaseSuffixSetLocationContext() {}

func NewAlterDatabaseSuffixSetLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseSuffixSetLocationContext {
	var p = new(AlterDatabaseSuffixSetLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterDatabaseSuffixSetLocation

	return p
}

func (s *AlterDatabaseSuffixSetLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseSuffixSetLocationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterDatabaseSuffixSetLocationContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterDatabaseSuffixSetLocationContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *AlterDatabaseSuffixSetLocationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterDatabaseSuffixSetLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseSuffixSetLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterDatabaseSuffixSetLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterDatabaseSuffixSetLocation(s)
	}
}

func (s *AlterDatabaseSuffixSetLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterDatabaseSuffixSetLocation(s)
	}
}

func (p *HiveParser) AlterDatabaseSuffixSetLocation() (localctx IAlterDatabaseSuffixSetLocationContext) {
	localctx = NewAlterDatabaseSuffixSetLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, HiveParserRULE_alterDatabaseSuffixSetLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1266)
		p.Identifier()
	}
	{
		p.SetState(1267)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1268)
		p.Match(HiveParserKW_LOCATION)
	}
	{
		p.SetState(1269)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IAlterStatementSuffixRenameContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixRenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixRenameContext differentiates from other interfaces.
	IsAlterStatementSuffixRenameContext()
}

type AlterStatementSuffixRenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixRenameContext() *AlterStatementSuffixRenameContext {
	var p = new(AlterStatementSuffixRenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixRename
	return p
}

func (*AlterStatementSuffixRenameContext) IsAlterStatementSuffixRenameContext() {}

func NewAlterStatementSuffixRenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixRenameContext {
	var p = new(AlterStatementSuffixRenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixRename

	return p
}

func (s *AlterStatementSuffixRenameContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixRenameContext) KW_RENAME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RENAME, 0)
}

func (s *AlterStatementSuffixRenameContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *AlterStatementSuffixRenameContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterStatementSuffixRenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixRenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixRenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixRename(s)
	}
}

func (s *AlterStatementSuffixRenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixRename(s)
	}
}

func (p *HiveParser) AlterStatementSuffixRename() (localctx IAlterStatementSuffixRenameContext) {
	localctx = NewAlterStatementSuffixRenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, HiveParserRULE_alterStatementSuffixRename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1271)
		p.Match(HiveParserKW_RENAME)
	}
	{
		p.SetState(1272)
		p.Match(HiveParserKW_TO)
	}
	{
		p.SetState(1273)
		p.TableName()
	}

	return localctx
}

// IAlterStatementSuffixAddColContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixAddColContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixAddColContext differentiates from other interfaces.
	IsAlterStatementSuffixAddColContext()
}

type AlterStatementSuffixAddColContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixAddColContext() *AlterStatementSuffixAddColContext {
	var p = new(AlterStatementSuffixAddColContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddCol
	return p
}

func (*AlterStatementSuffixAddColContext) IsAlterStatementSuffixAddColContext() {}

func NewAlterStatementSuffixAddColContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixAddColContext {
	var p = new(AlterStatementSuffixAddColContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddCol

	return p
}

func (s *AlterStatementSuffixAddColContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixAddColContext) KW_COLUMNS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMNS, 0)
}

func (s *AlterStatementSuffixAddColContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *AlterStatementSuffixAddColContext) ColumnNameTypeList() IColumnNameTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeListContext)
}

func (s *AlterStatementSuffixAddColContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *AlterStatementSuffixAddColContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *AlterStatementSuffixAddColContext) KW_REPLACE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLACE, 0)
}

func (s *AlterStatementSuffixAddColContext) RestrictOrCascade() IRestrictOrCascadeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictOrCascadeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictOrCascadeContext)
}

func (s *AlterStatementSuffixAddColContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixAddColContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixAddColContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixAddCol(s)
	}
}

func (s *AlterStatementSuffixAddColContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixAddCol(s)
	}
}

func (p *HiveParser) AlterStatementSuffixAddCol() (localctx IAlterStatementSuffixAddColContext) {
	localctx = NewAlterStatementSuffixAddColContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, HiveParserRULE_alterStatementSuffixAddCol)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1275)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_ADD || _la == HiveParserKW_REPLACE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1276)
		p.Match(HiveParserKW_COLUMNS)
	}
	{
		p.SetState(1277)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(1278)
		p.ColumnNameTypeList()
	}
	{
		p.SetState(1279)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RESTRICT || _la == HiveParserKW_CASCADE {
		{
			p.SetState(1280)
			p.RestrictOrCascade()
		}

	}

	return localctx
}

// IAlterStatementSuffixAddConstraintContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixAddConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixAddConstraintContext differentiates from other interfaces.
	IsAlterStatementSuffixAddConstraintContext()
}

type AlterStatementSuffixAddConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixAddConstraintContext() *AlterStatementSuffixAddConstraintContext {
	var p = new(AlterStatementSuffixAddConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddConstraint
	return p
}

func (*AlterStatementSuffixAddConstraintContext) IsAlterStatementSuffixAddConstraintContext() {}

func NewAlterStatementSuffixAddConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixAddConstraintContext {
	var p = new(AlterStatementSuffixAddConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddConstraint

	return p
}

func (s *AlterStatementSuffixAddConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixAddConstraintContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *AlterStatementSuffixAddConstraintContext) AlterForeignKeyWithName() IAlterForeignKeyWithNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterForeignKeyWithNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterForeignKeyWithNameContext)
}

func (s *AlterStatementSuffixAddConstraintContext) AlterConstraintWithName() IAlterConstraintWithNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterConstraintWithNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterConstraintWithNameContext)
}

func (s *AlterStatementSuffixAddConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixAddConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixAddConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixAddConstraint(s)
	}
}

func (s *AlterStatementSuffixAddConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixAddConstraint(s)
	}
}

func (p *HiveParser) AlterStatementSuffixAddConstraint() (localctx IAlterStatementSuffixAddConstraintContext) {
	localctx = NewAlterStatementSuffixAddConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, HiveParserRULE_alterStatementSuffixAddConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1283)
		p.Match(HiveParserKW_ADD)
	}
	p.SetState(1286)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1284)
			p.AlterForeignKeyWithName()
		}

	case 2:
		{
			p.SetState(1285)
			p.AlterConstraintWithName()
		}

	}

	return localctx
}

// IAlterStatementSuffixUpdateColumnsContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixUpdateColumnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixUpdateColumnsContext differentiates from other interfaces.
	IsAlterStatementSuffixUpdateColumnsContext()
}

type AlterStatementSuffixUpdateColumnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixUpdateColumnsContext() *AlterStatementSuffixUpdateColumnsContext {
	var p = new(AlterStatementSuffixUpdateColumnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUpdateColumns
	return p
}

func (*AlterStatementSuffixUpdateColumnsContext) IsAlterStatementSuffixUpdateColumnsContext() {}

func NewAlterStatementSuffixUpdateColumnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixUpdateColumnsContext {
	var p = new(AlterStatementSuffixUpdateColumnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUpdateColumns

	return p
}

func (s *AlterStatementSuffixUpdateColumnsContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixUpdateColumnsContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *AlterStatementSuffixUpdateColumnsContext) KW_COLUMNS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMNS, 0)
}

func (s *AlterStatementSuffixUpdateColumnsContext) RestrictOrCascade() IRestrictOrCascadeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictOrCascadeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictOrCascadeContext)
}

func (s *AlterStatementSuffixUpdateColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixUpdateColumnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixUpdateColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixUpdateColumns(s)
	}
}

func (s *AlterStatementSuffixUpdateColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixUpdateColumns(s)
	}
}

func (p *HiveParser) AlterStatementSuffixUpdateColumns() (localctx IAlterStatementSuffixUpdateColumnsContext) {
	localctx = NewAlterStatementSuffixUpdateColumnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, HiveParserRULE_alterStatementSuffixUpdateColumns)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1288)
		p.Match(HiveParserKW_UPDATE)
	}
	{
		p.SetState(1289)
		p.Match(HiveParserKW_COLUMNS)
	}
	p.SetState(1291)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RESTRICT || _la == HiveParserKW_CASCADE {
		{
			p.SetState(1290)
			p.RestrictOrCascade()
		}

	}

	return localctx
}

// IAlterStatementSuffixDropConstraintContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixDropConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixDropConstraintContext differentiates from other interfaces.
	IsAlterStatementSuffixDropConstraintContext()
}

type AlterStatementSuffixDropConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixDropConstraintContext() *AlterStatementSuffixDropConstraintContext {
	var p = new(AlterStatementSuffixDropConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixDropConstraint
	return p
}

func (*AlterStatementSuffixDropConstraintContext) IsAlterStatementSuffixDropConstraintContext() {}

func NewAlterStatementSuffixDropConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixDropConstraintContext {
	var p = new(AlterStatementSuffixDropConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixDropConstraint

	return p
}

func (s *AlterStatementSuffixDropConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixDropConstraintContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *AlterStatementSuffixDropConstraintContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *AlterStatementSuffixDropConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterStatementSuffixDropConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixDropConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixDropConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixDropConstraint(s)
	}
}

func (s *AlterStatementSuffixDropConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixDropConstraint(s)
	}
}

func (p *HiveParser) AlterStatementSuffixDropConstraint() (localctx IAlterStatementSuffixDropConstraintContext) {
	localctx = NewAlterStatementSuffixDropConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, HiveParserRULE_alterStatementSuffixDropConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1293)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(1294)
		p.Match(HiveParserKW_CONSTRAINT)
	}
	{
		p.SetState(1295)
		p.Identifier()
	}

	return localctx
}

// IAlterStatementSuffixRenameColContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixRenameColContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixRenameColContext differentiates from other interfaces.
	IsAlterStatementSuffixRenameColContext()
}

type AlterStatementSuffixRenameColContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixRenameColContext() *AlterStatementSuffixRenameColContext {
	var p = new(AlterStatementSuffixRenameColContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixRenameCol
	return p
}

func (*AlterStatementSuffixRenameColContext) IsAlterStatementSuffixRenameColContext() {}

func NewAlterStatementSuffixRenameColContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixRenameColContext {
	var p = new(AlterStatementSuffixRenameColContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixRenameCol

	return p
}

func (s *AlterStatementSuffixRenameColContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixRenameColContext) KW_CHANGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CHANGE, 0)
}

func (s *AlterStatementSuffixRenameColContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterStatementSuffixRenameColContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterStatementSuffixRenameColContext) ColType() IColTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColTypeContext)
}

func (s *AlterStatementSuffixRenameColContext) KW_COLUMN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMN, 0)
}

func (s *AlterStatementSuffixRenameColContext) AlterColumnConstraint() IAlterColumnConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterColumnConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterColumnConstraintContext)
}

func (s *AlterStatementSuffixRenameColContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *AlterStatementSuffixRenameColContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterStatementSuffixRenameColContext) AlterStatementChangeColPosition() IAlterStatementChangeColPositionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementChangeColPositionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementChangeColPositionContext)
}

func (s *AlterStatementSuffixRenameColContext) RestrictOrCascade() IRestrictOrCascadeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictOrCascadeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictOrCascadeContext)
}

func (s *AlterStatementSuffixRenameColContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixRenameColContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixRenameColContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixRenameCol(s)
	}
}

func (s *AlterStatementSuffixRenameColContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixRenameCol(s)
	}
}

func (p *HiveParser) AlterStatementSuffixRenameCol() (localctx IAlterStatementSuffixRenameColContext) {
	localctx = NewAlterStatementSuffixRenameColContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, HiveParserRULE_alterStatementSuffixRenameCol)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1297)
		p.Match(HiveParserKW_CHANGE)
	}
	p.SetState(1299)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COLUMN {
		{
			p.SetState(1298)
			p.Match(HiveParserKW_COLUMN)
		}

	}
	{
		p.SetState(1301)
		p.Identifier()
	}
	{
		p.SetState(1302)
		p.Identifier()
	}
	{
		p.SetState(1303)
		p.ColType()
	}
	p.SetState(1305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || (((_la-287)&-(0x1f+1)) == 0 && ((1<<uint((_la-287)))&((1<<(HiveParserKW_PRIMARY-287))|(1<<(HiveParserKW_REFERENCES-287))|(1<<(HiveParserKW_CONSTRAINT-287))|(1<<(HiveParserKW_UNIQUE-287))|(1<<(HiveParserKW_DEFAULT-287))|(1<<(HiveParserKW_CHECK-287)))) != 0) {
		{
			p.SetState(1304)
			p.AlterColumnConstraint()
		}

	}
	p.SetState(1309)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(1307)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(1308)
			p.Match(HiveParserStringLiteral)
		}

	}
	p.SetState(1312)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_FIRST || _la == HiveParserKW_AFTER {
		{
			p.SetState(1311)
			p.AlterStatementChangeColPosition()
		}

	}
	p.SetState(1315)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RESTRICT || _la == HiveParserKW_CASCADE {
		{
			p.SetState(1314)
			p.RestrictOrCascade()
		}

	}

	return localctx
}

// IAlterStatementSuffixUpdateStatsColContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixUpdateStatsColContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixUpdateStatsColContext differentiates from other interfaces.
	IsAlterStatementSuffixUpdateStatsColContext()
}

type AlterStatementSuffixUpdateStatsColContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixUpdateStatsColContext() *AlterStatementSuffixUpdateStatsColContext {
	var p = new(AlterStatementSuffixUpdateStatsColContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUpdateStatsCol
	return p
}

func (*AlterStatementSuffixUpdateStatsColContext) IsAlterStatementSuffixUpdateStatsColContext() {}

func NewAlterStatementSuffixUpdateStatsColContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixUpdateStatsColContext {
	var p = new(AlterStatementSuffixUpdateStatsColContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUpdateStatsCol

	return p
}

func (s *AlterStatementSuffixUpdateStatsColContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixUpdateStatsColContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) KW_STATISTICS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATISTICS, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOR, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterStatementSuffixUpdateStatsColContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterStatementSuffixUpdateStatsColContext) KW_COLUMN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMN, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterStatementSuffixUpdateStatsColContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixUpdateStatsColContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixUpdateStatsColContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixUpdateStatsCol(s)
	}
}

func (s *AlterStatementSuffixUpdateStatsColContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixUpdateStatsCol(s)
	}
}

func (p *HiveParser) AlterStatementSuffixUpdateStatsCol() (localctx IAlterStatementSuffixUpdateStatsColContext) {
	localctx = NewAlterStatementSuffixUpdateStatsColContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, HiveParserRULE_alterStatementSuffixUpdateStatsCol)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1317)
		p.Match(HiveParserKW_UPDATE)
	}
	{
		p.SetState(1318)
		p.Match(HiveParserKW_STATISTICS)
	}
	{
		p.SetState(1319)
		p.Match(HiveParserKW_FOR)
	}
	p.SetState(1321)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COLUMN {
		{
			p.SetState(1320)
			p.Match(HiveParserKW_COLUMN)
		}

	}
	{
		p.SetState(1323)
		p.Identifier()
	}
	{
		p.SetState(1324)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1325)
		p.TableProperties()
	}
	p.SetState(1328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(1326)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(1327)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// IAlterStatementSuffixUpdateStatsContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixUpdateStatsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixUpdateStatsContext differentiates from other interfaces.
	IsAlterStatementSuffixUpdateStatsContext()
}

type AlterStatementSuffixUpdateStatsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixUpdateStatsContext() *AlterStatementSuffixUpdateStatsContext {
	var p = new(AlterStatementSuffixUpdateStatsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUpdateStats
	return p
}

func (*AlterStatementSuffixUpdateStatsContext) IsAlterStatementSuffixUpdateStatsContext() {}

func NewAlterStatementSuffixUpdateStatsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixUpdateStatsContext {
	var p = new(AlterStatementSuffixUpdateStatsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUpdateStats

	return p
}

func (s *AlterStatementSuffixUpdateStatsContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixUpdateStatsContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *AlterStatementSuffixUpdateStatsContext) KW_STATISTICS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATISTICS, 0)
}

func (s *AlterStatementSuffixUpdateStatsContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixUpdateStatsContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterStatementSuffixUpdateStatsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixUpdateStatsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixUpdateStatsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixUpdateStats(s)
	}
}

func (s *AlterStatementSuffixUpdateStatsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixUpdateStats(s)
	}
}

func (p *HiveParser) AlterStatementSuffixUpdateStats() (localctx IAlterStatementSuffixUpdateStatsContext) {
	localctx = NewAlterStatementSuffixUpdateStatsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, HiveParserRULE_alterStatementSuffixUpdateStats)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1330)
		p.Match(HiveParserKW_UPDATE)
	}
	{
		p.SetState(1331)
		p.Match(HiveParserKW_STATISTICS)
	}
	{
		p.SetState(1332)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1333)
		p.TableProperties()
	}

	return localctx
}

// IAlterStatementChangeColPositionContext is an interface to support dynamic dispatch.
type IAlterStatementChangeColPositionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirst returns the first token.
	GetFirst() antlr.Token

	// SetFirst sets the first token.
	SetFirst(antlr.Token)

	// IsAlterStatementChangeColPositionContext differentiates from other interfaces.
	IsAlterStatementChangeColPositionContext()
}

type AlterStatementChangeColPositionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	first  antlr.Token
}

func NewEmptyAlterStatementChangeColPositionContext() *AlterStatementChangeColPositionContext {
	var p = new(AlterStatementChangeColPositionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementChangeColPosition
	return p
}

func (*AlterStatementChangeColPositionContext) IsAlterStatementChangeColPositionContext() {}

func NewAlterStatementChangeColPositionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementChangeColPositionContext {
	var p = new(AlterStatementChangeColPositionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementChangeColPosition

	return p
}

func (s *AlterStatementChangeColPositionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementChangeColPositionContext) GetFirst() antlr.Token { return s.first }

func (s *AlterStatementChangeColPositionContext) SetFirst(v antlr.Token) { s.first = v }

func (s *AlterStatementChangeColPositionContext) KW_FIRST() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FIRST, 0)
}

func (s *AlterStatementChangeColPositionContext) KW_AFTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AFTER, 0)
}

func (s *AlterStatementChangeColPositionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterStatementChangeColPositionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementChangeColPositionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementChangeColPositionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementChangeColPosition(s)
	}
}

func (s *AlterStatementChangeColPositionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementChangeColPosition(s)
	}
}

func (p *HiveParser) AlterStatementChangeColPosition() (localctx IAlterStatementChangeColPositionContext) {
	localctx = NewAlterStatementChangeColPositionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, HiveParserRULE_alterStatementChangeColPosition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1338)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_FIRST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1335)

			var _m = p.Match(HiveParserKW_FIRST)

			localctx.(*AlterStatementChangeColPositionContext).first = _m
		}

	case HiveParserKW_AFTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1336)
			p.Match(HiveParserKW_AFTER)
		}
		{
			p.SetState(1337)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterStatementSuffixAddPartitionsContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixAddPartitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixAddPartitionsContext differentiates from other interfaces.
	IsAlterStatementSuffixAddPartitionsContext()
}

type AlterStatementSuffixAddPartitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixAddPartitionsContext() *AlterStatementSuffixAddPartitionsContext {
	var p = new(AlterStatementSuffixAddPartitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddPartitions
	return p
}

func (*AlterStatementSuffixAddPartitionsContext) IsAlterStatementSuffixAddPartitionsContext() {}

func NewAlterStatementSuffixAddPartitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixAddPartitionsContext {
	var p = new(AlterStatementSuffixAddPartitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddPartitions

	return p
}

func (s *AlterStatementSuffixAddPartitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixAddPartitionsContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *AlterStatementSuffixAddPartitionsContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *AlterStatementSuffixAddPartitionsContext) AllAlterStatementSuffixAddPartitionsElement() []IAlterStatementSuffixAddPartitionsElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterStatementSuffixAddPartitionsElementContext)(nil)).Elem())
	var tst = make([]IAlterStatementSuffixAddPartitionsElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterStatementSuffixAddPartitionsElementContext)
		}
	}

	return tst
}

func (s *AlterStatementSuffixAddPartitionsContext) AlterStatementSuffixAddPartitionsElement(i int) IAlterStatementSuffixAddPartitionsElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementSuffixAddPartitionsElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementSuffixAddPartitionsElementContext)
}

func (s *AlterStatementSuffixAddPartitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixAddPartitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixAddPartitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixAddPartitions(s)
	}
}

func (s *AlterStatementSuffixAddPartitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixAddPartitions(s)
	}
}

func (p *HiveParser) AlterStatementSuffixAddPartitions() (localctx IAlterStatementSuffixAddPartitionsContext) {
	localctx = NewAlterStatementSuffixAddPartitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, HiveParserRULE_alterStatementSuffixAddPartitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1340)
		p.Match(HiveParserKW_ADD)
	}
	p.SetState(1342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1341)
			p.IfNotExists()
		}

	}
	p.SetState(1345)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserKW_PARTITION {
		{
			p.SetState(1344)
			p.AlterStatementSuffixAddPartitionsElement()
		}

		p.SetState(1347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterStatementSuffixAddPartitionsElementContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixAddPartitionsElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixAddPartitionsElementContext differentiates from other interfaces.
	IsAlterStatementSuffixAddPartitionsElementContext()
}

type AlterStatementSuffixAddPartitionsElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixAddPartitionsElementContext() *AlterStatementSuffixAddPartitionsElementContext {
	var p = new(AlterStatementSuffixAddPartitionsElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddPartitionsElement
	return p
}

func (*AlterStatementSuffixAddPartitionsElementContext) IsAlterStatementSuffixAddPartitionsElementContext() {
}

func NewAlterStatementSuffixAddPartitionsElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixAddPartitionsElementContext {
	var p = new(AlterStatementSuffixAddPartitionsElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixAddPartitionsElement

	return p
}

func (s *AlterStatementSuffixAddPartitionsElementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixAddPartitionsElementContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterStatementSuffixAddPartitionsElementContext) PartitionLocation() IPartitionLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionLocationContext)
}

func (s *AlterStatementSuffixAddPartitionsElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixAddPartitionsElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixAddPartitionsElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixAddPartitionsElement(s)
	}
}

func (s *AlterStatementSuffixAddPartitionsElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixAddPartitionsElement(s)
	}
}

func (p *HiveParser) AlterStatementSuffixAddPartitionsElement() (localctx IAlterStatementSuffixAddPartitionsElementContext) {
	localctx = NewAlterStatementSuffixAddPartitionsElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, HiveParserRULE_alterStatementSuffixAddPartitionsElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1349)
		p.PartitionSpec()
	}
	p.SetState(1351)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LOCATION {
		{
			p.SetState(1350)
			p.PartitionLocation()
		}

	}

	return localctx
}

// IAlterStatementSuffixTouchContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixTouchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixTouchContext differentiates from other interfaces.
	IsAlterStatementSuffixTouchContext()
}

type AlterStatementSuffixTouchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixTouchContext() *AlterStatementSuffixTouchContext {
	var p = new(AlterStatementSuffixTouchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixTouch
	return p
}

func (*AlterStatementSuffixTouchContext) IsAlterStatementSuffixTouchContext() {}

func NewAlterStatementSuffixTouchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixTouchContext {
	var p = new(AlterStatementSuffixTouchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixTouch

	return p
}

func (s *AlterStatementSuffixTouchContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixTouchContext) KW_TOUCH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TOUCH, 0)
}

func (s *AlterStatementSuffixTouchContext) AllPartitionSpec() []IPartitionSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem())
	var tst = make([]IPartitionSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionSpecContext)
		}
	}

	return tst
}

func (s *AlterStatementSuffixTouchContext) PartitionSpec(i int) IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterStatementSuffixTouchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixTouchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixTouchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixTouch(s)
	}
}

func (s *AlterStatementSuffixTouchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixTouch(s)
	}
}

func (p *HiveParser) AlterStatementSuffixTouch() (localctx IAlterStatementSuffixTouchContext) {
	localctx = NewAlterStatementSuffixTouchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, HiveParserRULE_alterStatementSuffixTouch)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1353)
		p.Match(HiveParserKW_TOUCH)
	}
	p.SetState(1357)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserKW_PARTITION {
		{
			p.SetState(1354)
			p.PartitionSpec()
		}

		p.SetState(1359)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterStatementSuffixArchiveContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixArchiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixArchiveContext differentiates from other interfaces.
	IsAlterStatementSuffixArchiveContext()
}

type AlterStatementSuffixArchiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixArchiveContext() *AlterStatementSuffixArchiveContext {
	var p = new(AlterStatementSuffixArchiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixArchive
	return p
}

func (*AlterStatementSuffixArchiveContext) IsAlterStatementSuffixArchiveContext() {}

func NewAlterStatementSuffixArchiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixArchiveContext {
	var p = new(AlterStatementSuffixArchiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixArchive

	return p
}

func (s *AlterStatementSuffixArchiveContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixArchiveContext) KW_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ARCHIVE, 0)
}

func (s *AlterStatementSuffixArchiveContext) AllPartitionSpec() []IPartitionSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem())
	var tst = make([]IPartitionSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionSpecContext)
		}
	}

	return tst
}

func (s *AlterStatementSuffixArchiveContext) PartitionSpec(i int) IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterStatementSuffixArchiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixArchiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixArchiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixArchive(s)
	}
}

func (s *AlterStatementSuffixArchiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixArchive(s)
	}
}

func (p *HiveParser) AlterStatementSuffixArchive() (localctx IAlterStatementSuffixArchiveContext) {
	localctx = NewAlterStatementSuffixArchiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, HiveParserRULE_alterStatementSuffixArchive)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1360)
		p.Match(HiveParserKW_ARCHIVE)
	}
	p.SetState(1364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserKW_PARTITION {
		{
			p.SetState(1361)
			p.PartitionSpec()
		}

		p.SetState(1366)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterStatementSuffixUnArchiveContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixUnArchiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixUnArchiveContext differentiates from other interfaces.
	IsAlterStatementSuffixUnArchiveContext()
}

type AlterStatementSuffixUnArchiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixUnArchiveContext() *AlterStatementSuffixUnArchiveContext {
	var p = new(AlterStatementSuffixUnArchiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUnArchive
	return p
}

func (*AlterStatementSuffixUnArchiveContext) IsAlterStatementSuffixUnArchiveContext() {}

func NewAlterStatementSuffixUnArchiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixUnArchiveContext {
	var p = new(AlterStatementSuffixUnArchiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixUnArchive

	return p
}

func (s *AlterStatementSuffixUnArchiveContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixUnArchiveContext) KW_UNARCHIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNARCHIVE, 0)
}

func (s *AlterStatementSuffixUnArchiveContext) AllPartitionSpec() []IPartitionSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem())
	var tst = make([]IPartitionSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionSpecContext)
		}
	}

	return tst
}

func (s *AlterStatementSuffixUnArchiveContext) PartitionSpec(i int) IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterStatementSuffixUnArchiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixUnArchiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixUnArchiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixUnArchive(s)
	}
}

func (s *AlterStatementSuffixUnArchiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixUnArchive(s)
	}
}

func (p *HiveParser) AlterStatementSuffixUnArchive() (localctx IAlterStatementSuffixUnArchiveContext) {
	localctx = NewAlterStatementSuffixUnArchiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, HiveParserRULE_alterStatementSuffixUnArchive)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1367)
		p.Match(HiveParserKW_UNARCHIVE)
	}
	p.SetState(1371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserKW_PARTITION {
		{
			p.SetState(1368)
			p.PartitionSpec()
		}

		p.SetState(1373)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPartitionLocationContext is an interface to support dynamic dispatch.
type IPartitionLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionLocationContext differentiates from other interfaces.
	IsPartitionLocationContext()
}

type PartitionLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionLocationContext() *PartitionLocationContext {
	var p = new(PartitionLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitionLocation
	return p
}

func (*PartitionLocationContext) IsPartitionLocationContext() {}

func NewPartitionLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionLocationContext {
	var p = new(PartitionLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitionLocation

	return p
}

func (s *PartitionLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionLocationContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *PartitionLocationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *PartitionLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitionLocation(s)
	}
}

func (s *PartitionLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitionLocation(s)
	}
}

func (p *HiveParser) PartitionLocation() (localctx IPartitionLocationContext) {
	localctx = NewPartitionLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, HiveParserRULE_partitionLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1374)
		p.Match(HiveParserKW_LOCATION)
	}
	{
		p.SetState(1375)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IAlterStatementSuffixDropPartitionsContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixDropPartitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixDropPartitionsContext differentiates from other interfaces.
	IsAlterStatementSuffixDropPartitionsContext()
}

type AlterStatementSuffixDropPartitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixDropPartitionsContext() *AlterStatementSuffixDropPartitionsContext {
	var p = new(AlterStatementSuffixDropPartitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixDropPartitions
	return p
}

func (*AlterStatementSuffixDropPartitionsContext) IsAlterStatementSuffixDropPartitionsContext() {}

func NewAlterStatementSuffixDropPartitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixDropPartitionsContext {
	var p = new(AlterStatementSuffixDropPartitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixDropPartitions

	return p
}

func (s *AlterStatementSuffixDropPartitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixDropPartitionsContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *AlterStatementSuffixDropPartitionsContext) AllDropPartitionSpec() []IDropPartitionSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDropPartitionSpecContext)(nil)).Elem())
	var tst = make([]IDropPartitionSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDropPartitionSpecContext)
		}
	}

	return tst
}

func (s *AlterStatementSuffixDropPartitionsContext) DropPartitionSpec(i int) IDropPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropPartitionSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDropPartitionSpecContext)
}

func (s *AlterStatementSuffixDropPartitionsContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *AlterStatementSuffixDropPartitionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *AlterStatementSuffixDropPartitionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *AlterStatementSuffixDropPartitionsContext) KW_PURGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PURGE, 0)
}

func (s *AlterStatementSuffixDropPartitionsContext) ReplicationClause() IReplicationClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplicationClauseContext)
}

func (s *AlterStatementSuffixDropPartitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixDropPartitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixDropPartitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixDropPartitions(s)
	}
}

func (s *AlterStatementSuffixDropPartitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixDropPartitions(s)
	}
}

func (p *HiveParser) AlterStatementSuffixDropPartitions() (localctx IAlterStatementSuffixDropPartitionsContext) {
	localctx = NewAlterStatementSuffixDropPartitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, HiveParserRULE_alterStatementSuffixDropPartitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1377)
		p.Match(HiveParserKW_DROP)
	}
	p.SetState(1379)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1378)
			p.IfExists()
		}

	}
	{
		p.SetState(1381)
		p.DropPartitionSpec()
	}
	p.SetState(1386)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1382)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1383)
			p.DropPartitionSpec()
		}

		p.SetState(1388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1390)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PURGE {
		{
			p.SetState(1389)
			p.Match(HiveParserKW_PURGE)
		}

	}
	p.SetState(1393)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_FOR {
		{
			p.SetState(1392)
			p.ReplicationClause()
		}

	}

	return localctx
}

// IAlterStatementSuffixPropertiesContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixPropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixPropertiesContext differentiates from other interfaces.
	IsAlterStatementSuffixPropertiesContext()
}

type AlterStatementSuffixPropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixPropertiesContext() *AlterStatementSuffixPropertiesContext {
	var p = new(AlterStatementSuffixPropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixProperties
	return p
}

func (*AlterStatementSuffixPropertiesContext) IsAlterStatementSuffixPropertiesContext() {}

func NewAlterStatementSuffixPropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixPropertiesContext {
	var p = new(AlterStatementSuffixPropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixProperties

	return p
}

func (s *AlterStatementSuffixPropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixPropertiesContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixPropertiesContext) KW_TBLPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TBLPROPERTIES, 0)
}

func (s *AlterStatementSuffixPropertiesContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterStatementSuffixPropertiesContext) KW_UNSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNSET, 0)
}

func (s *AlterStatementSuffixPropertiesContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *AlterStatementSuffixPropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixPropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixPropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixProperties(s)
	}
}

func (s *AlterStatementSuffixPropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixProperties(s)
	}
}

func (p *HiveParser) AlterStatementSuffixProperties() (localctx IAlterStatementSuffixPropertiesContext) {
	localctx = NewAlterStatementSuffixPropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, HiveParserRULE_alterStatementSuffixProperties)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1404)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_SET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1395)
			p.Match(HiveParserKW_SET)
		}
		{
			p.SetState(1396)
			p.Match(HiveParserKW_TBLPROPERTIES)
		}
		{
			p.SetState(1397)
			p.TableProperties()
		}

	case HiveParserKW_UNSET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1398)
			p.Match(HiveParserKW_UNSET)
		}
		{
			p.SetState(1399)
			p.Match(HiveParserKW_TBLPROPERTIES)
		}
		p.SetState(1401)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_IF {
			{
				p.SetState(1400)
				p.IfExists()
			}

		}
		{
			p.SetState(1403)
			p.TableProperties()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterViewSuffixPropertiesContext is an interface to support dynamic dispatch.
type IAlterViewSuffixPropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterViewSuffixPropertiesContext differentiates from other interfaces.
	IsAlterViewSuffixPropertiesContext()
}

type AlterViewSuffixPropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterViewSuffixPropertiesContext() *AlterViewSuffixPropertiesContext {
	var p = new(AlterViewSuffixPropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterViewSuffixProperties
	return p
}

func (*AlterViewSuffixPropertiesContext) IsAlterViewSuffixPropertiesContext() {}

func NewAlterViewSuffixPropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterViewSuffixPropertiesContext {
	var p = new(AlterViewSuffixPropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterViewSuffixProperties

	return p
}

func (s *AlterViewSuffixPropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterViewSuffixPropertiesContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterViewSuffixPropertiesContext) KW_TBLPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TBLPROPERTIES, 0)
}

func (s *AlterViewSuffixPropertiesContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterViewSuffixPropertiesContext) KW_UNSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNSET, 0)
}

func (s *AlterViewSuffixPropertiesContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *AlterViewSuffixPropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterViewSuffixPropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterViewSuffixPropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterViewSuffixProperties(s)
	}
}

func (s *AlterViewSuffixPropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterViewSuffixProperties(s)
	}
}

func (p *HiveParser) AlterViewSuffixProperties() (localctx IAlterViewSuffixPropertiesContext) {
	localctx = NewAlterViewSuffixPropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, HiveParserRULE_alterViewSuffixProperties)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1415)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_SET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1406)
			p.Match(HiveParserKW_SET)
		}
		{
			p.SetState(1407)
			p.Match(HiveParserKW_TBLPROPERTIES)
		}
		{
			p.SetState(1408)
			p.TableProperties()
		}

	case HiveParserKW_UNSET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1409)
			p.Match(HiveParserKW_UNSET)
		}
		{
			p.SetState(1410)
			p.Match(HiveParserKW_TBLPROPERTIES)
		}
		p.SetState(1412)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_IF {
			{
				p.SetState(1411)
				p.IfExists()
			}

		}
		{
			p.SetState(1414)
			p.TableProperties()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterMaterializedViewSuffixRewriteContext is an interface to support dynamic dispatch.
type IAlterMaterializedViewSuffixRewriteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterMaterializedViewSuffixRewriteContext differentiates from other interfaces.
	IsAlterMaterializedViewSuffixRewriteContext()
}

type AlterMaterializedViewSuffixRewriteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterMaterializedViewSuffixRewriteContext() *AlterMaterializedViewSuffixRewriteContext {
	var p = new(AlterMaterializedViewSuffixRewriteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterMaterializedViewSuffixRewrite
	return p
}

func (*AlterMaterializedViewSuffixRewriteContext) IsAlterMaterializedViewSuffixRewriteContext() {}

func NewAlterMaterializedViewSuffixRewriteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterMaterializedViewSuffixRewriteContext {
	var p = new(AlterMaterializedViewSuffixRewriteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterMaterializedViewSuffixRewrite

	return p
}

func (s *AlterMaterializedViewSuffixRewriteContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterMaterializedViewSuffixRewriteContext) RewriteEnabled() IRewriteEnabledContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRewriteEnabledContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRewriteEnabledContext)
}

func (s *AlterMaterializedViewSuffixRewriteContext) RewriteDisabled() IRewriteDisabledContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRewriteDisabledContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRewriteDisabledContext)
}

func (s *AlterMaterializedViewSuffixRewriteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterMaterializedViewSuffixRewriteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterMaterializedViewSuffixRewriteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterMaterializedViewSuffixRewrite(s)
	}
}

func (s *AlterMaterializedViewSuffixRewriteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterMaterializedViewSuffixRewrite(s)
	}
}

func (p *HiveParser) AlterMaterializedViewSuffixRewrite() (localctx IAlterMaterializedViewSuffixRewriteContext) {
	localctx = NewAlterMaterializedViewSuffixRewriteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, HiveParserRULE_alterMaterializedViewSuffixRewrite)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1419)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ENABLE:
		{
			p.SetState(1417)
			p.RewriteEnabled()
		}

	case HiveParserKW_DISABLE:
		{
			p.SetState(1418)
			p.RewriteDisabled()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterMaterializedViewSuffixRebuildContext is an interface to support dynamic dispatch.
type IAlterMaterializedViewSuffixRebuildContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterMaterializedViewSuffixRebuildContext differentiates from other interfaces.
	IsAlterMaterializedViewSuffixRebuildContext()
}

type AlterMaterializedViewSuffixRebuildContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterMaterializedViewSuffixRebuildContext() *AlterMaterializedViewSuffixRebuildContext {
	var p = new(AlterMaterializedViewSuffixRebuildContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterMaterializedViewSuffixRebuild
	return p
}

func (*AlterMaterializedViewSuffixRebuildContext) IsAlterMaterializedViewSuffixRebuildContext() {}

func NewAlterMaterializedViewSuffixRebuildContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterMaterializedViewSuffixRebuildContext {
	var p = new(AlterMaterializedViewSuffixRebuildContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterMaterializedViewSuffixRebuild

	return p
}

func (s *AlterMaterializedViewSuffixRebuildContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterMaterializedViewSuffixRebuildContext) KW_REBUILD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REBUILD, 0)
}

func (s *AlterMaterializedViewSuffixRebuildContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterMaterializedViewSuffixRebuildContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterMaterializedViewSuffixRebuildContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterMaterializedViewSuffixRebuild(s)
	}
}

func (s *AlterMaterializedViewSuffixRebuildContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterMaterializedViewSuffixRebuild(s)
	}
}

func (p *HiveParser) AlterMaterializedViewSuffixRebuild() (localctx IAlterMaterializedViewSuffixRebuildContext) {
	localctx = NewAlterMaterializedViewSuffixRebuildContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, HiveParserRULE_alterMaterializedViewSuffixRebuild)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1421)
		p.Match(HiveParserKW_REBUILD)
	}

	return localctx
}

// IAlterStatementSuffixSerdePropertiesContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixSerdePropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixSerdePropertiesContext differentiates from other interfaces.
	IsAlterStatementSuffixSerdePropertiesContext()
}

type AlterStatementSuffixSerdePropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixSerdePropertiesContext() *AlterStatementSuffixSerdePropertiesContext {
	var p = new(AlterStatementSuffixSerdePropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixSerdeProperties
	return p
}

func (*AlterStatementSuffixSerdePropertiesContext) IsAlterStatementSuffixSerdePropertiesContext() {}

func NewAlterStatementSuffixSerdePropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixSerdePropertiesContext {
	var p = new(AlterStatementSuffixSerdePropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixSerdeProperties

	return p
}

func (s *AlterStatementSuffixSerdePropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixSerdePropertiesContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixSerdePropertiesContext) KW_SERDE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDE, 0)
}

func (s *AlterStatementSuffixSerdePropertiesContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterStatementSuffixSerdePropertiesContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *AlterStatementSuffixSerdePropertiesContext) KW_SERDEPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDEPROPERTIES, 0)
}

func (s *AlterStatementSuffixSerdePropertiesContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterStatementSuffixSerdePropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixSerdePropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixSerdePropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixSerdeProperties(s)
	}
}

func (s *AlterStatementSuffixSerdePropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixSerdeProperties(s)
	}
}

func (p *HiveParser) AlterStatementSuffixSerdeProperties() (localctx IAlterStatementSuffixSerdePropertiesContext) {
	localctx = NewAlterStatementSuffixSerdePropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, HiveParserRULE_alterStatementSuffixSerdeProperties)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1434)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1423)
			p.Match(HiveParserKW_SET)
		}
		{
			p.SetState(1424)
			p.Match(HiveParserKW_SERDE)
		}
		{
			p.SetState(1425)
			p.Match(HiveParserStringLiteral)
		}
		p.SetState(1429)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WITH {
			{
				p.SetState(1426)
				p.Match(HiveParserKW_WITH)
			}
			{
				p.SetState(1427)
				p.Match(HiveParserKW_SERDEPROPERTIES)
			}
			{
				p.SetState(1428)
				p.TableProperties()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1431)
			p.Match(HiveParserKW_SET)
		}
		{
			p.SetState(1432)
			p.Match(HiveParserKW_SERDEPROPERTIES)
		}
		{
			p.SetState(1433)
			p.TableProperties()
		}

	}

	return localctx
}

// ITablePartitionPrefixContext is an interface to support dynamic dispatch.
type ITablePartitionPrefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablePartitionPrefixContext differentiates from other interfaces.
	IsTablePartitionPrefixContext()
}

type TablePartitionPrefixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablePartitionPrefixContext() *TablePartitionPrefixContext {
	var p = new(TablePartitionPrefixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tablePartitionPrefix
	return p
}

func (*TablePartitionPrefixContext) IsTablePartitionPrefixContext() {}

func NewTablePartitionPrefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePartitionPrefixContext {
	var p = new(TablePartitionPrefixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tablePartitionPrefix

	return p
}

func (s *TablePartitionPrefixContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePartitionPrefixContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TablePartitionPrefixContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *TablePartitionPrefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePartitionPrefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePartitionPrefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTablePartitionPrefix(s)
	}
}

func (s *TablePartitionPrefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTablePartitionPrefix(s)
	}
}

func (p *HiveParser) TablePartitionPrefix() (localctx ITablePartitionPrefixContext) {
	localctx = NewTablePartitionPrefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, HiveParserRULE_tablePartitionPrefix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1436)
		p.TableName()
	}
	p.SetState(1438)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITION {
		{
			p.SetState(1437)
			p.PartitionSpec()
		}

	}

	return localctx
}

// IAlterStatementSuffixFileFormatContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixFileFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixFileFormatContext differentiates from other interfaces.
	IsAlterStatementSuffixFileFormatContext()
}

type AlterStatementSuffixFileFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixFileFormatContext() *AlterStatementSuffixFileFormatContext {
	var p = new(AlterStatementSuffixFileFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixFileFormat
	return p
}

func (*AlterStatementSuffixFileFormatContext) IsAlterStatementSuffixFileFormatContext() {}

func NewAlterStatementSuffixFileFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixFileFormatContext {
	var p = new(AlterStatementSuffixFileFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixFileFormat

	return p
}

func (s *AlterStatementSuffixFileFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixFileFormatContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixFileFormatContext) KW_FILEFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FILEFORMAT, 0)
}

func (s *AlterStatementSuffixFileFormatContext) FileFormat() IFileFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileFormatContext)
}

func (s *AlterStatementSuffixFileFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixFileFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixFileFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixFileFormat(s)
	}
}

func (s *AlterStatementSuffixFileFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixFileFormat(s)
	}
}

func (p *HiveParser) AlterStatementSuffixFileFormat() (localctx IAlterStatementSuffixFileFormatContext) {
	localctx = NewAlterStatementSuffixFileFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, HiveParserRULE_alterStatementSuffixFileFormat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1440)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1441)
		p.Match(HiveParserKW_FILEFORMAT)
	}
	{
		p.SetState(1442)
		p.FileFormat()
	}

	return localctx
}

// IAlterStatementSuffixClusterbySortbyContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixClusterbySortbyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixClusterbySortbyContext differentiates from other interfaces.
	IsAlterStatementSuffixClusterbySortbyContext()
}

type AlterStatementSuffixClusterbySortbyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixClusterbySortbyContext() *AlterStatementSuffixClusterbySortbyContext {
	var p = new(AlterStatementSuffixClusterbySortbyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixClusterbySortby
	return p
}

func (*AlterStatementSuffixClusterbySortbyContext) IsAlterStatementSuffixClusterbySortbyContext() {}

func NewAlterStatementSuffixClusterbySortbyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixClusterbySortbyContext {
	var p = new(AlterStatementSuffixClusterbySortbyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixClusterbySortby

	return p
}

func (s *AlterStatementSuffixClusterbySortbyContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixClusterbySortbyContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *AlterStatementSuffixClusterbySortbyContext) KW_CLUSTERED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CLUSTERED, 0)
}

func (s *AlterStatementSuffixClusterbySortbyContext) KW_SORTED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SORTED, 0)
}

func (s *AlterStatementSuffixClusterbySortbyContext) TableBuckets() ITableBucketsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableBucketsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableBucketsContext)
}

func (s *AlterStatementSuffixClusterbySortbyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixClusterbySortbyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixClusterbySortbyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixClusterbySortby(s)
	}
}

func (s *AlterStatementSuffixClusterbySortbyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixClusterbySortby(s)
	}
}

func (p *HiveParser) AlterStatementSuffixClusterbySortby() (localctx IAlterStatementSuffixClusterbySortbyContext) {
	localctx = NewAlterStatementSuffixClusterbySortbyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, HiveParserRULE_alterStatementSuffixClusterbySortby)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1449)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1444)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(1445)
			p.Match(HiveParserKW_CLUSTERED)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1446)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(1447)
			p.Match(HiveParserKW_SORTED)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1448)
			p.TableBuckets()
		}

	}

	return localctx
}

// IAlterTblPartitionStatementSuffixSkewedLocationContext is an interface to support dynamic dispatch.
type IAlterTblPartitionStatementSuffixSkewedLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTblPartitionStatementSuffixSkewedLocationContext differentiates from other interfaces.
	IsAlterTblPartitionStatementSuffixSkewedLocationContext()
}

type AlterTblPartitionStatementSuffixSkewedLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTblPartitionStatementSuffixSkewedLocationContext() *AlterTblPartitionStatementSuffixSkewedLocationContext {
	var p = new(AlterTblPartitionStatementSuffixSkewedLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterTblPartitionStatementSuffixSkewedLocation
	return p
}

func (*AlterTblPartitionStatementSuffixSkewedLocationContext) IsAlterTblPartitionStatementSuffixSkewedLocationContext() {
}

func NewAlterTblPartitionStatementSuffixSkewedLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTblPartitionStatementSuffixSkewedLocationContext {
	var p = new(AlterTblPartitionStatementSuffixSkewedLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterTblPartitionStatementSuffixSkewedLocation

	return p
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) KW_SKEWED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SKEWED, 0)
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) SkewedLocations() ISkewedLocationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedLocationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedLocationsContext)
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterTblPartitionStatementSuffixSkewedLocation(s)
	}
}

func (s *AlterTblPartitionStatementSuffixSkewedLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterTblPartitionStatementSuffixSkewedLocation(s)
	}
}

func (p *HiveParser) AlterTblPartitionStatementSuffixSkewedLocation() (localctx IAlterTblPartitionStatementSuffixSkewedLocationContext) {
	localctx = NewAlterTblPartitionStatementSuffixSkewedLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, HiveParserRULE_alterTblPartitionStatementSuffixSkewedLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1451)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1452)
		p.Match(HiveParserKW_SKEWED)
	}
	{
		p.SetState(1453)
		p.Match(HiveParserKW_LOCATION)
	}
	{
		p.SetState(1454)
		p.SkewedLocations()
	}

	return localctx
}

// ISkewedLocationsContext is an interface to support dynamic dispatch.
type ISkewedLocationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedLocationsContext differentiates from other interfaces.
	IsSkewedLocationsContext()
}

type SkewedLocationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedLocationsContext() *SkewedLocationsContext {
	var p = new(SkewedLocationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedLocations
	return p
}

func (*SkewedLocationsContext) IsSkewedLocationsContext() {}

func NewSkewedLocationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedLocationsContext {
	var p = new(SkewedLocationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedLocations

	return p
}

func (s *SkewedLocationsContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedLocationsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *SkewedLocationsContext) SkewedLocationsList() ISkewedLocationsListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedLocationsListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedLocationsListContext)
}

func (s *SkewedLocationsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *SkewedLocationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedLocationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedLocationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedLocations(s)
	}
}

func (s *SkewedLocationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedLocations(s)
	}
}

func (p *HiveParser) SkewedLocations() (localctx ISkewedLocationsContext) {
	localctx = NewSkewedLocationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, HiveParserRULE_skewedLocations)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1456)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(1457)
		p.SkewedLocationsList()
	}
	{
		p.SetState(1458)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ISkewedLocationsListContext is an interface to support dynamic dispatch.
type ISkewedLocationsListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedLocationsListContext differentiates from other interfaces.
	IsSkewedLocationsListContext()
}

type SkewedLocationsListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedLocationsListContext() *SkewedLocationsListContext {
	var p = new(SkewedLocationsListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedLocationsList
	return p
}

func (*SkewedLocationsListContext) IsSkewedLocationsListContext() {}

func NewSkewedLocationsListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedLocationsListContext {
	var p = new(SkewedLocationsListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedLocationsList

	return p
}

func (s *SkewedLocationsListContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedLocationsListContext) AllSkewedLocationMap() []ISkewedLocationMapContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISkewedLocationMapContext)(nil)).Elem())
	var tst = make([]ISkewedLocationMapContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISkewedLocationMapContext)
		}
	}

	return tst
}

func (s *SkewedLocationsListContext) SkewedLocationMap(i int) ISkewedLocationMapContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedLocationMapContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISkewedLocationMapContext)
}

func (s *SkewedLocationsListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SkewedLocationsListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SkewedLocationsListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedLocationsListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedLocationsListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedLocationsList(s)
	}
}

func (s *SkewedLocationsListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedLocationsList(s)
	}
}

func (p *HiveParser) SkewedLocationsList() (localctx ISkewedLocationsListContext) {
	localctx = NewSkewedLocationsListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, HiveParserRULE_skewedLocationsList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1460)
		p.SkewedLocationMap()
	}
	p.SetState(1465)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1461)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1462)
			p.SkewedLocationMap()
		}

		p.SetState(1467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISkewedLocationMapContext is an interface to support dynamic dispatch.
type ISkewedLocationMapContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedLocationMapContext differentiates from other interfaces.
	IsSkewedLocationMapContext()
}

type SkewedLocationMapContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedLocationMapContext() *SkewedLocationMapContext {
	var p = new(SkewedLocationMapContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedLocationMap
	return p
}

func (*SkewedLocationMapContext) IsSkewedLocationMapContext() {}

func NewSkewedLocationMapContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedLocationMapContext {
	var p = new(SkewedLocationMapContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedLocationMap

	return p
}

func (s *SkewedLocationMapContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedLocationMapContext) SkewedValueLocationElement() ISkewedValueLocationElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedValueLocationElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedValueLocationElementContext)
}

func (s *SkewedLocationMapContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *SkewedLocationMapContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *SkewedLocationMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedLocationMapContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedLocationMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedLocationMap(s)
	}
}

func (s *SkewedLocationMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedLocationMap(s)
	}
}

func (p *HiveParser) SkewedLocationMap() (localctx ISkewedLocationMapContext) {
	localctx = NewSkewedLocationMapContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, HiveParserRULE_skewedLocationMap)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1468)
		p.SkewedValueLocationElement()
	}
	{
		p.SetState(1469)
		p.Match(HiveParserEQUAL)
	}
	{
		p.SetState(1470)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IAlterStatementSuffixLocationContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixLocationContext differentiates from other interfaces.
	IsAlterStatementSuffixLocationContext()
}

type AlterStatementSuffixLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixLocationContext() *AlterStatementSuffixLocationContext {
	var p = new(AlterStatementSuffixLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixLocation
	return p
}

func (*AlterStatementSuffixLocationContext) IsAlterStatementSuffixLocationContext() {}

func NewAlterStatementSuffixLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixLocationContext {
	var p = new(AlterStatementSuffixLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixLocation

	return p
}

func (s *AlterStatementSuffixLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixLocationContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixLocationContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *AlterStatementSuffixLocationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterStatementSuffixLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixLocation(s)
	}
}

func (s *AlterStatementSuffixLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixLocation(s)
	}
}

func (p *HiveParser) AlterStatementSuffixLocation() (localctx IAlterStatementSuffixLocationContext) {
	localctx = NewAlterStatementSuffixLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, HiveParserRULE_alterStatementSuffixLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1472)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1473)
		p.Match(HiveParserKW_LOCATION)
	}
	{
		p.SetState(1474)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IAlterStatementSuffixSkewedbyContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixSkewedbyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixSkewedbyContext differentiates from other interfaces.
	IsAlterStatementSuffixSkewedbyContext()
}

type AlterStatementSuffixSkewedbyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixSkewedbyContext() *AlterStatementSuffixSkewedbyContext {
	var p = new(AlterStatementSuffixSkewedbyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixSkewedby
	return p
}

func (*AlterStatementSuffixSkewedbyContext) IsAlterStatementSuffixSkewedbyContext() {}

func NewAlterStatementSuffixSkewedbyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixSkewedbyContext {
	var p = new(AlterStatementSuffixSkewedbyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixSkewedby

	return p
}

func (s *AlterStatementSuffixSkewedbyContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixSkewedbyContext) TableSkewed() ITableSkewedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSkewedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSkewedContext)
}

func (s *AlterStatementSuffixSkewedbyContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *AlterStatementSuffixSkewedbyContext) KW_SKEWED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SKEWED, 0)
}

func (s *AlterStatementSuffixSkewedbyContext) StoredAsDirs() IStoredAsDirsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStoredAsDirsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStoredAsDirsContext)
}

func (s *AlterStatementSuffixSkewedbyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixSkewedbyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixSkewedbyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixSkewedby(s)
	}
}

func (s *AlterStatementSuffixSkewedbyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixSkewedby(s)
	}
}

func (p *HiveParser) AlterStatementSuffixSkewedby() (localctx IAlterStatementSuffixSkewedbyContext) {
	localctx = NewAlterStatementSuffixSkewedbyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, HiveParserRULE_alterStatementSuffixSkewedby)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1481)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1476)
			p.TableSkewed()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1477)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(1478)
			p.Match(HiveParserKW_SKEWED)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1479)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(1480)
			p.StoredAsDirs()
		}

	}

	return localctx
}

// IAlterStatementSuffixExchangePartitionContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixExchangePartitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixExchangePartitionContext differentiates from other interfaces.
	IsAlterStatementSuffixExchangePartitionContext()
}

type AlterStatementSuffixExchangePartitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixExchangePartitionContext() *AlterStatementSuffixExchangePartitionContext {
	var p = new(AlterStatementSuffixExchangePartitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixExchangePartition
	return p
}

func (*AlterStatementSuffixExchangePartitionContext) IsAlterStatementSuffixExchangePartitionContext() {
}

func NewAlterStatementSuffixExchangePartitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixExchangePartitionContext {
	var p = new(AlterStatementSuffixExchangePartitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixExchangePartition

	return p
}

func (s *AlterStatementSuffixExchangePartitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixExchangePartitionContext) KW_EXCHANGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXCHANGE, 0)
}

func (s *AlterStatementSuffixExchangePartitionContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterStatementSuffixExchangePartitionContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *AlterStatementSuffixExchangePartitionContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *AlterStatementSuffixExchangePartitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterStatementSuffixExchangePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixExchangePartitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixExchangePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixExchangePartition(s)
	}
}

func (s *AlterStatementSuffixExchangePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixExchangePartition(s)
	}
}

func (p *HiveParser) AlterStatementSuffixExchangePartition() (localctx IAlterStatementSuffixExchangePartitionContext) {
	localctx = NewAlterStatementSuffixExchangePartitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, HiveParserRULE_alterStatementSuffixExchangePartition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1483)
		p.Match(HiveParserKW_EXCHANGE)
	}
	{
		p.SetState(1484)
		p.PartitionSpec()
	}
	{
		p.SetState(1485)
		p.Match(HiveParserKW_WITH)
	}
	{
		p.SetState(1486)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(1487)
		p.TableName()
	}

	return localctx
}

// IAlterStatementSuffixRenamePartContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixRenamePartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixRenamePartContext differentiates from other interfaces.
	IsAlterStatementSuffixRenamePartContext()
}

type AlterStatementSuffixRenamePartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixRenamePartContext() *AlterStatementSuffixRenamePartContext {
	var p = new(AlterStatementSuffixRenamePartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixRenamePart
	return p
}

func (*AlterStatementSuffixRenamePartContext) IsAlterStatementSuffixRenamePartContext() {}

func NewAlterStatementSuffixRenamePartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixRenamePartContext {
	var p = new(AlterStatementSuffixRenamePartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixRenamePart

	return p
}

func (s *AlterStatementSuffixRenamePartContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixRenamePartContext) KW_RENAME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RENAME, 0)
}

func (s *AlterStatementSuffixRenamePartContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *AlterStatementSuffixRenamePartContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *AlterStatementSuffixRenamePartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixRenamePartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixRenamePartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixRenamePart(s)
	}
}

func (s *AlterStatementSuffixRenamePartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixRenamePart(s)
	}
}

func (p *HiveParser) AlterStatementSuffixRenamePart() (localctx IAlterStatementSuffixRenamePartContext) {
	localctx = NewAlterStatementSuffixRenamePartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, HiveParserRULE_alterStatementSuffixRenamePart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1489)
		p.Match(HiveParserKW_RENAME)
	}
	{
		p.SetState(1490)
		p.Match(HiveParserKW_TO)
	}
	{
		p.SetState(1491)
		p.PartitionSpec()
	}

	return localctx
}

// IAlterStatementSuffixStatsPartContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixStatsPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixStatsPartContext differentiates from other interfaces.
	IsAlterStatementSuffixStatsPartContext()
}

type AlterStatementSuffixStatsPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixStatsPartContext() *AlterStatementSuffixStatsPartContext {
	var p = new(AlterStatementSuffixStatsPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixStatsPart
	return p
}

func (*AlterStatementSuffixStatsPartContext) IsAlterStatementSuffixStatsPartContext() {}

func NewAlterStatementSuffixStatsPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixStatsPartContext {
	var p = new(AlterStatementSuffixStatsPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixStatsPart

	return p
}

func (s *AlterStatementSuffixStatsPartContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixStatsPartContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *AlterStatementSuffixStatsPartContext) KW_STATISTICS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATISTICS, 0)
}

func (s *AlterStatementSuffixStatsPartContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOR, 0)
}

func (s *AlterStatementSuffixStatsPartContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterStatementSuffixStatsPartContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixStatsPartContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterStatementSuffixStatsPartContext) KW_COLUMN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMN, 0)
}

func (s *AlterStatementSuffixStatsPartContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *AlterStatementSuffixStatsPartContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterStatementSuffixStatsPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixStatsPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixStatsPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixStatsPart(s)
	}
}

func (s *AlterStatementSuffixStatsPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixStatsPart(s)
	}
}

func (p *HiveParser) AlterStatementSuffixStatsPart() (localctx IAlterStatementSuffixStatsPartContext) {
	localctx = NewAlterStatementSuffixStatsPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, HiveParserRULE_alterStatementSuffixStatsPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1493)
		p.Match(HiveParserKW_UPDATE)
	}
	{
		p.SetState(1494)
		p.Match(HiveParserKW_STATISTICS)
	}
	{
		p.SetState(1495)
		p.Match(HiveParserKW_FOR)
	}
	p.SetState(1497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COLUMN {
		{
			p.SetState(1496)
			p.Match(HiveParserKW_COLUMN)
		}

	}
	{
		p.SetState(1499)
		p.Identifier()
	}
	{
		p.SetState(1500)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1501)
		p.TableProperties()
	}
	p.SetState(1504)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(1502)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(1503)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// IAlterStatementSuffixMergeFilesContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixMergeFilesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixMergeFilesContext differentiates from other interfaces.
	IsAlterStatementSuffixMergeFilesContext()
}

type AlterStatementSuffixMergeFilesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixMergeFilesContext() *AlterStatementSuffixMergeFilesContext {
	var p = new(AlterStatementSuffixMergeFilesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixMergeFiles
	return p
}

func (*AlterStatementSuffixMergeFilesContext) IsAlterStatementSuffixMergeFilesContext() {}

func NewAlterStatementSuffixMergeFilesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixMergeFilesContext {
	var p = new(AlterStatementSuffixMergeFilesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixMergeFiles

	return p
}

func (s *AlterStatementSuffixMergeFilesContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixMergeFilesContext) KW_CONCATENATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONCATENATE, 0)
}

func (s *AlterStatementSuffixMergeFilesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixMergeFilesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixMergeFilesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixMergeFiles(s)
	}
}

func (s *AlterStatementSuffixMergeFilesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixMergeFiles(s)
	}
}

func (p *HiveParser) AlterStatementSuffixMergeFiles() (localctx IAlterStatementSuffixMergeFilesContext) {
	localctx = NewAlterStatementSuffixMergeFilesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, HiveParserRULE_alterStatementSuffixMergeFiles)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1506)
		p.Match(HiveParserKW_CONCATENATE)
	}

	return localctx
}

// IAlterStatementSuffixBucketNumContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixBucketNumContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixBucketNumContext differentiates from other interfaces.
	IsAlterStatementSuffixBucketNumContext()
}

type AlterStatementSuffixBucketNumContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixBucketNumContext() *AlterStatementSuffixBucketNumContext {
	var p = new(AlterStatementSuffixBucketNumContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixBucketNum
	return p
}

func (*AlterStatementSuffixBucketNumContext) IsAlterStatementSuffixBucketNumContext() {}

func NewAlterStatementSuffixBucketNumContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixBucketNumContext {
	var p = new(AlterStatementSuffixBucketNumContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixBucketNum

	return p
}

func (s *AlterStatementSuffixBucketNumContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixBucketNumContext) KW_INTO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTO, 0)
}

func (s *AlterStatementSuffixBucketNumContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *AlterStatementSuffixBucketNumContext) KW_BUCKETS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BUCKETS, 0)
}

func (s *AlterStatementSuffixBucketNumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixBucketNumContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixBucketNumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixBucketNum(s)
	}
}

func (s *AlterStatementSuffixBucketNumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixBucketNum(s)
	}
}

func (p *HiveParser) AlterStatementSuffixBucketNum() (localctx IAlterStatementSuffixBucketNumContext) {
	localctx = NewAlterStatementSuffixBucketNumContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, HiveParserRULE_alterStatementSuffixBucketNum)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1508)
		p.Match(HiveParserKW_INTO)
	}
	{
		p.SetState(1509)
		p.Match(HiveParserNumber)
	}
	{
		p.SetState(1510)
		p.Match(HiveParserKW_BUCKETS)
	}

	return localctx
}

// IBlockingContext is an interface to support dynamic dispatch.
type IBlockingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockingContext differentiates from other interfaces.
	IsBlockingContext()
}

type BlockingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockingContext() *BlockingContext {
	var p = new(BlockingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_blocking
	return p
}

func (*BlockingContext) IsBlockingContext() {}

func NewBlockingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockingContext {
	var p = new(BlockingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_blocking

	return p
}

func (s *BlockingContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockingContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *BlockingContext) KW_WAIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WAIT, 0)
}

func (s *BlockingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterBlocking(s)
	}
}

func (s *BlockingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitBlocking(s)
	}
}

func (p *HiveParser) Blocking() (localctx IBlockingContext) {
	localctx = NewBlockingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, HiveParserRULE_blocking)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1512)
		p.Match(HiveParserKW_AND)
	}
	{
		p.SetState(1513)
		p.Match(HiveParserKW_WAIT)
	}

	return localctx
}

// IAlterStatementSuffixCompactContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixCompactContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixCompactContext differentiates from other interfaces.
	IsAlterStatementSuffixCompactContext()
}

type AlterStatementSuffixCompactContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixCompactContext() *AlterStatementSuffixCompactContext {
	var p = new(AlterStatementSuffixCompactContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixCompact
	return p
}

func (*AlterStatementSuffixCompactContext) IsAlterStatementSuffixCompactContext() {}

func NewAlterStatementSuffixCompactContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixCompactContext {
	var p = new(AlterStatementSuffixCompactContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixCompact

	return p
}

func (s *AlterStatementSuffixCompactContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixCompactContext) KW_COMPACT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMPACT, 0)
}

func (s *AlterStatementSuffixCompactContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterStatementSuffixCompactContext) Blocking() IBlockingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockingContext)
}

func (s *AlterStatementSuffixCompactContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *AlterStatementSuffixCompactContext) KW_OVERWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OVERWRITE, 0)
}

func (s *AlterStatementSuffixCompactContext) KW_TBLPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TBLPROPERTIES, 0)
}

func (s *AlterStatementSuffixCompactContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *AlterStatementSuffixCompactContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixCompactContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixCompactContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixCompact(s)
	}
}

func (s *AlterStatementSuffixCompactContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixCompact(s)
	}
}

func (p *HiveParser) AlterStatementSuffixCompact() (localctx IAlterStatementSuffixCompactContext) {
	localctx = NewAlterStatementSuffixCompactContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, HiveParserRULE_alterStatementSuffixCompact)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1515)
		p.Match(HiveParserKW_COMPACT)
	}
	{
		p.SetState(1516)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(1518)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_AND {
		{
			p.SetState(1517)
			p.Blocking()
		}

	}
	p.SetState(1524)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(1520)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(1521)
			p.Match(HiveParserKW_OVERWRITE)
		}
		{
			p.SetState(1522)
			p.Match(HiveParserKW_TBLPROPERTIES)
		}
		{
			p.SetState(1523)
			p.TableProperties()
		}

	}

	return localctx
}

// IAlterStatementSuffixSetOwnerContext is an interface to support dynamic dispatch.
type IAlterStatementSuffixSetOwnerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementSuffixSetOwnerContext differentiates from other interfaces.
	IsAlterStatementSuffixSetOwnerContext()
}

type AlterStatementSuffixSetOwnerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementSuffixSetOwnerContext() *AlterStatementSuffixSetOwnerContext {
	var p = new(AlterStatementSuffixSetOwnerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterStatementSuffixSetOwner
	return p
}

func (*AlterStatementSuffixSetOwnerContext) IsAlterStatementSuffixSetOwnerContext() {}

func NewAlterStatementSuffixSetOwnerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementSuffixSetOwnerContext {
	var p = new(AlterStatementSuffixSetOwnerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterStatementSuffixSetOwner

	return p
}

func (s *AlterStatementSuffixSetOwnerContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementSuffixSetOwnerContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterStatementSuffixSetOwnerContext) KW_OWNER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OWNER, 0)
}

func (s *AlterStatementSuffixSetOwnerContext) PrincipalName() IPrincipalNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalNameContext)
}

func (s *AlterStatementSuffixSetOwnerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementSuffixSetOwnerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementSuffixSetOwnerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterStatementSuffixSetOwner(s)
	}
}

func (s *AlterStatementSuffixSetOwnerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterStatementSuffixSetOwner(s)
	}
}

func (p *HiveParser) AlterStatementSuffixSetOwner() (localctx IAlterStatementSuffixSetOwnerContext) {
	localctx = NewAlterStatementSuffixSetOwnerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, HiveParserRULE_alterStatementSuffixSetOwner)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1526)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1527)
		p.Match(HiveParserKW_OWNER)
	}
	{
		p.SetState(1528)
		p.PrincipalName()
	}

	return localctx
}

// IFileFormatContext is an interface to support dynamic dispatch.
type IFileFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFileFormatContext differentiates from other interfaces.
	IsFileFormatContext()
}

type FileFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileFormatContext() *FileFormatContext {
	var p = new(FileFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_fileFormat
	return p
}

func (*FileFormatContext) IsFileFormatContext() {}

func NewFileFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileFormatContext {
	var p = new(FileFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_fileFormat

	return p
}

func (s *FileFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *FileFormatContext) KW_INPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTFORMAT, 0)
}

func (s *FileFormatContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *FileFormatContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *FileFormatContext) KW_OUTPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTPUTFORMAT, 0)
}

func (s *FileFormatContext) KW_SERDE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDE, 0)
}

func (s *FileFormatContext) KW_INPUTDRIVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTDRIVER, 0)
}

func (s *FileFormatContext) KW_OUTPUTDRIVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTPUTDRIVER, 0)
}

func (s *FileFormatContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FileFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFileFormat(s)
	}
}

func (s *FileFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFileFormat(s)
	}
}

func (p *HiveParser) FileFormat() (localctx IFileFormatContext) {
	localctx = NewFileFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, HiveParserRULE_fileFormat)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1543)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1530)
			p.Match(HiveParserKW_INPUTFORMAT)
		}
		{
			p.SetState(1531)
			p.Match(HiveParserStringLiteral)
		}
		{
			p.SetState(1532)
			p.Match(HiveParserKW_OUTPUTFORMAT)
		}
		{
			p.SetState(1533)
			p.Match(HiveParserStringLiteral)
		}
		{
			p.SetState(1534)
			p.Match(HiveParserKW_SERDE)
		}
		{
			p.SetState(1535)
			p.Match(HiveParserStringLiteral)
		}
		p.SetState(1540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_INPUTDRIVER {
			{
				p.SetState(1536)
				p.Match(HiveParserKW_INPUTDRIVER)
			}
			{
				p.SetState(1537)
				p.Match(HiveParserStringLiteral)
			}
			{
				p.SetState(1538)
				p.Match(HiveParserKW_OUTPUTDRIVER)
			}
			{
				p.SetState(1539)
				p.Match(HiveParserStringLiteral)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1542)
			p.Identifier()
		}

	}

	return localctx
}

// IInputFileFormatContext is an interface to support dynamic dispatch.
type IInputFileFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputFileFormatContext differentiates from other interfaces.
	IsInputFileFormatContext()
}

type InputFileFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputFileFormatContext() *InputFileFormatContext {
	var p = new(InputFileFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_inputFileFormat
	return p
}

func (*InputFileFormatContext) IsInputFileFormatContext() {}

func NewInputFileFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputFileFormatContext {
	var p = new(InputFileFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_inputFileFormat

	return p
}

func (s *InputFileFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *InputFileFormatContext) KW_INPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTFORMAT, 0)
}

func (s *InputFileFormatContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *InputFileFormatContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *InputFileFormatContext) KW_SERDE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDE, 0)
}

func (s *InputFileFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputFileFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputFileFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterInputFileFormat(s)
	}
}

func (s *InputFileFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitInputFileFormat(s)
	}
}

func (p *HiveParser) InputFileFormat() (localctx IInputFileFormatContext) {
	localctx = NewInputFileFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, HiveParserRULE_inputFileFormat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1545)
		p.Match(HiveParserKW_INPUTFORMAT)
	}
	{
		p.SetState(1546)
		p.Match(HiveParserStringLiteral)
	}
	{
		p.SetState(1547)
		p.Match(HiveParserKW_SERDE)
	}
	{
		p.SetState(1548)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITabTypeExprContext is an interface to support dynamic dispatch.
type ITabTypeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTabTypeExprContext differentiates from other interfaces.
	IsTabTypeExprContext()
}

type TabTypeExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTabTypeExprContext() *TabTypeExprContext {
	var p = new(TabTypeExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tabTypeExpr
	return p
}

func (*TabTypeExprContext) IsTabTypeExprContext() {}

func NewTabTypeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TabTypeExprContext {
	var p = new(TabTypeExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tabTypeExpr

	return p
}

func (s *TabTypeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TabTypeExprContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *TabTypeExprContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TabTypeExprContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(HiveParserDOT)
}

func (s *TabTypeExprContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, i)
}

func (s *TabTypeExprContext) AllKW_ELEM_TYPE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_ELEM_TYPE)
}

func (s *TabTypeExprContext) KW_ELEM_TYPE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ELEM_TYPE, i)
}

func (s *TabTypeExprContext) AllKW_KEY_TYPE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_KEY_TYPE)
}

func (s *TabTypeExprContext) KW_KEY_TYPE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY_TYPE, i)
}

func (s *TabTypeExprContext) AllKW_VALUE_TYPE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_VALUE_TYPE)
}

func (s *TabTypeExprContext) KW_VALUE_TYPE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALUE_TYPE, i)
}

func (s *TabTypeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TabTypeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TabTypeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTabTypeExpr(s)
	}
}

func (s *TabTypeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTabTypeExpr(s)
	}
}

func (p *HiveParser) TabTypeExpr() (localctx ITabTypeExprContext) {
	localctx = NewTabTypeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, HiveParserRULE_tabTypeExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1550)
		p.Identifier()
	}
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserDOT {
		{
			p.SetState(1551)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(1552)
			p.Identifier()
		}

	}
	p.SetState(1568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
		{
			p.SetState(1555)
			p.Identifier()
		}
		p.SetState(1565)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserDOT {
			{
				p.SetState(1556)
				p.Match(HiveParserDOT)
			}
			p.SetState(1561)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1557)
					p.Match(HiveParserKW_ELEM_TYPE)
				}

			case 2:
				{
					p.SetState(1558)
					p.Match(HiveParserKW_KEY_TYPE)
				}

			case 3:
				{
					p.SetState(1559)
					p.Match(HiveParserKW_VALUE_TYPE)
				}

			case 4:
				{
					p.SetState(1560)
					p.Identifier()
				}

			}

			p.SetState(1567)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IPartTypeExprContext is an interface to support dynamic dispatch.
type IPartTypeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartTypeExprContext differentiates from other interfaces.
	IsPartTypeExprContext()
}

type PartTypeExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartTypeExprContext() *PartTypeExprContext {
	var p = new(PartTypeExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partTypeExpr
	return p
}

func (*PartTypeExprContext) IsPartTypeExprContext() {}

func NewPartTypeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartTypeExprContext {
	var p = new(PartTypeExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partTypeExpr

	return p
}

func (s *PartTypeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *PartTypeExprContext) TabTypeExpr() ITabTypeExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITabTypeExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITabTypeExprContext)
}

func (s *PartTypeExprContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *PartTypeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartTypeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartTypeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartTypeExpr(s)
	}
}

func (s *PartTypeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartTypeExpr(s)
	}
}

func (p *HiveParser) PartTypeExpr() (localctx IPartTypeExprContext) {
	localctx = NewPartTypeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, HiveParserRULE_partTypeExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1570)
		p.TabTypeExpr()
	}
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITION {
		{
			p.SetState(1571)
			p.PartitionSpec()
		}

	}

	return localctx
}

// ITabPartColTypeExprContext is an interface to support dynamic dispatch.
type ITabPartColTypeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTabPartColTypeExprContext differentiates from other interfaces.
	IsTabPartColTypeExprContext()
}

type TabPartColTypeExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTabPartColTypeExprContext() *TabPartColTypeExprContext {
	var p = new(TabPartColTypeExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tabPartColTypeExpr
	return p
}

func (*TabPartColTypeExprContext) IsTabPartColTypeExprContext() {}

func NewTabPartColTypeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TabPartColTypeExprContext {
	var p = new(TabPartColTypeExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tabPartColTypeExpr

	return p
}

func (s *TabPartColTypeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TabPartColTypeExprContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TabPartColTypeExprContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *TabPartColTypeExprContext) ExtColumnName() IExtColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtColumnNameContext)
}

func (s *TabPartColTypeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TabPartColTypeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TabPartColTypeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTabPartColTypeExpr(s)
	}
}

func (s *TabPartColTypeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTabPartColTypeExpr(s)
	}
}

func (p *HiveParser) TabPartColTypeExpr() (localctx ITabPartColTypeExprContext) {
	localctx = NewTabPartColTypeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, HiveParserRULE_tabPartColTypeExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1574)
		p.TableName()
	}
	p.SetState(1576)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITION {
		{
			p.SetState(1575)
			p.PartitionSpec()
		}

	}
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
		{
			p.SetState(1578)
			p.ExtColumnName()
		}

	}

	return localctx
}

// IDescStatementContext is an interface to support dynamic dispatch.
type IDescStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescStatementContext differentiates from other interfaces.
	IsDescStatementContext()
}

type DescStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescStatementContext() *DescStatementContext {
	var p = new(DescStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_descStatement
	return p
}

func (*DescStatementContext) IsDescStatementContext() {}

func NewDescStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescStatementContext {
	var p = new(DescStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_descStatement

	return p
}

func (s *DescStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DescStatementContext) KW_DESCRIBE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DESCRIBE, 0)
}

func (s *DescStatementContext) KW_DESC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DESC, 0)
}

func (s *DescStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DescStatementContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FUNCTION, 0)
}

func (s *DescStatementContext) DescFuncNames() IDescFuncNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescFuncNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescFuncNamesContext)
}

func (s *DescStatementContext) TabPartColTypeExpr() ITabPartColTypeExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITabPartColTypeExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITabPartColTypeExprContext)
}

func (s *DescStatementContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *DescStatementContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *DescStatementContext) KW_EXTENDED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXTENDED, 0)
}

func (s *DescStatementContext) KW_FORMATTED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FORMATTED, 0)
}

func (s *DescStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDescStatement(s)
	}
}

func (s *DescStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDescStatement(s)
	}
}

func (p *HiveParser) DescStatement() (localctx IDescStatementContext) {
	localctx = NewDescStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, HiveParserRULE_descStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1581)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_DESC || _la == HiveParserKW_DESCRIBE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1595)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1582)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_EXTENDED {
			{
				p.SetState(1583)
				p.Match(HiveParserKW_EXTENDED)
			}

		}
		{
			p.SetState(1586)
			p.Identifier()
		}

	case 2:
		{
			p.SetState(1587)
			p.Match(HiveParserKW_FUNCTION)
		}
		p.SetState(1589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_EXTENDED {
			{
				p.SetState(1588)
				p.Match(HiveParserKW_EXTENDED)
			}

		}
		{
			p.SetState(1591)
			p.DescFuncNames()
		}

	case 3:
		{
			p.SetState(1592)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_EXTENDED || _la == HiveParserKW_FORMATTED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1593)
			p.TabPartColTypeExpr()
		}

	case 4:
		{
			p.SetState(1594)
			p.TabPartColTypeExpr()
		}

	}

	return localctx
}

// IAnalyzeStatementContext is an interface to support dynamic dispatch.
type IAnalyzeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyzeStatementContext differentiates from other interfaces.
	IsAnalyzeStatementContext()
}

type AnalyzeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyzeStatementContext() *AnalyzeStatementContext {
	var p = new(AnalyzeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_analyzeStatement
	return p
}

func (*AnalyzeStatementContext) IsAnalyzeStatementContext() {}

func NewAnalyzeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnalyzeStatementContext {
	var p = new(AnalyzeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_analyzeStatement

	return p
}

func (s *AnalyzeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AnalyzeStatementContext) KW_ANALYZE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ANALYZE, 0)
}

func (s *AnalyzeStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *AnalyzeStatementContext) TableOrPartition() ITableOrPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrPartitionContext)
}

func (s *AnalyzeStatementContext) KW_COMPUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMPUTE, 0)
}

func (s *AnalyzeStatementContext) KW_STATISTICS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATISTICS, 0)
}

func (s *AnalyzeStatementContext) KW_CACHE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CACHE, 0)
}

func (s *AnalyzeStatementContext) KW_METADATA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_METADATA, 0)
}

func (s *AnalyzeStatementContext) KW_NOSCAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOSCAN, 0)
}

func (s *AnalyzeStatementContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOR, 0)
}

func (s *AnalyzeStatementContext) KW_COLUMNS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMNS, 0)
}

func (s *AnalyzeStatementContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *AnalyzeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnalyzeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnalyzeStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAnalyzeStatement(s)
	}
}

func (s *AnalyzeStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAnalyzeStatement(s)
	}
}

func (p *HiveParser) AnalyzeStatement() (localctx IAnalyzeStatementContext) {
	localctx = NewAnalyzeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, HiveParserRULE_analyzeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1597)
		p.Match(HiveParserKW_ANALYZE)
	}
	{
		p.SetState(1598)
		p.Match(HiveParserKW_TABLE)
	}

	{
		p.SetState(1599)
		p.TableOrPartition()
	}

	p.SetState(1612)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_COMPUTE:
		{
			p.SetState(1600)
			p.Match(HiveParserKW_COMPUTE)
		}
		{
			p.SetState(1601)
			p.Match(HiveParserKW_STATISTICS)
		}
		p.SetState(1608)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_NOSCAN:
			{
				p.SetState(1602)
				p.Match(HiveParserKW_NOSCAN)
			}

		case HiveParserKW_FOR:
			{
				p.SetState(1603)
				p.Match(HiveParserKW_FOR)
			}
			{
				p.SetState(1604)
				p.Match(HiveParserKW_COLUMNS)
			}
			p.SetState(1606)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
				{
					p.SetState(1605)
					p.ColumnNameList()
				}

			}

		case HiveParserEOF:

		default:
		}

	case HiveParserKW_CACHE:
		{
			p.SetState(1610)
			p.Match(HiveParserKW_CACHE)
		}
		{
			p.SetState(1611)
			p.Match(HiveParserKW_METADATA)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowStatementContext is an interface to support dynamic dispatch.
type IShowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowStatementContext differentiates from other interfaces.
	IsShowStatementContext()
}

type ShowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowStatementContext() *ShowStatementContext {
	var p = new(ShowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showStatement
	return p
}

func (*ShowStatementContext) IsShowStatementContext() {}

func NewShowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowStatementContext {
	var p = new(ShowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showStatement

	return p
}

func (s *ShowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowStatementContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *ShowStatementContext) KW_DATABASES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASES, 0)
}

func (s *ShowStatementContext) KW_SCHEMAS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMAS, 0)
}

func (s *ShowStatementContext) KW_LIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIKE, 0)
}

func (s *ShowStatementContext) ShowStmtIdentifier() IShowStmtIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowStmtIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowStmtIdentifierContext)
}

func (s *ShowStatementContext) KW_TABLES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLES, 0)
}

func (s *ShowStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ShowStatementContext) AllKW_FROM() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_FROM)
}

func (s *ShowStatementContext) KW_FROM(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, i)
}

func (s *ShowStatementContext) AllKW_IN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_IN)
}

func (s *ShowStatementContext) KW_IN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IN, i)
}

func (s *ShowStatementContext) KW_VIEWS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEWS, 0)
}

func (s *ShowStatementContext) KW_MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATERIALIZED, 0)
}

func (s *ShowStatementContext) KW_COLUMNS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMNS, 0)
}

func (s *ShowStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ShowStatementContext) KW_FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FUNCTIONS, 0)
}

func (s *ShowStatementContext) ShowFunctionIdentifier() IShowFunctionIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFunctionIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFunctionIdentifierContext)
}

func (s *ShowStatementContext) KW_PARTITIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITIONS, 0)
}

func (s *ShowStatementContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *ShowStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *ShowStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *ShowStatementContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *ShowStatementContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *ShowStatementContext) KW_EXTENDED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXTENDED, 0)
}

func (s *ShowStatementContext) KW_TBLPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TBLPROPERTIES, 0)
}

func (s *ShowStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ShowStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ShowStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ShowStatementContext) KW_LOCKS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCKS, 0)
}

func (s *ShowStatementContext) PartTypeExpr() IPartTypeExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartTypeExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartTypeExprContext)
}

func (s *ShowStatementContext) KW_COMPACTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMPACTIONS, 0)
}

func (s *ShowStatementContext) KW_TRANSACTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRANSACTIONS, 0)
}

func (s *ShowStatementContext) KW_CONF() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONF, 0)
}

func (s *ShowStatementContext) KW_RESOURCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESOURCE, 0)
}

func (s *ShowStatementContext) KW_PLANS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLANS, 0)
}

func (s *ShowStatementContext) KW_PLAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLAN, 0)
}

func (s *ShowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowStatement(s)
	}
}

func (s *ShowStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowStatement(s)
	}
}

func (p *HiveParser) ShowStatement() (localctx IShowStatementContext) {
	localctx = NewShowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, HiveParserRULE_showStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1737)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1614)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1615)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_DATABASES || _la == HiveParserKW_SCHEMAS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LIKE {
			{
				p.SetState(1616)
				p.Match(HiveParserKW_LIKE)
			}
			{
				p.SetState(1617)
				p.ShowStmtIdentifier()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1620)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1621)
			p.Match(HiveParserKW_TABLES)
		}
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_FROM || _la == HiveParserKW_IN {
			{
				p.SetState(1622)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_FROM || _la == HiveParserKW_IN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1623)
				p.Identifier()
			}

		}
		p.SetState(1629)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_LIKE:
			{
				p.SetState(1626)
				p.Match(HiveParserKW_LIKE)
			}
			{
				p.SetState(1627)
				p.ShowStmtIdentifier()
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserStringLiteral, HiveParserIdentifier:
			{
				p.SetState(1628)
				p.ShowStmtIdentifier()
			}

		case HiveParserEOF:

		default:
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1631)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1632)
			p.Match(HiveParserKW_VIEWS)
		}
		p.SetState(1635)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_FROM || _la == HiveParserKW_IN {
			{
				p.SetState(1633)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_FROM || _la == HiveParserKW_IN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1634)
				p.Identifier()
			}

		}
		p.SetState(1640)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_LIKE:
			{
				p.SetState(1637)
				p.Match(HiveParserKW_LIKE)
			}
			{
				p.SetState(1638)
				p.ShowStmtIdentifier()
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserStringLiteral, HiveParserIdentifier:
			{
				p.SetState(1639)
				p.ShowStmtIdentifier()
			}

		case HiveParserEOF:

		default:
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1642)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1643)
			p.Match(HiveParserKW_MATERIALIZED)
		}
		{
			p.SetState(1644)
			p.Match(HiveParserKW_VIEWS)
		}
		p.SetState(1647)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_FROM || _la == HiveParserKW_IN {
			{
				p.SetState(1645)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_FROM || _la == HiveParserKW_IN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1646)
				p.Identifier()
			}

		}
		p.SetState(1652)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_LIKE:
			{
				p.SetState(1649)
				p.Match(HiveParserKW_LIKE)
			}
			{
				p.SetState(1650)
				p.ShowStmtIdentifier()
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserStringLiteral, HiveParserIdentifier:
			{
				p.SetState(1651)
				p.ShowStmtIdentifier()
			}

		case HiveParserEOF:

		default:
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1654)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1655)
			p.Match(HiveParserKW_COLUMNS)
		}
		{
			p.SetState(1656)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_FROM || _la == HiveParserKW_IN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1657)
			p.TableName()
		}
		p.SetState(1660)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_FROM || _la == HiveParserKW_IN {
			{
				p.SetState(1658)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_FROM || _la == HiveParserKW_IN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1659)
				p.Identifier()
			}

		}
		p.SetState(1665)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_LIKE:
			{
				p.SetState(1662)
				p.Match(HiveParserKW_LIKE)
			}
			{
				p.SetState(1663)
				p.ShowStmtIdentifier()
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserStringLiteral, HiveParserIdentifier:
			{
				p.SetState(1664)
				p.ShowStmtIdentifier()
			}

		case HiveParserEOF:

		default:
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1667)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1668)
			p.Match(HiveParserKW_FUNCTIONS)
		}
		p.SetState(1672)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_LIKE:
			{
				p.SetState(1669)
				p.Match(HiveParserKW_LIKE)
			}
			{
				p.SetState(1670)
				p.ShowFunctionIdentifier()
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserStringLiteral, HiveParserIdentifier:
			{
				p.SetState(1671)
				p.ShowFunctionIdentifier()
			}

		case HiveParserEOF:

		default:
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1674)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1675)
			p.Match(HiveParserKW_PARTITIONS)
		}
		{
			p.SetState(1676)
			p.TableName()
		}
		p.SetState(1678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITION {
			{
				p.SetState(1677)
				p.PartitionSpec()
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1680)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1681)
			p.Match(HiveParserKW_CREATE)
		}
		p.SetState(1686)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_DATABASE, HiveParserKW_SCHEMA:
			{
				p.SetState(1682)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1683)
				p.Identifier()
			}

		case HiveParserKW_TABLE:
			{
				p.SetState(1684)
				p.Match(HiveParserKW_TABLE)
			}
			{
				p.SetState(1685)
				p.TableName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1688)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1689)
			p.Match(HiveParserKW_TABLE)
		}
		{
			p.SetState(1690)
			p.Match(HiveParserKW_EXTENDED)
		}
		p.SetState(1693)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_FROM || _la == HiveParserKW_IN {
			{
				p.SetState(1691)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_FROM || _la == HiveParserKW_IN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1692)
				p.Identifier()
			}

		}
		{
			p.SetState(1695)
			p.Match(HiveParserKW_LIKE)
		}
		{
			p.SetState(1696)
			p.ShowStmtIdentifier()
		}
		p.SetState(1698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITION {
			{
				p.SetState(1697)
				p.PartitionSpec()
			}

		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1700)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1701)
			p.Match(HiveParserKW_TBLPROPERTIES)
		}
		{
			p.SetState(1702)
			p.TableName()
		}
		p.SetState(1706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserLPAREN {
			{
				p.SetState(1703)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(1704)
				p.Match(HiveParserStringLiteral)
			}
			{
				p.SetState(1705)
				p.Match(HiveParserRPAREN)
			}

		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1708)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1709)
			p.Match(HiveParserKW_LOCKS)
		}
		p.SetState(1721)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1710)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1711)
				p.Identifier()
			}
			p.SetState(1713)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserKW_EXTENDED {
				{
					p.SetState(1712)
					p.Match(HiveParserKW_EXTENDED)
				}

			}

		case 2:
			p.SetState(1716)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
				{
					p.SetState(1715)
					p.PartTypeExpr()
				}

			}
			p.SetState(1719)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserKW_EXTENDED {
				{
					p.SetState(1718)
					p.Match(HiveParserKW_EXTENDED)
				}

			}

		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1723)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1724)
			p.Match(HiveParserKW_COMPACTIONS)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1725)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1726)
			p.Match(HiveParserKW_TRANSACTIONS)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1727)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1728)
			p.Match(HiveParserKW_CONF)
		}
		{
			p.SetState(1729)
			p.Match(HiveParserStringLiteral)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1730)
			p.Match(HiveParserKW_SHOW)
		}
		{
			p.SetState(1731)
			p.Match(HiveParserKW_RESOURCE)
		}
		p.SetState(1735)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_PLAN:
			{
				p.SetState(1732)
				p.Match(HiveParserKW_PLAN)
			}
			{
				p.SetState(1733)
				p.Identifier()
			}

		case HiveParserKW_PLANS:
			{
				p.SetState(1734)
				p.Match(HiveParserKW_PLANS)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ILockStatementContext is an interface to support dynamic dispatch.
type ILockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockStatementContext differentiates from other interfaces.
	IsLockStatementContext()
}

type LockStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockStatementContext() *LockStatementContext {
	var p = new(LockStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_lockStatement
	return p
}

func (*LockStatementContext) IsLockStatementContext() {}

func NewLockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockStatementContext {
	var p = new(LockStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_lockStatement

	return p
}

func (s *LockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LockStatementContext) KW_LOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCK, 0)
}

func (s *LockStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *LockStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LockStatementContext) LockMode() ILockModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockModeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockModeContext)
}

func (s *LockStatementContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *LockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLockStatement(s)
	}
}

func (s *LockStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLockStatement(s)
	}
}

func (p *HiveParser) LockStatement() (localctx ILockStatementContext) {
	localctx = NewLockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, HiveParserRULE_lockStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1739)
		p.Match(HiveParserKW_LOCK)
	}
	{
		p.SetState(1740)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(1741)
		p.TableName()
	}
	p.SetState(1743)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITION {
		{
			p.SetState(1742)
			p.PartitionSpec()
		}

	}
	{
		p.SetState(1745)
		p.LockMode()
	}

	return localctx
}

// ILockDatabaseContext is an interface to support dynamic dispatch.
type ILockDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockDatabaseContext differentiates from other interfaces.
	IsLockDatabaseContext()
}

type LockDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockDatabaseContext() *LockDatabaseContext {
	var p = new(LockDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_lockDatabase
	return p
}

func (*LockDatabaseContext) IsLockDatabaseContext() {}

func NewLockDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockDatabaseContext {
	var p = new(LockDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_lockDatabase

	return p
}

func (s *LockDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *LockDatabaseContext) KW_LOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCK, 0)
}

func (s *LockDatabaseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LockDatabaseContext) LockMode() ILockModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockModeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockModeContext)
}

func (s *LockDatabaseContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *LockDatabaseContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *LockDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLockDatabase(s)
	}
}

func (s *LockDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLockDatabase(s)
	}
}

func (p *HiveParser) LockDatabase() (localctx ILockDatabaseContext) {
	localctx = NewLockDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, HiveParserRULE_lockDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1747)
		p.Match(HiveParserKW_LOCK)
	}
	{
		p.SetState(1748)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1749)
		p.Identifier()
	}
	{
		p.SetState(1750)
		p.LockMode()
	}

	return localctx
}

// ILockModeContext is an interface to support dynamic dispatch.
type ILockModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockModeContext differentiates from other interfaces.
	IsLockModeContext()
}

type LockModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockModeContext() *LockModeContext {
	var p = new(LockModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_lockMode
	return p
}

func (*LockModeContext) IsLockModeContext() {}

func NewLockModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockModeContext {
	var p = new(LockModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_lockMode

	return p
}

func (s *LockModeContext) GetParser() antlr.Parser { return s.parser }

func (s *LockModeContext) KW_SHARED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHARED, 0)
}

func (s *LockModeContext) KW_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXCLUSIVE, 0)
}

func (s *LockModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockModeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLockMode(s)
	}
}

func (s *LockModeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLockMode(s)
	}
}

func (p *HiveParser) LockMode() (localctx ILockModeContext) {
	localctx = NewLockModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, HiveParserRULE_lockMode)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1752)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_SHARED || _la == HiveParserKW_EXCLUSIVE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUnlockStatementContext is an interface to support dynamic dispatch.
type IUnlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnlockStatementContext differentiates from other interfaces.
	IsUnlockStatementContext()
}

type UnlockStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnlockStatementContext() *UnlockStatementContext {
	var p = new(UnlockStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_unlockStatement
	return p
}

func (*UnlockStatementContext) IsUnlockStatementContext() {}

func NewUnlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnlockStatementContext {
	var p = new(UnlockStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_unlockStatement

	return p
}

func (s *UnlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnlockStatementContext) KW_UNLOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNLOCK, 0)
}

func (s *UnlockStatementContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *UnlockStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *UnlockStatementContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *UnlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnlockStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUnlockStatement(s)
	}
}

func (s *UnlockStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUnlockStatement(s)
	}
}

func (p *HiveParser) UnlockStatement() (localctx IUnlockStatementContext) {
	localctx = NewUnlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, HiveParserRULE_unlockStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1754)
		p.Match(HiveParserKW_UNLOCK)
	}
	{
		p.SetState(1755)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(1756)
		p.TableName()
	}
	p.SetState(1758)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITION {
		{
			p.SetState(1757)
			p.PartitionSpec()
		}

	}

	return localctx
}

// IUnlockDatabaseContext is an interface to support dynamic dispatch.
type IUnlockDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnlockDatabaseContext differentiates from other interfaces.
	IsUnlockDatabaseContext()
}

type UnlockDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnlockDatabaseContext() *UnlockDatabaseContext {
	var p = new(UnlockDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_unlockDatabase
	return p
}

func (*UnlockDatabaseContext) IsUnlockDatabaseContext() {}

func NewUnlockDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnlockDatabaseContext {
	var p = new(UnlockDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_unlockDatabase

	return p
}

func (s *UnlockDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *UnlockDatabaseContext) KW_UNLOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNLOCK, 0)
}

func (s *UnlockDatabaseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UnlockDatabaseContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *UnlockDatabaseContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *UnlockDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnlockDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnlockDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUnlockDatabase(s)
	}
}

func (s *UnlockDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUnlockDatabase(s)
	}
}

func (p *HiveParser) UnlockDatabase() (localctx IUnlockDatabaseContext) {
	localctx = NewUnlockDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, HiveParserRULE_unlockDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1760)
		p.Match(HiveParserKW_UNLOCK)
	}
	{
		p.SetState(1761)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1762)
		p.Identifier()
	}

	return localctx
}

// ICreateRoleStatementContext is an interface to support dynamic dispatch.
type ICreateRoleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateRoleStatementContext differentiates from other interfaces.
	IsCreateRoleStatementContext()
}

type CreateRoleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateRoleStatementContext() *CreateRoleStatementContext {
	var p = new(CreateRoleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createRoleStatement
	return p
}

func (*CreateRoleStatementContext) IsCreateRoleStatementContext() {}

func NewCreateRoleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateRoleStatementContext {
	var p = new(CreateRoleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createRoleStatement

	return p
}

func (s *CreateRoleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateRoleStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateRoleStatementContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *CreateRoleStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateRoleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateRoleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateRoleStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateRoleStatement(s)
	}
}

func (s *CreateRoleStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateRoleStatement(s)
	}
}

func (p *HiveParser) CreateRoleStatement() (localctx ICreateRoleStatementContext) {
	localctx = NewCreateRoleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, HiveParserRULE_createRoleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1764)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(1765)
		p.Match(HiveParserKW_ROLE)
	}
	{
		p.SetState(1766)
		p.Identifier()
	}

	return localctx
}

// IDropRoleStatementContext is an interface to support dynamic dispatch.
type IDropRoleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropRoleStatementContext differentiates from other interfaces.
	IsDropRoleStatementContext()
}

type DropRoleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropRoleStatementContext() *DropRoleStatementContext {
	var p = new(DropRoleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropRoleStatement
	return p
}

func (*DropRoleStatementContext) IsDropRoleStatementContext() {}

func NewDropRoleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropRoleStatementContext {
	var p = new(DropRoleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropRoleStatement

	return p
}

func (s *DropRoleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropRoleStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropRoleStatementContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *DropRoleStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropRoleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropRoleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropRoleStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropRoleStatement(s)
	}
}

func (s *DropRoleStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropRoleStatement(s)
	}
}

func (p *HiveParser) DropRoleStatement() (localctx IDropRoleStatementContext) {
	localctx = NewDropRoleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, HiveParserRULE_dropRoleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1768)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(1769)
		p.Match(HiveParserKW_ROLE)
	}
	{
		p.SetState(1770)
		p.Identifier()
	}

	return localctx
}

// IGrantPrivilegesContext is an interface to support dynamic dispatch.
type IGrantPrivilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrantPrivilegesContext differentiates from other interfaces.
	IsGrantPrivilegesContext()
}

type GrantPrivilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantPrivilegesContext() *GrantPrivilegesContext {
	var p = new(GrantPrivilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_grantPrivileges
	return p
}

func (*GrantPrivilegesContext) IsGrantPrivilegesContext() {}

func NewGrantPrivilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantPrivilegesContext {
	var p = new(GrantPrivilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_grantPrivileges

	return p
}

func (s *GrantPrivilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantPrivilegesContext) KW_GRANT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GRANT, 0)
}

func (s *GrantPrivilegesContext) PrivilegeList() IPrivilegeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeListContext)
}

func (s *GrantPrivilegesContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *GrantPrivilegesContext) PrincipalSpecification() IPrincipalSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalSpecificationContext)
}

func (s *GrantPrivilegesContext) PrivilegeObject() IPrivilegeObjectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeObjectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeObjectContext)
}

func (s *GrantPrivilegesContext) WithGrantOption() IWithGrantOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithGrantOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithGrantOptionContext)
}

func (s *GrantPrivilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantPrivilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantPrivilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGrantPrivileges(s)
	}
}

func (s *GrantPrivilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGrantPrivileges(s)
	}
}

func (p *HiveParser) GrantPrivileges() (localctx IGrantPrivilegesContext) {
	localctx = NewGrantPrivilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, HiveParserRULE_grantPrivileges)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1772)
		p.Match(HiveParserKW_GRANT)
	}
	{
		p.SetState(1773)
		p.PrivilegeList()
	}
	p.SetState(1775)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ON {
		{
			p.SetState(1774)
			p.PrivilegeObject()
		}

	}
	{
		p.SetState(1777)
		p.Match(HiveParserKW_TO)
	}
	{
		p.SetState(1778)
		p.PrincipalSpecification()
	}
	p.SetState(1780)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(1779)
			p.WithGrantOption()
		}

	}

	return localctx
}

// IRevokePrivilegesContext is an interface to support dynamic dispatch.
type IRevokePrivilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevokePrivilegesContext differentiates from other interfaces.
	IsRevokePrivilegesContext()
}

type RevokePrivilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevokePrivilegesContext() *RevokePrivilegesContext {
	var p = new(RevokePrivilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_revokePrivileges
	return p
}

func (*RevokePrivilegesContext) IsRevokePrivilegesContext() {}

func NewRevokePrivilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokePrivilegesContext {
	var p = new(RevokePrivilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_revokePrivileges

	return p
}

func (s *RevokePrivilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokePrivilegesContext) KW_REVOKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REVOKE, 0)
}

func (s *RevokePrivilegesContext) PrivilegeList() IPrivilegeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeListContext)
}

func (s *RevokePrivilegesContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *RevokePrivilegesContext) PrincipalSpecification() IPrincipalSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalSpecificationContext)
}

func (s *RevokePrivilegesContext) GrantOptionFor() IGrantOptionForContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantOptionForContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantOptionForContext)
}

func (s *RevokePrivilegesContext) PrivilegeObject() IPrivilegeObjectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeObjectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeObjectContext)
}

func (s *RevokePrivilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokePrivilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RevokePrivilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRevokePrivileges(s)
	}
}

func (s *RevokePrivilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRevokePrivileges(s)
	}
}

func (p *HiveParser) RevokePrivileges() (localctx IRevokePrivilegesContext) {
	localctx = NewRevokePrivilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, HiveParserRULE_revokePrivileges)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1782)
		p.Match(HiveParserKW_REVOKE)
	}
	p.SetState(1784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_GRANT {
		{
			p.SetState(1783)
			p.GrantOptionFor()
		}

	}
	{
		p.SetState(1786)
		p.PrivilegeList()
	}
	p.SetState(1788)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ON {
		{
			p.SetState(1787)
			p.PrivilegeObject()
		}

	}
	{
		p.SetState(1790)
		p.Match(HiveParserKW_FROM)
	}
	{
		p.SetState(1791)
		p.PrincipalSpecification()
	}

	return localctx
}

// IGrantRoleContext is an interface to support dynamic dispatch.
type IGrantRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrantRoleContext differentiates from other interfaces.
	IsGrantRoleContext()
}

type GrantRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantRoleContext() *GrantRoleContext {
	var p = new(GrantRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_grantRole
	return p
}

func (*GrantRoleContext) IsGrantRoleContext() {}

func NewGrantRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantRoleContext {
	var p = new(GrantRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_grantRole

	return p
}

func (s *GrantRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantRoleContext) KW_GRANT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GRANT, 0)
}

func (s *GrantRoleContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *GrantRoleContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GrantRoleContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *GrantRoleContext) PrincipalSpecification() IPrincipalSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalSpecificationContext)
}

func (s *GrantRoleContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *GrantRoleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *GrantRoleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *GrantRoleContext) WithAdminOption() IWithAdminOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithAdminOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithAdminOptionContext)
}

func (s *GrantRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGrantRole(s)
	}
}

func (s *GrantRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGrantRole(s)
	}
}

func (p *HiveParser) GrantRole() (localctx IGrantRoleContext) {
	localctx = NewGrantRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, HiveParserRULE_grantRole)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1793)
		p.Match(HiveParserKW_GRANT)
	}
	p.SetState(1795)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1794)
			p.Match(HiveParserKW_ROLE)
		}

	}
	{
		p.SetState(1797)
		p.Identifier()
	}
	p.SetState(1802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1798)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1799)
			p.Identifier()
		}

		p.SetState(1804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1805)
		p.Match(HiveParserKW_TO)
	}
	{
		p.SetState(1806)
		p.PrincipalSpecification()
	}
	p.SetState(1808)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(1807)
			p.WithAdminOption()
		}

	}

	return localctx
}

// IRevokeRoleContext is an interface to support dynamic dispatch.
type IRevokeRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevokeRoleContext differentiates from other interfaces.
	IsRevokeRoleContext()
}

type RevokeRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevokeRoleContext() *RevokeRoleContext {
	var p = new(RevokeRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_revokeRole
	return p
}

func (*RevokeRoleContext) IsRevokeRoleContext() {}

func NewRevokeRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokeRoleContext {
	var p = new(RevokeRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_revokeRole

	return p
}

func (s *RevokeRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokeRoleContext) KW_REVOKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REVOKE, 0)
}

func (s *RevokeRoleContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *RevokeRoleContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RevokeRoleContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *RevokeRoleContext) PrincipalSpecification() IPrincipalSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalSpecificationContext)
}

func (s *RevokeRoleContext) AdminOptionFor() IAdminOptionForContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdminOptionForContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdminOptionForContext)
}

func (s *RevokeRoleContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *RevokeRoleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *RevokeRoleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *RevokeRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RevokeRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRevokeRole(s)
	}
}

func (s *RevokeRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRevokeRole(s)
	}
}

func (p *HiveParser) RevokeRole() (localctx IRevokeRoleContext) {
	localctx = NewRevokeRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, HiveParserRULE_revokeRole)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1810)
		p.Match(HiveParserKW_REVOKE)
	}
	p.SetState(1812)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1811)
			p.AdminOptionFor()
		}

	}
	p.SetState(1815)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1814)
			p.Match(HiveParserKW_ROLE)
		}

	}
	{
		p.SetState(1817)
		p.Identifier()
	}
	p.SetState(1822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1818)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1819)
			p.Identifier()
		}

		p.SetState(1824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1825)
		p.Match(HiveParserKW_FROM)
	}
	{
		p.SetState(1826)
		p.PrincipalSpecification()
	}

	return localctx
}

// IShowRoleGrantsContext is an interface to support dynamic dispatch.
type IShowRoleGrantsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowRoleGrantsContext differentiates from other interfaces.
	IsShowRoleGrantsContext()
}

type ShowRoleGrantsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowRoleGrantsContext() *ShowRoleGrantsContext {
	var p = new(ShowRoleGrantsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showRoleGrants
	return p
}

func (*ShowRoleGrantsContext) IsShowRoleGrantsContext() {}

func NewShowRoleGrantsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowRoleGrantsContext {
	var p = new(ShowRoleGrantsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showRoleGrants

	return p
}

func (s *ShowRoleGrantsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowRoleGrantsContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *ShowRoleGrantsContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *ShowRoleGrantsContext) KW_GRANT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GRANT, 0)
}

func (s *ShowRoleGrantsContext) PrincipalName() IPrincipalNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalNameContext)
}

func (s *ShowRoleGrantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRoleGrantsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowRoleGrantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowRoleGrants(s)
	}
}

func (s *ShowRoleGrantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowRoleGrants(s)
	}
}

func (p *HiveParser) ShowRoleGrants() (localctx IShowRoleGrantsContext) {
	localctx = NewShowRoleGrantsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, HiveParserRULE_showRoleGrants)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1828)
		p.Match(HiveParserKW_SHOW)
	}
	{
		p.SetState(1829)
		p.Match(HiveParserKW_ROLE)
	}
	{
		p.SetState(1830)
		p.Match(HiveParserKW_GRANT)
	}
	{
		p.SetState(1831)
		p.PrincipalName()
	}

	return localctx
}

// IShowRolesContext is an interface to support dynamic dispatch.
type IShowRolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowRolesContext differentiates from other interfaces.
	IsShowRolesContext()
}

type ShowRolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowRolesContext() *ShowRolesContext {
	var p = new(ShowRolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showRoles
	return p
}

func (*ShowRolesContext) IsShowRolesContext() {}

func NewShowRolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowRolesContext {
	var p = new(ShowRolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showRoles

	return p
}

func (s *ShowRolesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowRolesContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *ShowRolesContext) KW_ROLES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLES, 0)
}

func (s *ShowRolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowRolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowRoles(s)
	}
}

func (s *ShowRolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowRoles(s)
	}
}

func (p *HiveParser) ShowRoles() (localctx IShowRolesContext) {
	localctx = NewShowRolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, HiveParserRULE_showRoles)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1833)
		p.Match(HiveParserKW_SHOW)
	}
	{
		p.SetState(1834)
		p.Match(HiveParserKW_ROLES)
	}

	return localctx
}

// IShowCurrentRoleContext is an interface to support dynamic dispatch.
type IShowCurrentRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCurrentRoleContext differentiates from other interfaces.
	IsShowCurrentRoleContext()
}

type ShowCurrentRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCurrentRoleContext() *ShowCurrentRoleContext {
	var p = new(ShowCurrentRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showCurrentRole
	return p
}

func (*ShowCurrentRoleContext) IsShowCurrentRoleContext() {}

func NewShowCurrentRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCurrentRoleContext {
	var p = new(ShowCurrentRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showCurrentRole

	return p
}

func (s *ShowCurrentRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCurrentRoleContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *ShowCurrentRoleContext) KW_CURRENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT, 0)
}

func (s *ShowCurrentRoleContext) KW_ROLES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLES, 0)
}

func (s *ShowCurrentRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCurrentRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCurrentRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowCurrentRole(s)
	}
}

func (s *ShowCurrentRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowCurrentRole(s)
	}
}

func (p *HiveParser) ShowCurrentRole() (localctx IShowCurrentRoleContext) {
	localctx = NewShowCurrentRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, HiveParserRULE_showCurrentRole)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1836)
		p.Match(HiveParserKW_SHOW)
	}
	{
		p.SetState(1837)
		p.Match(HiveParserKW_CURRENT)
	}
	{
		p.SetState(1838)
		p.Match(HiveParserKW_ROLES)
	}

	return localctx
}

// ISetRoleContext is an interface to support dynamic dispatch.
type ISetRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetRoleContext differentiates from other interfaces.
	IsSetRoleContext()
}

type SetRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetRoleContext() *SetRoleContext {
	var p = new(SetRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_setRole
	return p
}

func (*SetRoleContext) IsSetRoleContext() {}

func NewSetRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetRoleContext {
	var p = new(SetRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_setRole

	return p
}

func (s *SetRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *SetRoleContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *SetRoleContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *SetRoleContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *SetRoleContext) KW_NONE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NONE, 0)
}

func (s *SetRoleContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SetRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSetRole(s)
	}
}

func (s *SetRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSetRole(s)
	}
}

func (p *HiveParser) SetRole() (localctx ISetRoleContext) {
	localctx = NewSetRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, HiveParserRULE_setRole)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1840)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(1841)
		p.Match(HiveParserKW_ROLE)
	}
	p.SetState(1845)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ALL:
		{
			p.SetState(1842)
			p.Match(HiveParserKW_ALL)
		}

	case HiveParserKW_NONE:
		{
			p.SetState(1843)
			p.Match(HiveParserKW_NONE)
		}

	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		{
			p.SetState(1844)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowGrantsContext is an interface to support dynamic dispatch.
type IShowGrantsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowGrantsContext differentiates from other interfaces.
	IsShowGrantsContext()
}

type ShowGrantsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowGrantsContext() *ShowGrantsContext {
	var p = new(ShowGrantsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showGrants
	return p
}

func (*ShowGrantsContext) IsShowGrantsContext() {}

func NewShowGrantsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowGrantsContext {
	var p = new(ShowGrantsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showGrants

	return p
}

func (s *ShowGrantsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowGrantsContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *ShowGrantsContext) KW_GRANT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GRANT, 0)
}

func (s *ShowGrantsContext) PrincipalName() IPrincipalNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalNameContext)
}

func (s *ShowGrantsContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *ShowGrantsContext) PrivilegeIncludeColObject() IPrivilegeIncludeColObjectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeIncludeColObjectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeIncludeColObjectContext)
}

func (s *ShowGrantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGrantsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowGrantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowGrants(s)
	}
}

func (s *ShowGrantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowGrants(s)
	}
}

func (p *HiveParser) ShowGrants() (localctx IShowGrantsContext) {
	localctx = NewShowGrantsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, HiveParserRULE_showGrants)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1847)
		p.Match(HiveParserKW_SHOW)
	}
	{
		p.SetState(1848)
		p.Match(HiveParserKW_GRANT)
	}
	p.SetState(1850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_GROUP || _la == HiveParserKW_USER || _la == HiveParserKW_ROLE {
		{
			p.SetState(1849)
			p.PrincipalName()
		}

	}
	p.SetState(1854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ON {
		{
			p.SetState(1852)
			p.Match(HiveParserKW_ON)
		}
		{
			p.SetState(1853)
			p.PrivilegeIncludeColObject()
		}

	}

	return localctx
}

// IShowRolePrincipalsContext is an interface to support dynamic dispatch.
type IShowRolePrincipalsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowRolePrincipalsContext differentiates from other interfaces.
	IsShowRolePrincipalsContext()
}

type ShowRolePrincipalsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowRolePrincipalsContext() *ShowRolePrincipalsContext {
	var p = new(ShowRolePrincipalsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showRolePrincipals
	return p
}

func (*ShowRolePrincipalsContext) IsShowRolePrincipalsContext() {}

func NewShowRolePrincipalsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowRolePrincipalsContext {
	var p = new(ShowRolePrincipalsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showRolePrincipals

	return p
}

func (s *ShowRolePrincipalsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowRolePrincipalsContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *ShowRolePrincipalsContext) KW_PRINCIPALS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRINCIPALS, 0)
}

func (s *ShowRolePrincipalsContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ShowRolePrincipalsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRolePrincipalsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowRolePrincipalsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowRolePrincipals(s)
	}
}

func (s *ShowRolePrincipalsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowRolePrincipals(s)
	}
}

func (p *HiveParser) ShowRolePrincipals() (localctx IShowRolePrincipalsContext) {
	localctx = NewShowRolePrincipalsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, HiveParserRULE_showRolePrincipals)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1856)
		p.Match(HiveParserKW_SHOW)
	}
	{
		p.SetState(1857)
		p.Match(HiveParserKW_PRINCIPALS)
	}
	{
		p.SetState(1858)
		p.Identifier()
	}

	return localctx
}

// IPrivilegeIncludeColObjectContext is an interface to support dynamic dispatch.
type IPrivilegeIncludeColObjectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeIncludeColObjectContext differentiates from other interfaces.
	IsPrivilegeIncludeColObjectContext()
}

type PrivilegeIncludeColObjectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeIncludeColObjectContext() *PrivilegeIncludeColObjectContext {
	var p = new(PrivilegeIncludeColObjectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privilegeIncludeColObject
	return p
}

func (*PrivilegeIncludeColObjectContext) IsPrivilegeIncludeColObjectContext() {}

func NewPrivilegeIncludeColObjectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeIncludeColObjectContext {
	var p = new(PrivilegeIncludeColObjectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privilegeIncludeColObject

	return p
}

func (s *PrivilegeIncludeColObjectContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeIncludeColObjectContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *PrivilegeIncludeColObjectContext) PrivObjectCols() IPrivObjectColsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivObjectColsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivObjectColsContext)
}

func (s *PrivilegeIncludeColObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeIncludeColObjectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeIncludeColObjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivilegeIncludeColObject(s)
	}
}

func (s *PrivilegeIncludeColObjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivilegeIncludeColObject(s)
	}
}

func (p *HiveParser) PrivilegeIncludeColObject() (localctx IPrivilegeIncludeColObjectContext) {
	localctx = NewPrivilegeIncludeColObjectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, HiveParserRULE_privilegeIncludeColObject)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1862)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1860)
			p.Match(HiveParserKW_ALL)
		}

	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLE, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASE, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1861)
			p.PrivObjectCols()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrivilegeObjectContext is an interface to support dynamic dispatch.
type IPrivilegeObjectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeObjectContext differentiates from other interfaces.
	IsPrivilegeObjectContext()
}

type PrivilegeObjectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeObjectContext() *PrivilegeObjectContext {
	var p = new(PrivilegeObjectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privilegeObject
	return p
}

func (*PrivilegeObjectContext) IsPrivilegeObjectContext() {}

func NewPrivilegeObjectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeObjectContext {
	var p = new(PrivilegeObjectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privilegeObject

	return p
}

func (s *PrivilegeObjectContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeObjectContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *PrivilegeObjectContext) PrivObject() IPrivObjectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivObjectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivObjectContext)
}

func (s *PrivilegeObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeObjectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeObjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivilegeObject(s)
	}
}

func (s *PrivilegeObjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivilegeObject(s)
	}
}

func (p *HiveParser) PrivilegeObject() (localctx IPrivilegeObjectContext) {
	localctx = NewPrivilegeObjectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, HiveParserRULE_privilegeObject)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1864)
		p.Match(HiveParserKW_ON)
	}
	{
		p.SetState(1865)
		p.PrivObject()
	}

	return localctx
}

// IPrivObjectContext is an interface to support dynamic dispatch.
type IPrivObjectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivObjectContext differentiates from other interfaces.
	IsPrivObjectContext()
}

type PrivObjectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivObjectContext() *PrivObjectContext {
	var p = new(PrivObjectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privObject
	return p
}

func (*PrivObjectContext) IsPrivObjectContext() {}

func NewPrivObjectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivObjectContext {
	var p = new(PrivObjectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privObject

	return p
}

func (s *PrivObjectContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivObjectContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrivObjectContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *PrivObjectContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *PrivObjectContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *PrivObjectContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *PrivObjectContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *PrivObjectContext) KW_URI() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_URI, 0)
}

func (s *PrivObjectContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *PrivObjectContext) KW_SERVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERVER, 0)
}

func (s *PrivObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivObjectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivObjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivObject(s)
	}
}

func (s *PrivObjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivObject(s)
	}
}

func (p *HiveParser) PrivObject() (localctx IPrivObjectContext) {
	localctx = NewPrivObjectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, HiveParserRULE_privObject)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1880)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1867)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1868)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_TABLE {
			{
				p.SetState(1869)
				p.Match(HiveParserKW_TABLE)
			}

		}
		{
			p.SetState(1872)
			p.TableName()
		}
		p.SetState(1874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITION {
			{
				p.SetState(1873)
				p.PartitionSpec()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1876)
			p.Match(HiveParserKW_URI)
		}
		{
			p.SetState(1877)
			p.Match(HiveParserStringLiteral)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1878)
			p.Match(HiveParserKW_SERVER)
		}
		{
			p.SetState(1879)
			p.Identifier()
		}

	}

	return localctx
}

// IPrivObjectColsContext is an interface to support dynamic dispatch.
type IPrivObjectColsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivObjectColsContext differentiates from other interfaces.
	IsPrivObjectColsContext()
}

type PrivObjectColsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivObjectColsContext() *PrivObjectColsContext {
	var p = new(PrivObjectColsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privObjectCols
	return p
}

func (*PrivObjectColsContext) IsPrivObjectColsContext() {}

func NewPrivObjectColsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivObjectColsContext {
	var p = new(PrivObjectColsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privObjectCols

	return p
}

func (s *PrivObjectColsContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivObjectColsContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrivObjectColsContext) KW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASE, 0)
}

func (s *PrivObjectColsContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *PrivObjectColsContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *PrivObjectColsContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *PrivObjectColsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *PrivObjectColsContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *PrivObjectColsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *PrivObjectColsContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *PrivObjectColsContext) KW_URI() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_URI, 0)
}

func (s *PrivObjectColsContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *PrivObjectColsContext) KW_SERVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERVER, 0)
}

func (s *PrivObjectColsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivObjectColsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivObjectColsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivObjectCols(s)
	}
}

func (s *PrivObjectColsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivObjectCols(s)
	}
}

func (p *HiveParser) PrivObjectCols() (localctx IPrivObjectColsContext) {
	localctx = NewPrivObjectColsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, HiveParserRULE_privObjectCols)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1901)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1882)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_DATABASE || _la == HiveParserKW_SCHEMA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1883)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1885)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_TABLE {
			{
				p.SetState(1884)
				p.Match(HiveParserKW_TABLE)
			}

		}
		{
			p.SetState(1887)
			p.TableName()
		}
		p.SetState(1892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserLPAREN {
			{
				p.SetState(1888)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(1889)
				p.ColumnNameList()
			}
			{
				p.SetState(1890)
				p.Match(HiveParserRPAREN)
			}

		}
		p.SetState(1895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITION {
			{
				p.SetState(1894)
				p.PartitionSpec()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1897)
			p.Match(HiveParserKW_URI)
		}
		{
			p.SetState(1898)
			p.Match(HiveParserStringLiteral)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1899)
			p.Match(HiveParserKW_SERVER)
		}
		{
			p.SetState(1900)
			p.Identifier()
		}

	}

	return localctx
}

// IPrivilegeListContext is an interface to support dynamic dispatch.
type IPrivilegeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeListContext differentiates from other interfaces.
	IsPrivilegeListContext()
}

type PrivilegeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeListContext() *PrivilegeListContext {
	var p = new(PrivilegeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privilegeList
	return p
}

func (*PrivilegeListContext) IsPrivilegeListContext() {}

func NewPrivilegeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeListContext {
	var p = new(PrivilegeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privilegeList

	return p
}

func (s *PrivilegeListContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeListContext) AllPrivlegeDef() []IPrivlegeDefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivlegeDefContext)(nil)).Elem())
	var tst = make([]IPrivlegeDefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivlegeDefContext)
		}
	}

	return tst
}

func (s *PrivilegeListContext) PrivlegeDef(i int) IPrivlegeDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivlegeDefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivlegeDefContext)
}

func (s *PrivilegeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *PrivilegeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *PrivilegeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivilegeList(s)
	}
}

func (s *PrivilegeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivilegeList(s)
	}
}

func (p *HiveParser) PrivilegeList() (localctx IPrivilegeListContext) {
	localctx = NewPrivilegeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, HiveParserRULE_privilegeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1903)
		p.PrivlegeDef()
	}
	p.SetState(1908)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1904)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1905)
			p.PrivlegeDef()
		}

		p.SetState(1910)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPrivlegeDefContext is an interface to support dynamic dispatch.
type IPrivlegeDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivlegeDefContext differentiates from other interfaces.
	IsPrivlegeDefContext()
}

type PrivlegeDefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivlegeDefContext() *PrivlegeDefContext {
	var p = new(PrivlegeDefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privlegeDef
	return p
}

func (*PrivlegeDefContext) IsPrivlegeDefContext() {}

func NewPrivlegeDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivlegeDefContext {
	var p = new(PrivlegeDefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privlegeDef

	return p
}

func (s *PrivlegeDefContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivlegeDefContext) PrivilegeType() IPrivilegeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeTypeContext)
}

func (s *PrivlegeDefContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *PrivlegeDefContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *PrivlegeDefContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *PrivlegeDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivlegeDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivlegeDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivlegeDef(s)
	}
}

func (s *PrivlegeDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivlegeDef(s)
	}
}

func (p *HiveParser) PrivlegeDef() (localctx IPrivlegeDefContext) {
	localctx = NewPrivlegeDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, HiveParserRULE_privlegeDef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1911)
		p.PrivilegeType()
	}
	p.SetState(1916)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserLPAREN {
		{
			p.SetState(1912)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(1913)
			p.ColumnNameList()
		}
		{
			p.SetState(1914)
			p.Match(HiveParserRPAREN)
		}

	}

	return localctx
}

// IPrivilegeTypeContext is an interface to support dynamic dispatch.
type IPrivilegeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeTypeContext differentiates from other interfaces.
	IsPrivilegeTypeContext()
}

type PrivilegeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeTypeContext() *PrivilegeTypeContext {
	var p = new(PrivilegeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_privilegeType
	return p
}

func (*PrivilegeTypeContext) IsPrivilegeTypeContext() {}

func NewPrivilegeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeTypeContext {
	var p = new(PrivilegeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_privilegeType

	return p
}

func (s *PrivilegeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeTypeContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *PrivilegeTypeContext) KW_ALTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALTER, 0)
}

func (s *PrivilegeTypeContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *PrivilegeTypeContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *PrivilegeTypeContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *PrivilegeTypeContext) KW_LOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCK, 0)
}

func (s *PrivilegeTypeContext) KW_SELECT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SELECT, 0)
}

func (s *PrivilegeTypeContext) KW_SHOW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW_DATABASE, 0)
}

func (s *PrivilegeTypeContext) KW_INSERT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INSERT, 0)
}

func (s *PrivilegeTypeContext) KW_DELETE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DELETE, 0)
}

func (s *PrivilegeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrivilegeType(s)
	}
}

func (s *PrivilegeTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrivilegeType(s)
	}
}

func (p *HiveParser) PrivilegeType() (localctx IPrivilegeTypeContext) {
	localctx = NewPrivilegeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, HiveParserRULE_privilegeType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1918)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ALL)|(1<<HiveParserKW_SELECT)|(1<<HiveParserKW_INSERT))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(HiveParserKW_CREATE-65))|(1<<(HiveParserKW_ALTER-65))|(1<<(HiveParserKW_DROP-65)))) != 0) || _la == HiveParserKW_DELETE || _la == HiveParserKW_LOCK || _la == HiveParserKW_SHOW_DATABASE || _la == HiveParserKW_UPDATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrincipalSpecificationContext is an interface to support dynamic dispatch.
type IPrincipalSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrincipalSpecificationContext differentiates from other interfaces.
	IsPrincipalSpecificationContext()
}

type PrincipalSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrincipalSpecificationContext() *PrincipalSpecificationContext {
	var p = new(PrincipalSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_principalSpecification
	return p
}

func (*PrincipalSpecificationContext) IsPrincipalSpecificationContext() {}

func NewPrincipalSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrincipalSpecificationContext {
	var p = new(PrincipalSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_principalSpecification

	return p
}

func (s *PrincipalSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *PrincipalSpecificationContext) AllPrincipalName() []IPrincipalNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrincipalNameContext)(nil)).Elem())
	var tst = make([]IPrincipalNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrincipalNameContext)
		}
	}

	return tst
}

func (s *PrincipalSpecificationContext) PrincipalName(i int) IPrincipalNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrincipalNameContext)
}

func (s *PrincipalSpecificationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *PrincipalSpecificationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *PrincipalSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrincipalSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrincipalSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrincipalSpecification(s)
	}
}

func (s *PrincipalSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrincipalSpecification(s)
	}
}

func (p *HiveParser) PrincipalSpecification() (localctx IPrincipalSpecificationContext) {
	localctx = NewPrincipalSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, HiveParserRULE_principalSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1920)
		p.PrincipalName()
	}
	p.SetState(1925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1921)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1922)
			p.PrincipalName()
		}

		p.SetState(1927)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPrincipalNameContext is an interface to support dynamic dispatch.
type IPrincipalNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrincipalNameContext differentiates from other interfaces.
	IsPrincipalNameContext()
}

type PrincipalNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrincipalNameContext() *PrincipalNameContext {
	var p = new(PrincipalNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_principalName
	return p
}

func (*PrincipalNameContext) IsPrincipalNameContext() {}

func NewPrincipalNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrincipalNameContext {
	var p = new(PrincipalNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_principalName

	return p
}

func (s *PrincipalNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PrincipalNameContext) KW_USER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USER, 0)
}

func (s *PrincipalNameContext) PrincipalIdentifier() IPrincipalIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrincipalIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrincipalIdentifierContext)
}

func (s *PrincipalNameContext) KW_GROUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUP, 0)
}

func (s *PrincipalNameContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *PrincipalNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrincipalNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrincipalNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrincipalNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrincipalName(s)
	}
}

func (s *PrincipalNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrincipalName(s)
	}
}

func (p *HiveParser) PrincipalName() (localctx IPrincipalNameContext) {
	localctx = NewPrincipalNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, HiveParserRULE_principalName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1934)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_USER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1928)
			p.Match(HiveParserKW_USER)
		}
		{
			p.SetState(1929)
			p.PrincipalIdentifier()
		}

	case HiveParserKW_GROUP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1930)
			p.Match(HiveParserKW_GROUP)
		}
		{
			p.SetState(1931)
			p.PrincipalIdentifier()
		}

	case HiveParserKW_ROLE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1932)
			p.Match(HiveParserKW_ROLE)
		}
		{
			p.SetState(1933)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWithGrantOptionContext is an interface to support dynamic dispatch.
type IWithGrantOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithGrantOptionContext differentiates from other interfaces.
	IsWithGrantOptionContext()
}

type WithGrantOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithGrantOptionContext() *WithGrantOptionContext {
	var p = new(WithGrantOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_withGrantOption
	return p
}

func (*WithGrantOptionContext) IsWithGrantOptionContext() {}

func NewWithGrantOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithGrantOptionContext {
	var p = new(WithGrantOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_withGrantOption

	return p
}

func (s *WithGrantOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *WithGrantOptionContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *WithGrantOptionContext) KW_GRANT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GRANT, 0)
}

func (s *WithGrantOptionContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPTION, 0)
}

func (s *WithGrantOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithGrantOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithGrantOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWithGrantOption(s)
	}
}

func (s *WithGrantOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWithGrantOption(s)
	}
}

func (p *HiveParser) WithGrantOption() (localctx IWithGrantOptionContext) {
	localctx = NewWithGrantOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, HiveParserRULE_withGrantOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1936)
		p.Match(HiveParserKW_WITH)
	}
	{
		p.SetState(1937)
		p.Match(HiveParserKW_GRANT)
	}
	{
		p.SetState(1938)
		p.Match(HiveParserKW_OPTION)
	}

	return localctx
}

// IGrantOptionForContext is an interface to support dynamic dispatch.
type IGrantOptionForContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrantOptionForContext differentiates from other interfaces.
	IsGrantOptionForContext()
}

type GrantOptionForContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantOptionForContext() *GrantOptionForContext {
	var p = new(GrantOptionForContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_grantOptionFor
	return p
}

func (*GrantOptionForContext) IsGrantOptionForContext() {}

func NewGrantOptionForContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantOptionForContext {
	var p = new(GrantOptionForContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_grantOptionFor

	return p
}

func (s *GrantOptionForContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantOptionForContext) KW_GRANT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GRANT, 0)
}

func (s *GrantOptionForContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPTION, 0)
}

func (s *GrantOptionForContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOR, 0)
}

func (s *GrantOptionForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantOptionForContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantOptionForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGrantOptionFor(s)
	}
}

func (s *GrantOptionForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGrantOptionFor(s)
	}
}

func (p *HiveParser) GrantOptionFor() (localctx IGrantOptionForContext) {
	localctx = NewGrantOptionForContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, HiveParserRULE_grantOptionFor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1940)
		p.Match(HiveParserKW_GRANT)
	}
	{
		p.SetState(1941)
		p.Match(HiveParserKW_OPTION)
	}
	{
		p.SetState(1942)
		p.Match(HiveParserKW_FOR)
	}

	return localctx
}

// IAdminOptionForContext is an interface to support dynamic dispatch.
type IAdminOptionForContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdminOptionForContext differentiates from other interfaces.
	IsAdminOptionForContext()
}

type AdminOptionForContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdminOptionForContext() *AdminOptionForContext {
	var p = new(AdminOptionForContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_adminOptionFor
	return p
}

func (*AdminOptionForContext) IsAdminOptionForContext() {}

func NewAdminOptionForContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdminOptionForContext {
	var p = new(AdminOptionForContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_adminOptionFor

	return p
}

func (s *AdminOptionForContext) GetParser() antlr.Parser { return s.parser }

func (s *AdminOptionForContext) KW_ADMIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADMIN, 0)
}

func (s *AdminOptionForContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPTION, 0)
}

func (s *AdminOptionForContext) KW_FOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOR, 0)
}

func (s *AdminOptionForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdminOptionForContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdminOptionForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAdminOptionFor(s)
	}
}

func (s *AdminOptionForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAdminOptionFor(s)
	}
}

func (p *HiveParser) AdminOptionFor() (localctx IAdminOptionForContext) {
	localctx = NewAdminOptionForContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, HiveParserRULE_adminOptionFor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1944)
		p.Match(HiveParserKW_ADMIN)
	}
	{
		p.SetState(1945)
		p.Match(HiveParserKW_OPTION)
	}
	{
		p.SetState(1946)
		p.Match(HiveParserKW_FOR)
	}

	return localctx
}

// IWithAdminOptionContext is an interface to support dynamic dispatch.
type IWithAdminOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithAdminOptionContext differentiates from other interfaces.
	IsWithAdminOptionContext()
}

type WithAdminOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithAdminOptionContext() *WithAdminOptionContext {
	var p = new(WithAdminOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_withAdminOption
	return p
}

func (*WithAdminOptionContext) IsWithAdminOptionContext() {}

func NewWithAdminOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithAdminOptionContext {
	var p = new(WithAdminOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_withAdminOption

	return p
}

func (s *WithAdminOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *WithAdminOptionContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *WithAdminOptionContext) KW_ADMIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADMIN, 0)
}

func (s *WithAdminOptionContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPTION, 0)
}

func (s *WithAdminOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithAdminOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithAdminOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWithAdminOption(s)
	}
}

func (s *WithAdminOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWithAdminOption(s)
	}
}

func (p *HiveParser) WithAdminOption() (localctx IWithAdminOptionContext) {
	localctx = NewWithAdminOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, HiveParserRULE_withAdminOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1948)
		p.Match(HiveParserKW_WITH)
	}
	{
		p.SetState(1949)
		p.Match(HiveParserKW_ADMIN)
	}
	{
		p.SetState(1950)
		p.Match(HiveParserKW_OPTION)
	}

	return localctx
}

// IMetastoreCheckContext is an interface to support dynamic dispatch.
type IMetastoreCheckContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMetastoreCheckContext differentiates from other interfaces.
	IsMetastoreCheckContext()
}

type MetastoreCheckContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetastoreCheckContext() *MetastoreCheckContext {
	var p = new(MetastoreCheckContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_metastoreCheck
	return p
}

func (*MetastoreCheckContext) IsMetastoreCheckContext() {}

func NewMetastoreCheckContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetastoreCheckContext {
	var p = new(MetastoreCheckContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_metastoreCheck

	return p
}

func (s *MetastoreCheckContext) GetParser() antlr.Parser { return s.parser }

func (s *MetastoreCheckContext) KW_MSCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MSCK, 0)
}

func (s *MetastoreCheckContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *MetastoreCheckContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *MetastoreCheckContext) KW_REPAIR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPAIR, 0)
}

func (s *MetastoreCheckContext) KW_PARTITIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITIONS, 0)
}

func (s *MetastoreCheckContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *MetastoreCheckContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *MetastoreCheckContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *MetastoreCheckContext) KW_SYNC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SYNC, 0)
}

func (s *MetastoreCheckContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetastoreCheckContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetastoreCheckContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterMetastoreCheck(s)
	}
}

func (s *MetastoreCheckContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitMetastoreCheck(s)
	}
}

func (p *HiveParser) MetastoreCheck() (localctx IMetastoreCheckContext) {
	localctx = NewMetastoreCheckContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, HiveParserRULE_metastoreCheck)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1952)
		p.Match(HiveParserKW_MSCK)
	}
	p.SetState(1954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_REPAIR {
		{
			p.SetState(1953)
			p.Match(HiveParserKW_REPAIR)
		}

	}
	p.SetState(1965)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_TABLE:
		{
			p.SetState(1956)
			p.Match(HiveParserKW_TABLE)
		}
		{
			p.SetState(1957)
			p.TableName()
		}
		p.SetState(1960)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DROP || _la == HiveParserKW_ADD || _la == HiveParserKW_SYNC {
			{
				p.SetState(1958)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_DROP || _la == HiveParserKW_ADD || _la == HiveParserKW_SYNC) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1959)
				p.Match(HiveParserKW_PARTITIONS)
			}

		}

	case HiveParserEOF, HiveParserKW_PARTITION:
		p.SetState(1963)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PARTITION {
			{
				p.SetState(1962)
				p.PartitionSpec()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IResourceListContext is an interface to support dynamic dispatch.
type IResourceListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResourceListContext differentiates from other interfaces.
	IsResourceListContext()
}

type ResourceListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceListContext() *ResourceListContext {
	var p = new(ResourceListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_resourceList
	return p
}

func (*ResourceListContext) IsResourceListContext() {}

func NewResourceListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceListContext {
	var p = new(ResourceListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_resourceList

	return p
}

func (s *ResourceListContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceListContext) AllResource() []IResourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IResourceContext)(nil)).Elem())
	var tst = make([]IResourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IResourceContext)
		}
	}

	return tst
}

func (s *ResourceListContext) Resource(i int) IResourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IResourceContext)
}

func (s *ResourceListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ResourceListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ResourceListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterResourceList(s)
	}
}

func (s *ResourceListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitResourceList(s)
	}
}

func (p *HiveParser) ResourceList() (localctx IResourceListContext) {
	localctx = NewResourceListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, HiveParserRULE_resourceList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1967)
		p.Resource()
	}
	p.SetState(1972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(1968)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(1969)
			p.Resource()
		}

		p.SetState(1974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IResourceContext is an interface to support dynamic dispatch.
type IResourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResourceContext differentiates from other interfaces.
	IsResourceContext()
}

type ResourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceContext() *ResourceContext {
	var p = new(ResourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_resource
	return p
}

func (*ResourceContext) IsResourceContext() {}

func NewResourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceContext {
	var p = new(ResourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_resource

	return p
}

func (s *ResourceContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceContext) ResourceType() IResourceTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResourceTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResourceTypeContext)
}

func (s *ResourceContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ResourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterResource(s)
	}
}

func (s *ResourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitResource(s)
	}
}

func (p *HiveParser) Resource() (localctx IResourceContext) {
	localctx = NewResourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, HiveParserRULE_resource)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1975)
		p.ResourceType()
	}
	{
		p.SetState(1976)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IResourceTypeContext is an interface to support dynamic dispatch.
type IResourceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResourceTypeContext differentiates from other interfaces.
	IsResourceTypeContext()
}

type ResourceTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceTypeContext() *ResourceTypeContext {
	var p = new(ResourceTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_resourceType
	return p
}

func (*ResourceTypeContext) IsResourceTypeContext() {}

func NewResourceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceTypeContext {
	var p = new(ResourceTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_resourceType

	return p
}

func (s *ResourceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceTypeContext) KW_JAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_JAR, 0)
}

func (s *ResourceTypeContext) KW_FILE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FILE, 0)
}

func (s *ResourceTypeContext) KW_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ARCHIVE, 0)
}

func (s *ResourceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterResourceType(s)
	}
}

func (s *ResourceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitResourceType(s)
	}
}

func (p *HiveParser) ResourceType() (localctx IResourceTypeContext) {
	localctx = NewResourceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, HiveParserRULE_resourceType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1978)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_FILE || _la == HiveParserKW_JAR || _la == HiveParserKW_ARCHIVE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICreateFunctionStatementContext is an interface to support dynamic dispatch.
type ICreateFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateFunctionStatementContext differentiates from other interfaces.
	IsCreateFunctionStatementContext()
}

type CreateFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateFunctionStatementContext() *CreateFunctionStatementContext {
	var p = new(CreateFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createFunctionStatement
	return p
}

func (*CreateFunctionStatementContext) IsCreateFunctionStatementContext() {}

func NewCreateFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateFunctionStatementContext {
	var p = new(CreateFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createFunctionStatement

	return p
}

func (s *CreateFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateFunctionStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateFunctionStatementContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FUNCTION, 0)
}

func (s *CreateFunctionStatementContext) FunctionIdentifier() IFunctionIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionIdentifierContext)
}

func (s *CreateFunctionStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *CreateFunctionStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *CreateFunctionStatementContext) KW_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TEMPORARY, 0)
}

func (s *CreateFunctionStatementContext) KW_USING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USING, 0)
}

func (s *CreateFunctionStatementContext) ResourceList() IResourceListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResourceListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResourceListContext)
}

func (s *CreateFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateFunctionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateFunctionStatement(s)
	}
}

func (s *CreateFunctionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateFunctionStatement(s)
	}
}

func (p *HiveParser) CreateFunctionStatement() (localctx ICreateFunctionStatementContext) {
	localctx = NewCreateFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, HiveParserRULE_createFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1980)
		p.Match(HiveParserKW_CREATE)
	}
	p.SetState(1982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TEMPORARY {
		{
			p.SetState(1981)
			p.Match(HiveParserKW_TEMPORARY)
		}

	}
	{
		p.SetState(1984)
		p.Match(HiveParserKW_FUNCTION)
	}
	{
		p.SetState(1985)
		p.FunctionIdentifier()
	}
	{
		p.SetState(1986)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(1987)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(1990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_USING {
		{
			p.SetState(1988)
			p.Match(HiveParserKW_USING)
		}
		{
			p.SetState(1989)
			p.ResourceList()
		}

	}

	return localctx
}

// IDropFunctionStatementContext is an interface to support dynamic dispatch.
type IDropFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropFunctionStatementContext differentiates from other interfaces.
	IsDropFunctionStatementContext()
}

type DropFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropFunctionStatementContext() *DropFunctionStatementContext {
	var p = new(DropFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropFunctionStatement
	return p
}

func (*DropFunctionStatementContext) IsDropFunctionStatementContext() {}

func NewDropFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropFunctionStatementContext {
	var p = new(DropFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropFunctionStatement

	return p
}

func (s *DropFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropFunctionStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropFunctionStatementContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FUNCTION, 0)
}

func (s *DropFunctionStatementContext) FunctionIdentifier() IFunctionIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionIdentifierContext)
}

func (s *DropFunctionStatementContext) KW_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TEMPORARY, 0)
}

func (s *DropFunctionStatementContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropFunctionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropFunctionStatement(s)
	}
}

func (s *DropFunctionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropFunctionStatement(s)
	}
}

func (p *HiveParser) DropFunctionStatement() (localctx IDropFunctionStatementContext) {
	localctx = NewDropFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, HiveParserRULE_dropFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1992)
		p.Match(HiveParserKW_DROP)
	}
	p.SetState(1994)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TEMPORARY {
		{
			p.SetState(1993)
			p.Match(HiveParserKW_TEMPORARY)
		}

	}
	{
		p.SetState(1996)
		p.Match(HiveParserKW_FUNCTION)
	}
	p.SetState(1998)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(1997)
			p.IfExists()
		}

	}
	{
		p.SetState(2000)
		p.FunctionIdentifier()
	}

	return localctx
}

// IReloadFunctionStatementContext is an interface to support dynamic dispatch.
type IReloadFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReloadFunctionStatementContext differentiates from other interfaces.
	IsReloadFunctionStatementContext()
}

type ReloadFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReloadFunctionStatementContext() *ReloadFunctionStatementContext {
	var p = new(ReloadFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_reloadFunctionStatement
	return p
}

func (*ReloadFunctionStatementContext) IsReloadFunctionStatementContext() {}

func NewReloadFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReloadFunctionStatementContext {
	var p = new(ReloadFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_reloadFunctionStatement

	return p
}

func (s *ReloadFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReloadFunctionStatementContext) KW_RELOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RELOAD, 0)
}

func (s *ReloadFunctionStatementContext) KW_FUNCTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FUNCTION, 0)
}

func (s *ReloadFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReloadFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReloadFunctionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReloadFunctionStatement(s)
	}
}

func (s *ReloadFunctionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReloadFunctionStatement(s)
	}
}

func (p *HiveParser) ReloadFunctionStatement() (localctx IReloadFunctionStatementContext) {
	localctx = NewReloadFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, HiveParserRULE_reloadFunctionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2002)
		p.Match(HiveParserKW_RELOAD)
	}
	{
		p.SetState(2003)
		p.Match(HiveParserKW_FUNCTION)
	}

	return localctx
}

// ICreateMacroStatementContext is an interface to support dynamic dispatch.
type ICreateMacroStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateMacroStatementContext differentiates from other interfaces.
	IsCreateMacroStatementContext()
}

type CreateMacroStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateMacroStatementContext() *CreateMacroStatementContext {
	var p = new(CreateMacroStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createMacroStatement
	return p
}

func (*CreateMacroStatementContext) IsCreateMacroStatementContext() {}

func NewCreateMacroStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateMacroStatementContext {
	var p = new(CreateMacroStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createMacroStatement

	return p
}

func (s *CreateMacroStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateMacroStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateMacroStatementContext) KW_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TEMPORARY, 0)
}

func (s *CreateMacroStatementContext) KW_MACRO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MACRO, 0)
}

func (s *CreateMacroStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(HiveParserIdentifier, 0)
}

func (s *CreateMacroStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *CreateMacroStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *CreateMacroStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CreateMacroStatementContext) ColumnNameTypeList() IColumnNameTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeListContext)
}

func (s *CreateMacroStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateMacroStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateMacroStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateMacroStatement(s)
	}
}

func (s *CreateMacroStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateMacroStatement(s)
	}
}

func (p *HiveParser) CreateMacroStatement() (localctx ICreateMacroStatementContext) {
	localctx = NewCreateMacroStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, HiveParserRULE_createMacroStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2005)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(2006)
		p.Match(HiveParserKW_TEMPORARY)
	}
	{
		p.SetState(2007)
		p.Match(HiveParserKW_MACRO)
	}
	{
		p.SetState(2008)
		p.Match(HiveParserIdentifier)
	}
	{
		p.SetState(2009)
		p.Match(HiveParserLPAREN)
	}
	p.SetState(2011)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
		{
			p.SetState(2010)
			p.ColumnNameTypeList()
		}

	}
	{
		p.SetState(2013)
		p.Match(HiveParserRPAREN)
	}
	{
		p.SetState(2014)
		p.expression(0)
	}

	return localctx
}

// IDropMacroStatementContext is an interface to support dynamic dispatch.
type IDropMacroStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropMacroStatementContext differentiates from other interfaces.
	IsDropMacroStatementContext()
}

type DropMacroStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropMacroStatementContext() *DropMacroStatementContext {
	var p = new(DropMacroStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropMacroStatement
	return p
}

func (*DropMacroStatementContext) IsDropMacroStatementContext() {}

func NewDropMacroStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropMacroStatementContext {
	var p = new(DropMacroStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropMacroStatement

	return p
}

func (s *DropMacroStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropMacroStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropMacroStatementContext) KW_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TEMPORARY, 0)
}

func (s *DropMacroStatementContext) KW_MACRO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MACRO, 0)
}

func (s *DropMacroStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(HiveParserIdentifier, 0)
}

func (s *DropMacroStatementContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropMacroStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropMacroStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropMacroStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropMacroStatement(s)
	}
}

func (s *DropMacroStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropMacroStatement(s)
	}
}

func (p *HiveParser) DropMacroStatement() (localctx IDropMacroStatementContext) {
	localctx = NewDropMacroStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, HiveParserRULE_dropMacroStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2016)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(2017)
		p.Match(HiveParserKW_TEMPORARY)
	}
	{
		p.SetState(2018)
		p.Match(HiveParserKW_MACRO)
	}
	p.SetState(2020)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(2019)
			p.IfExists()
		}

	}
	{
		p.SetState(2022)
		p.Match(HiveParserIdentifier)
	}

	return localctx
}

// ICreateViewStatementContext is an interface to support dynamic dispatch.
type ICreateViewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateViewStatementContext differentiates from other interfaces.
	IsCreateViewStatementContext()
}

type CreateViewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateViewStatementContext() *CreateViewStatementContext {
	var p = new(CreateViewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createViewStatement
	return p
}

func (*CreateViewStatementContext) IsCreateViewStatementContext() {}

func NewCreateViewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateViewStatementContext {
	var p = new(CreateViewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createViewStatement

	return p
}

func (s *CreateViewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateViewStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateViewStatementContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *CreateViewStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateViewStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *CreateViewStatementContext) SelectStatementWithCTE() ISelectStatementWithCTEContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementWithCTEContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementWithCTEContext)
}

func (s *CreateViewStatementContext) OrReplace() IOrReplaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrReplaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrReplaceContext)
}

func (s *CreateViewStatementContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateViewStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *CreateViewStatementContext) ColumnNameCommentList() IColumnNameCommentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameCommentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameCommentListContext)
}

func (s *CreateViewStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *CreateViewStatementContext) TableComment() ITableCommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableCommentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableCommentContext)
}

func (s *CreateViewStatementContext) ViewPartition() IViewPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewPartitionContext)
}

func (s *CreateViewStatementContext) TablePropertiesPrefixed() ITablePropertiesPrefixedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesPrefixedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesPrefixedContext)
}

func (s *CreateViewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateViewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateViewStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateViewStatement(s)
	}
}

func (s *CreateViewStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateViewStatement(s)
	}
}

func (p *HiveParser) CreateViewStatement() (localctx ICreateViewStatementContext) {
	localctx = NewCreateViewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, HiveParserRULE_createViewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2024)
		p.Match(HiveParserKW_CREATE)
	}
	p.SetState(2026)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_OR {
		{
			p.SetState(2025)
			p.OrReplace()
		}

	}
	{
		p.SetState(2028)
		p.Match(HiveParserKW_VIEW)
	}
	p.SetState(2030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(2029)
			p.IfNotExists()
		}

	}
	{
		p.SetState(2032)
		p.TableName()
	}
	p.SetState(2037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserLPAREN {
		{
			p.SetState(2033)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(2034)
			p.ColumnNameCommentList()
		}
		{
			p.SetState(2035)
			p.Match(HiveParserRPAREN)
		}

	}
	p.SetState(2040)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(2039)
			p.TableComment()
		}

	}
	p.SetState(2043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITIONED {
		{
			p.SetState(2042)
			p.ViewPartition()
		}

	}
	p.SetState(2046)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TBLPROPERTIES {
		{
			p.SetState(2045)
			p.TablePropertiesPrefixed()
		}

	}
	{
		p.SetState(2048)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(2049)
		p.SelectStatementWithCTE()
	}

	return localctx
}

// ICreateMaterializedViewStatementContext is an interface to support dynamic dispatch.
type ICreateMaterializedViewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateMaterializedViewStatementContext differentiates from other interfaces.
	IsCreateMaterializedViewStatementContext()
}

type CreateMaterializedViewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateMaterializedViewStatementContext() *CreateMaterializedViewStatementContext {
	var p = new(CreateMaterializedViewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createMaterializedViewStatement
	return p
}

func (*CreateMaterializedViewStatementContext) IsCreateMaterializedViewStatementContext() {}

func NewCreateMaterializedViewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateMaterializedViewStatementContext {
	var p = new(CreateMaterializedViewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createMaterializedViewStatement

	return p
}

func (s *CreateMaterializedViewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateMaterializedViewStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateMaterializedViewStatementContext) KW_MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATERIALIZED, 0)
}

func (s *CreateMaterializedViewStatementContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *CreateMaterializedViewStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateMaterializedViewStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *CreateMaterializedViewStatementContext) SelectStatementWithCTE() ISelectStatementWithCTEContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementWithCTEContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementWithCTEContext)
}

func (s *CreateMaterializedViewStatementContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateMaterializedViewStatementContext) RewriteDisabled() IRewriteDisabledContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRewriteDisabledContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRewriteDisabledContext)
}

func (s *CreateMaterializedViewStatementContext) TableComment() ITableCommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableCommentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableCommentContext)
}

func (s *CreateMaterializedViewStatementContext) TableRowFormat() ITableRowFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatContext)
}

func (s *CreateMaterializedViewStatementContext) TableFileFormat() ITableFileFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableFileFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableFileFormatContext)
}

func (s *CreateMaterializedViewStatementContext) TableLocation() ITableLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableLocationContext)
}

func (s *CreateMaterializedViewStatementContext) TablePropertiesPrefixed() ITablePropertiesPrefixedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesPrefixedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesPrefixedContext)
}

func (s *CreateMaterializedViewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateMaterializedViewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateMaterializedViewStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateMaterializedViewStatement(s)
	}
}

func (s *CreateMaterializedViewStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateMaterializedViewStatement(s)
	}
}

func (p *HiveParser) CreateMaterializedViewStatement() (localctx ICreateMaterializedViewStatementContext) {
	localctx = NewCreateMaterializedViewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, HiveParserRULE_createMaterializedViewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2051)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(2052)
		p.Match(HiveParserKW_MATERIALIZED)
	}
	{
		p.SetState(2053)
		p.Match(HiveParserKW_VIEW)
	}
	p.SetState(2055)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(2054)
			p.IfNotExists()
		}

	}
	{
		p.SetState(2057)
		p.TableName()
	}
	p.SetState(2059)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_DISABLE {
		{
			p.SetState(2058)
			p.RewriteDisabled()
		}

	}
	p.SetState(2062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(2061)
			p.TableComment()
		}

	}
	p.SetState(2065)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ROW {
		{
			p.SetState(2064)
			p.TableRowFormat()
		}

	}
	p.SetState(2068)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_STORED {
		{
			p.SetState(2067)
			p.TableFileFormat()
		}

	}
	p.SetState(2071)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LOCATION {
		{
			p.SetState(2070)
			p.TableLocation()
		}

	}
	p.SetState(2074)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TBLPROPERTIES {
		{
			p.SetState(2073)
			p.TablePropertiesPrefixed()
		}

	}
	{
		p.SetState(2076)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(2077)
		p.SelectStatementWithCTE()
	}

	return localctx
}

// IViewPartitionContext is an interface to support dynamic dispatch.
type IViewPartitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsViewPartitionContext differentiates from other interfaces.
	IsViewPartitionContext()
}

type ViewPartitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyViewPartitionContext() *ViewPartitionContext {
	var p = new(ViewPartitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_viewPartition
	return p
}

func (*ViewPartitionContext) IsViewPartitionContext() {}

func NewViewPartitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ViewPartitionContext {
	var p = new(ViewPartitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_viewPartition

	return p
}

func (s *ViewPartitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ViewPartitionContext) KW_PARTITIONED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITIONED, 0)
}

func (s *ViewPartitionContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *ViewPartitionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ViewPartitionContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *ViewPartitionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ViewPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ViewPartitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ViewPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterViewPartition(s)
	}
}

func (s *ViewPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitViewPartition(s)
	}
}

func (p *HiveParser) ViewPartition() (localctx IViewPartitionContext) {
	localctx = NewViewPartitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, HiveParserRULE_viewPartition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2079)
		p.Match(HiveParserKW_PARTITIONED)
	}
	{
		p.SetState(2080)
		p.Match(HiveParserKW_ON)
	}
	{
		p.SetState(2081)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2082)
		p.ColumnNameList()
	}
	{
		p.SetState(2083)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IDropViewStatementContext is an interface to support dynamic dispatch.
type IDropViewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropViewStatementContext differentiates from other interfaces.
	IsDropViewStatementContext()
}

type DropViewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropViewStatementContext() *DropViewStatementContext {
	var p = new(DropViewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropViewStatement
	return p
}

func (*DropViewStatementContext) IsDropViewStatementContext() {}

func NewDropViewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropViewStatementContext {
	var p = new(DropViewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropViewStatement

	return p
}

func (s *DropViewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropViewStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropViewStatementContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *DropViewStatementContext) ViewName() IViewNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewNameContext)
}

func (s *DropViewStatementContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropViewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropViewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropViewStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropViewStatement(s)
	}
}

func (s *DropViewStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropViewStatement(s)
	}
}

func (p *HiveParser) DropViewStatement() (localctx IDropViewStatementContext) {
	localctx = NewDropViewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, HiveParserRULE_dropViewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2085)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(2086)
		p.Match(HiveParserKW_VIEW)
	}
	p.SetState(2088)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(2087)
			p.IfExists()
		}

	}
	{
		p.SetState(2090)
		p.ViewName()
	}

	return localctx
}

// IDropMaterializedViewStatementContext is an interface to support dynamic dispatch.
type IDropMaterializedViewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropMaterializedViewStatementContext differentiates from other interfaces.
	IsDropMaterializedViewStatementContext()
}

type DropMaterializedViewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropMaterializedViewStatementContext() *DropMaterializedViewStatementContext {
	var p = new(DropMaterializedViewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropMaterializedViewStatement
	return p
}

func (*DropMaterializedViewStatementContext) IsDropMaterializedViewStatementContext() {}

func NewDropMaterializedViewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropMaterializedViewStatementContext {
	var p = new(DropMaterializedViewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropMaterializedViewStatement

	return p
}

func (s *DropMaterializedViewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropMaterializedViewStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropMaterializedViewStatementContext) KW_MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATERIALIZED, 0)
}

func (s *DropMaterializedViewStatementContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *DropMaterializedViewStatementContext) ViewName() IViewNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewNameContext)
}

func (s *DropMaterializedViewStatementContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropMaterializedViewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropMaterializedViewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropMaterializedViewStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropMaterializedViewStatement(s)
	}
}

func (s *DropMaterializedViewStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropMaterializedViewStatement(s)
	}
}

func (p *HiveParser) DropMaterializedViewStatement() (localctx IDropMaterializedViewStatementContext) {
	localctx = NewDropMaterializedViewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, HiveParserRULE_dropMaterializedViewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2092)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(2093)
		p.Match(HiveParserKW_MATERIALIZED)
	}
	{
		p.SetState(2094)
		p.Match(HiveParserKW_VIEW)
	}
	p.SetState(2096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_IF {
		{
			p.SetState(2095)
			p.IfExists()
		}

	}
	{
		p.SetState(2098)
		p.ViewName()
	}

	return localctx
}

// IShowFunctionIdentifierContext is an interface to support dynamic dispatch.
type IShowFunctionIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowFunctionIdentifierContext differentiates from other interfaces.
	IsShowFunctionIdentifierContext()
}

type ShowFunctionIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowFunctionIdentifierContext() *ShowFunctionIdentifierContext {
	var p = new(ShowFunctionIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showFunctionIdentifier
	return p
}

func (*ShowFunctionIdentifierContext) IsShowFunctionIdentifierContext() {}

func NewShowFunctionIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowFunctionIdentifierContext {
	var p = new(ShowFunctionIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showFunctionIdentifier

	return p
}

func (s *ShowFunctionIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowFunctionIdentifierContext) FunctionIdentifier() IFunctionIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionIdentifierContext)
}

func (s *ShowFunctionIdentifierContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ShowFunctionIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFunctionIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowFunctionIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowFunctionIdentifier(s)
	}
}

func (s *ShowFunctionIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowFunctionIdentifier(s)
	}
}

func (p *HiveParser) ShowFunctionIdentifier() (localctx IShowFunctionIdentifierContext) {
	localctx = NewShowFunctionIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, HiveParserRULE_showFunctionIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2102)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2100)
			p.FunctionIdentifier()
		}

	case HiveParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2101)
			p.Match(HiveParserStringLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowStmtIdentifierContext is an interface to support dynamic dispatch.
type IShowStmtIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowStmtIdentifierContext differentiates from other interfaces.
	IsShowStmtIdentifierContext()
}

type ShowStmtIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowStmtIdentifierContext() *ShowStmtIdentifierContext {
	var p = new(ShowStmtIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_showStmtIdentifier
	return p
}

func (*ShowStmtIdentifierContext) IsShowStmtIdentifierContext() {}

func NewShowStmtIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowStmtIdentifierContext {
	var p = new(ShowStmtIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_showStmtIdentifier

	return p
}

func (s *ShowStmtIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowStmtIdentifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ShowStmtIdentifierContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ShowStmtIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStmtIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowStmtIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterShowStmtIdentifier(s)
	}
}

func (s *ShowStmtIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitShowStmtIdentifier(s)
	}
}

func (p *HiveParser) ShowStmtIdentifier() (localctx IShowStmtIdentifierContext) {
	localctx = NewShowStmtIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, HiveParserRULE_showStmtIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2106)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2104)
			p.Identifier()
		}

	case HiveParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2105)
			p.Match(HiveParserStringLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableCommentContext is an interface to support dynamic dispatch.
type ITableCommentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableCommentContext differentiates from other interfaces.
	IsTableCommentContext()
}

type TableCommentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableCommentContext() *TableCommentContext {
	var p = new(TableCommentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableComment
	return p
}

func (*TableCommentContext) IsTableCommentContext() {}

func NewTableCommentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableCommentContext {
	var p = new(TableCommentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableComment

	return p
}

func (s *TableCommentContext) GetParser() antlr.Parser { return s.parser }

func (s *TableCommentContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *TableCommentContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TableCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableCommentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableComment(s)
	}
}

func (s *TableCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableComment(s)
	}
}

func (p *HiveParser) TableComment() (localctx ITableCommentContext) {
	localctx = NewTableCommentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, HiveParserRULE_tableComment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2108)
		p.Match(HiveParserKW_COMMENT)
	}
	{
		p.SetState(2109)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITablePartitionContext is an interface to support dynamic dispatch.
type ITablePartitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablePartitionContext differentiates from other interfaces.
	IsTablePartitionContext()
}

type TablePartitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablePartitionContext() *TablePartitionContext {
	var p = new(TablePartitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tablePartition
	return p
}

func (*TablePartitionContext) IsTablePartitionContext() {}

func NewTablePartitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePartitionContext {
	var p = new(TablePartitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tablePartition

	return p
}

func (s *TablePartitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePartitionContext) KW_PARTITIONED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITIONED, 0)
}

func (s *TablePartitionContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *TablePartitionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *TablePartitionContext) AllColumnNameTypeConstraint() []IColumnNameTypeConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameTypeConstraintContext)(nil)).Elem())
	var tst = make([]IColumnNameTypeConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameTypeConstraintContext)
		}
	}

	return tst
}

func (s *TablePartitionContext) ColumnNameTypeConstraint(i int) IColumnNameTypeConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeConstraintContext)
}

func (s *TablePartitionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *TablePartitionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *TablePartitionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *TablePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePartitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTablePartition(s)
	}
}

func (s *TablePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTablePartition(s)
	}
}

func (p *HiveParser) TablePartition() (localctx ITablePartitionContext) {
	localctx = NewTablePartitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, HiveParserRULE_tablePartition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2111)
		p.Match(HiveParserKW_PARTITIONED)
	}
	{
		p.SetState(2112)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2113)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2114)
		p.ColumnNameTypeConstraint()
	}
	p.SetState(2119)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2115)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2116)
			p.ColumnNameTypeConstraint()
		}

		p.SetState(2121)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2122)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ITableBucketsContext is an interface to support dynamic dispatch.
type ITableBucketsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableBucketsContext differentiates from other interfaces.
	IsTableBucketsContext()
}

type TableBucketsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableBucketsContext() *TableBucketsContext {
	var p = new(TableBucketsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableBuckets
	return p
}

func (*TableBucketsContext) IsTableBucketsContext() {}

func NewTableBucketsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableBucketsContext {
	var p = new(TableBucketsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableBuckets

	return p
}

func (s *TableBucketsContext) GetParser() antlr.Parser { return s.parser }

func (s *TableBucketsContext) KW_CLUSTERED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CLUSTERED, 0)
}

func (s *TableBucketsContext) AllKW_BY() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_BY)
}

func (s *TableBucketsContext) KW_BY(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, i)
}

func (s *TableBucketsContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLPAREN)
}

func (s *TableBucketsContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, i)
}

func (s *TableBucketsContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *TableBucketsContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRPAREN)
}

func (s *TableBucketsContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, i)
}

func (s *TableBucketsContext) KW_INTO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTO, 0)
}

func (s *TableBucketsContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *TableBucketsContext) KW_BUCKETS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BUCKETS, 0)
}

func (s *TableBucketsContext) KW_SORTED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SORTED, 0)
}

func (s *TableBucketsContext) ColumnNameOrderList() IColumnNameOrderListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameOrderListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameOrderListContext)
}

func (s *TableBucketsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableBucketsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableBucketsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableBuckets(s)
	}
}

func (s *TableBucketsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableBuckets(s)
	}
}

func (p *HiveParser) TableBuckets() (localctx ITableBucketsContext) {
	localctx = NewTableBucketsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, HiveParserRULE_tableBuckets)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2124)
		p.Match(HiveParserKW_CLUSTERED)
	}
	{
		p.SetState(2125)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2126)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2127)
		p.ColumnNameList()
	}
	{
		p.SetState(2128)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(2135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_SORTED {
		{
			p.SetState(2129)
			p.Match(HiveParserKW_SORTED)
		}
		{
			p.SetState(2130)
			p.Match(HiveParserKW_BY)
		}
		{
			p.SetState(2131)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(2132)
			p.ColumnNameOrderList()
		}
		{
			p.SetState(2133)
			p.Match(HiveParserRPAREN)
		}

	}
	{
		p.SetState(2137)
		p.Match(HiveParserKW_INTO)
	}
	{
		p.SetState(2138)
		p.Match(HiveParserNumber)
	}
	{
		p.SetState(2139)
		p.Match(HiveParserKW_BUCKETS)
	}

	return localctx
}

// ITableSkewedContext is an interface to support dynamic dispatch.
type ITableSkewedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSkewedContext differentiates from other interfaces.
	IsTableSkewedContext()
}

type TableSkewedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSkewedContext() *TableSkewedContext {
	var p = new(TableSkewedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableSkewed
	return p
}

func (*TableSkewedContext) IsTableSkewedContext() {}

func NewTableSkewedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSkewedContext {
	var p = new(TableSkewedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableSkewed

	return p
}

func (s *TableSkewedContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSkewedContext) KW_SKEWED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SKEWED, 0)
}

func (s *TableSkewedContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *TableSkewedContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLPAREN)
}

func (s *TableSkewedContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, i)
}

func (s *TableSkewedContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *TableSkewedContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRPAREN)
}

func (s *TableSkewedContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, i)
}

func (s *TableSkewedContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *TableSkewedContext) SkewedValueElement() ISkewedValueElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedValueElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedValueElementContext)
}

func (s *TableSkewedContext) StoredAsDirs() IStoredAsDirsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStoredAsDirsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStoredAsDirsContext)
}

func (s *TableSkewedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSkewedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableSkewedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableSkewed(s)
	}
}

func (s *TableSkewedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableSkewed(s)
	}
}

func (p *HiveParser) TableSkewed() (localctx ITableSkewedContext) {
	localctx = NewTableSkewedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, HiveParserRULE_tableSkewed)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2141)
		p.Match(HiveParserKW_SKEWED)
	}
	{
		p.SetState(2142)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2143)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2144)
		p.ColumnNameList()
	}
	{
		p.SetState(2145)
		p.Match(HiveParserRPAREN)
	}
	{
		p.SetState(2146)
		p.Match(HiveParserKW_ON)
	}
	{
		p.SetState(2147)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2148)
		p.SkewedValueElement()
	}
	{
		p.SetState(2149)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(2151)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2150)
			p.StoredAsDirs()
		}

	}

	return localctx
}

// IRowFormatContext is an interface to support dynamic dispatch.
type IRowFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowFormatContext differentiates from other interfaces.
	IsRowFormatContext()
}

type RowFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowFormatContext() *RowFormatContext {
	var p = new(RowFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rowFormat
	return p
}

func (*RowFormatContext) IsRowFormatContext() {}

func NewRowFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RowFormatContext {
	var p = new(RowFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rowFormat

	return p
}

func (s *RowFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *RowFormatContext) RowFormatSerde() IRowFormatSerdeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowFormatSerdeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowFormatSerdeContext)
}

func (s *RowFormatContext) RowFormatDelimited() IRowFormatDelimitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowFormatDelimitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowFormatDelimitedContext)
}

func (s *RowFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RowFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RowFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRowFormat(s)
	}
}

func (s *RowFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRowFormat(s)
	}
}

func (p *HiveParser) RowFormat() (localctx IRowFormatContext) {
	localctx = NewRowFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, HiveParserRULE_rowFormat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2155)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2153)
			p.RowFormatSerde()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2154)
			p.RowFormatDelimited()
		}

	}

	return localctx
}

// IRecordReaderContext is an interface to support dynamic dispatch.
type IRecordReaderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecordReaderContext differentiates from other interfaces.
	IsRecordReaderContext()
}

type RecordReaderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecordReaderContext() *RecordReaderContext {
	var p = new(RecordReaderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_recordReader
	return p
}

func (*RecordReaderContext) IsRecordReaderContext() {}

func NewRecordReaderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RecordReaderContext {
	var p = new(RecordReaderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_recordReader

	return p
}

func (s *RecordReaderContext) GetParser() antlr.Parser { return s.parser }

func (s *RecordReaderContext) KW_RECORDREADER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RECORDREADER, 0)
}

func (s *RecordReaderContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *RecordReaderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecordReaderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RecordReaderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRecordReader(s)
	}
}

func (s *RecordReaderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRecordReader(s)
	}
}

func (p *HiveParser) RecordReader() (localctx IRecordReaderContext) {
	localctx = NewRecordReaderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, HiveParserRULE_recordReader)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2157)
		p.Match(HiveParserKW_RECORDREADER)
	}
	{
		p.SetState(2158)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IRecordWriterContext is an interface to support dynamic dispatch.
type IRecordWriterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecordWriterContext differentiates from other interfaces.
	IsRecordWriterContext()
}

type RecordWriterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecordWriterContext() *RecordWriterContext {
	var p = new(RecordWriterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_recordWriter
	return p
}

func (*RecordWriterContext) IsRecordWriterContext() {}

func NewRecordWriterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RecordWriterContext {
	var p = new(RecordWriterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_recordWriter

	return p
}

func (s *RecordWriterContext) GetParser() antlr.Parser { return s.parser }

func (s *RecordWriterContext) KW_RECORDWRITER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RECORDWRITER, 0)
}

func (s *RecordWriterContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *RecordWriterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecordWriterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RecordWriterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRecordWriter(s)
	}
}

func (s *RecordWriterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRecordWriter(s)
	}
}

func (p *HiveParser) RecordWriter() (localctx IRecordWriterContext) {
	localctx = NewRecordWriterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, HiveParserRULE_recordWriter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2160)
		p.Match(HiveParserKW_RECORDWRITER)
	}
	{
		p.SetState(2161)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IRowFormatSerdeContext is an interface to support dynamic dispatch.
type IRowFormatSerdeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowFormatSerdeContext differentiates from other interfaces.
	IsRowFormatSerdeContext()
}

type RowFormatSerdeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowFormatSerdeContext() *RowFormatSerdeContext {
	var p = new(RowFormatSerdeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rowFormatSerde
	return p
}

func (*RowFormatSerdeContext) IsRowFormatSerdeContext() {}

func NewRowFormatSerdeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RowFormatSerdeContext {
	var p = new(RowFormatSerdeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rowFormatSerde

	return p
}

func (s *RowFormatSerdeContext) GetParser() antlr.Parser { return s.parser }

func (s *RowFormatSerdeContext) KW_ROW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROW, 0)
}

func (s *RowFormatSerdeContext) KW_FORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FORMAT, 0)
}

func (s *RowFormatSerdeContext) KW_SERDE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDE, 0)
}

func (s *RowFormatSerdeContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *RowFormatSerdeContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *RowFormatSerdeContext) KW_SERDEPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDEPROPERTIES, 0)
}

func (s *RowFormatSerdeContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *RowFormatSerdeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RowFormatSerdeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RowFormatSerdeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRowFormatSerde(s)
	}
}

func (s *RowFormatSerdeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRowFormatSerde(s)
	}
}

func (p *HiveParser) RowFormatSerde() (localctx IRowFormatSerdeContext) {
	localctx = NewRowFormatSerdeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, HiveParserRULE_rowFormatSerde)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2163)
		p.Match(HiveParserKW_ROW)
	}
	{
		p.SetState(2164)
		p.Match(HiveParserKW_FORMAT)
	}
	{
		p.SetState(2165)
		p.Match(HiveParserKW_SERDE)
	}
	{
		p.SetState(2166)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(2170)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(2167)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(2168)
			p.Match(HiveParserKW_SERDEPROPERTIES)
		}
		{
			p.SetState(2169)
			p.TableProperties()
		}

	}

	return localctx
}

// IRowFormatDelimitedContext is an interface to support dynamic dispatch.
type IRowFormatDelimitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowFormatDelimitedContext differentiates from other interfaces.
	IsRowFormatDelimitedContext()
}

type RowFormatDelimitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowFormatDelimitedContext() *RowFormatDelimitedContext {
	var p = new(RowFormatDelimitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rowFormatDelimited
	return p
}

func (*RowFormatDelimitedContext) IsRowFormatDelimitedContext() {}

func NewRowFormatDelimitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RowFormatDelimitedContext {
	var p = new(RowFormatDelimitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rowFormatDelimited

	return p
}

func (s *RowFormatDelimitedContext) GetParser() antlr.Parser { return s.parser }

func (s *RowFormatDelimitedContext) KW_ROW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROW, 0)
}

func (s *RowFormatDelimitedContext) KW_FORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FORMAT, 0)
}

func (s *RowFormatDelimitedContext) KW_DELIMITED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DELIMITED, 0)
}

func (s *RowFormatDelimitedContext) TableRowFormatFieldIdentifier() ITableRowFormatFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatFieldIdentifierContext)
}

func (s *RowFormatDelimitedContext) TableRowFormatCollItemsIdentifier() ITableRowFormatCollItemsIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatCollItemsIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatCollItemsIdentifierContext)
}

func (s *RowFormatDelimitedContext) TableRowFormatMapKeysIdentifier() ITableRowFormatMapKeysIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatMapKeysIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatMapKeysIdentifierContext)
}

func (s *RowFormatDelimitedContext) TableRowFormatLinesIdentifier() ITableRowFormatLinesIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatLinesIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatLinesIdentifierContext)
}

func (s *RowFormatDelimitedContext) TableRowNullFormat() ITableRowNullFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowNullFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowNullFormatContext)
}

func (s *RowFormatDelimitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RowFormatDelimitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RowFormatDelimitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRowFormatDelimited(s)
	}
}

func (s *RowFormatDelimitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRowFormatDelimited(s)
	}
}

func (p *HiveParser) RowFormatDelimited() (localctx IRowFormatDelimitedContext) {
	localctx = NewRowFormatDelimitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, HiveParserRULE_rowFormatDelimited)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2172)
		p.Match(HiveParserKW_ROW)
	}
	{
		p.SetState(2173)
		p.Match(HiveParserKW_FORMAT)
	}
	{
		p.SetState(2174)
		p.Match(HiveParserKW_DELIMITED)
	}
	p.SetState(2176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_FIELDS {
		{
			p.SetState(2175)
			p.TableRowFormatFieldIdentifier()
		}

	}
	p.SetState(2179)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COLLECTION {
		{
			p.SetState(2178)
			p.TableRowFormatCollItemsIdentifier()
		}

	}
	p.SetState(2182)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2181)
			p.TableRowFormatMapKeysIdentifier()
		}

	}
	p.SetState(2185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LINES {
		{
			p.SetState(2184)
			p.TableRowFormatLinesIdentifier()
		}

	}
	p.SetState(2188)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NULL {
		{
			p.SetState(2187)
			p.TableRowNullFormat()
		}

	}

	return localctx
}

// ITableRowFormatContext is an interface to support dynamic dispatch.
type ITableRowFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableRowFormatContext differentiates from other interfaces.
	IsTableRowFormatContext()
}

type TableRowFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableRowFormatContext() *TableRowFormatContext {
	var p = new(TableRowFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableRowFormat
	return p
}

func (*TableRowFormatContext) IsTableRowFormatContext() {}

func NewTableRowFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableRowFormatContext {
	var p = new(TableRowFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableRowFormat

	return p
}

func (s *TableRowFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *TableRowFormatContext) RowFormatDelimited() IRowFormatDelimitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowFormatDelimitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowFormatDelimitedContext)
}

func (s *TableRowFormatContext) RowFormatSerde() IRowFormatSerdeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowFormatSerdeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowFormatSerdeContext)
}

func (s *TableRowFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRowFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableRowFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableRowFormat(s)
	}
}

func (s *TableRowFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableRowFormat(s)
	}
}

func (p *HiveParser) TableRowFormat() (localctx ITableRowFormatContext) {
	localctx = NewTableRowFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, HiveParserRULE_tableRowFormat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2192)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2190)
			p.RowFormatDelimited()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2191)
			p.RowFormatSerde()
		}

	}

	return localctx
}

// ITablePropertiesPrefixedContext is an interface to support dynamic dispatch.
type ITablePropertiesPrefixedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablePropertiesPrefixedContext differentiates from other interfaces.
	IsTablePropertiesPrefixedContext()
}

type TablePropertiesPrefixedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablePropertiesPrefixedContext() *TablePropertiesPrefixedContext {
	var p = new(TablePropertiesPrefixedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tablePropertiesPrefixed
	return p
}

func (*TablePropertiesPrefixedContext) IsTablePropertiesPrefixedContext() {}

func NewTablePropertiesPrefixedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePropertiesPrefixedContext {
	var p = new(TablePropertiesPrefixedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tablePropertiesPrefixed

	return p
}

func (s *TablePropertiesPrefixedContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePropertiesPrefixedContext) KW_TBLPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TBLPROPERTIES, 0)
}

func (s *TablePropertiesPrefixedContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *TablePropertiesPrefixedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePropertiesPrefixedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePropertiesPrefixedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTablePropertiesPrefixed(s)
	}
}

func (s *TablePropertiesPrefixedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTablePropertiesPrefixed(s)
	}
}

func (p *HiveParser) TablePropertiesPrefixed() (localctx ITablePropertiesPrefixedContext) {
	localctx = NewTablePropertiesPrefixedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, HiveParserRULE_tablePropertiesPrefixed)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2194)
		p.Match(HiveParserKW_TBLPROPERTIES)
	}
	{
		p.SetState(2195)
		p.TableProperties()
	}

	return localctx
}

// ITablePropertiesContext is an interface to support dynamic dispatch.
type ITablePropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablePropertiesContext differentiates from other interfaces.
	IsTablePropertiesContext()
}

type TablePropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablePropertiesContext() *TablePropertiesContext {
	var p = new(TablePropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableProperties
	return p
}

func (*TablePropertiesContext) IsTablePropertiesContext() {}

func NewTablePropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePropertiesContext {
	var p = new(TablePropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableProperties

	return p
}

func (s *TablePropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePropertiesContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *TablePropertiesContext) TablePropertiesList() ITablePropertiesListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesListContext)
}

func (s *TablePropertiesContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *TablePropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableProperties(s)
	}
}

func (s *TablePropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableProperties(s)
	}
}

func (p *HiveParser) TableProperties() (localctx ITablePropertiesContext) {
	localctx = NewTablePropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, HiveParserRULE_tableProperties)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2197)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2198)
		p.TablePropertiesList()
	}
	{
		p.SetState(2199)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ITablePropertiesListContext is an interface to support dynamic dispatch.
type ITablePropertiesListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablePropertiesListContext differentiates from other interfaces.
	IsTablePropertiesListContext()
}

type TablePropertiesListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablePropertiesListContext() *TablePropertiesListContext {
	var p = new(TablePropertiesListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tablePropertiesList
	return p
}

func (*TablePropertiesListContext) IsTablePropertiesListContext() {}

func NewTablePropertiesListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePropertiesListContext {
	var p = new(TablePropertiesListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tablePropertiesList

	return p
}

func (s *TablePropertiesListContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePropertiesListContext) AllKeyValueProperty() []IKeyValuePropertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyValuePropertyContext)(nil)).Elem())
	var tst = make([]IKeyValuePropertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyValuePropertyContext)
		}
	}

	return tst
}

func (s *TablePropertiesListContext) KeyValueProperty(i int) IKeyValuePropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyValuePropertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyValuePropertyContext)
}

func (s *TablePropertiesListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *TablePropertiesListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *TablePropertiesListContext) AllKeyProperty() []IKeyPropertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyPropertyContext)(nil)).Elem())
	var tst = make([]IKeyPropertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyPropertyContext)
		}
	}

	return tst
}

func (s *TablePropertiesListContext) KeyProperty(i int) IKeyPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyPropertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyPropertyContext)
}

func (s *TablePropertiesListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePropertiesListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePropertiesListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTablePropertiesList(s)
	}
}

func (s *TablePropertiesListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTablePropertiesList(s)
	}
}

func (p *HiveParser) TablePropertiesList() (localctx ITablePropertiesListContext) {
	localctx = NewTablePropertiesListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, HiveParserRULE_tablePropertiesList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2217)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2201)
			p.KeyValueProperty()
		}
		p.SetState(2206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(2202)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(2203)
				p.KeyValueProperty()
			}

			p.SetState(2208)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2209)
			p.KeyProperty()
		}
		p.SetState(2214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(2210)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(2211)
				p.KeyProperty()
			}

			p.SetState(2216)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IKeyValuePropertyContext is an interface to support dynamic dispatch.
type IKeyValuePropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyValuePropertyContext differentiates from other interfaces.
	IsKeyValuePropertyContext()
}

type KeyValuePropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyValuePropertyContext() *KeyValuePropertyContext {
	var p = new(KeyValuePropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_keyValueProperty
	return p
}

func (*KeyValuePropertyContext) IsKeyValuePropertyContext() {}

func NewKeyValuePropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyValuePropertyContext {
	var p = new(KeyValuePropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_keyValueProperty

	return p
}

func (s *KeyValuePropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyValuePropertyContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *KeyValuePropertyContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *KeyValuePropertyContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *KeyValuePropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyValuePropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyValuePropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterKeyValueProperty(s)
	}
}

func (s *KeyValuePropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitKeyValueProperty(s)
	}
}

func (p *HiveParser) KeyValueProperty() (localctx IKeyValuePropertyContext) {
	localctx = NewKeyValuePropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, HiveParserRULE_keyValueProperty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2219)
		p.Match(HiveParserStringLiteral)
	}
	{
		p.SetState(2220)
		p.Match(HiveParserEQUAL)
	}
	{
		p.SetState(2221)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IKeyPropertyContext is an interface to support dynamic dispatch.
type IKeyPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyPropertyContext differentiates from other interfaces.
	IsKeyPropertyContext()
}

type KeyPropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyPropertyContext() *KeyPropertyContext {
	var p = new(KeyPropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_keyProperty
	return p
}

func (*KeyPropertyContext) IsKeyPropertyContext() {}

func NewKeyPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyPropertyContext {
	var p = new(KeyPropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_keyProperty

	return p
}

func (s *KeyPropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyPropertyContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *KeyPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyPropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterKeyProperty(s)
	}
}

func (s *KeyPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitKeyProperty(s)
	}
}

func (p *HiveParser) KeyProperty() (localctx IKeyPropertyContext) {
	localctx = NewKeyPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, HiveParserRULE_keyProperty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2223)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITableRowFormatFieldIdentifierContext is an interface to support dynamic dispatch.
type ITableRowFormatFieldIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableRowFormatFieldIdentifierContext differentiates from other interfaces.
	IsTableRowFormatFieldIdentifierContext()
}

type TableRowFormatFieldIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableRowFormatFieldIdentifierContext() *TableRowFormatFieldIdentifierContext {
	var p = new(TableRowFormatFieldIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableRowFormatFieldIdentifier
	return p
}

func (*TableRowFormatFieldIdentifierContext) IsTableRowFormatFieldIdentifierContext() {}

func NewTableRowFormatFieldIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableRowFormatFieldIdentifierContext {
	var p = new(TableRowFormatFieldIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableRowFormatFieldIdentifier

	return p
}

func (s *TableRowFormatFieldIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TableRowFormatFieldIdentifierContext) KW_FIELDS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FIELDS, 0)
}

func (s *TableRowFormatFieldIdentifierContext) KW_TERMINATED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TERMINATED, 0)
}

func (s *TableRowFormatFieldIdentifierContext) AllKW_BY() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_BY)
}

func (s *TableRowFormatFieldIdentifierContext) KW_BY(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, i)
}

func (s *TableRowFormatFieldIdentifierContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *TableRowFormatFieldIdentifierContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *TableRowFormatFieldIdentifierContext) KW_ESCAPED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ESCAPED, 0)
}

func (s *TableRowFormatFieldIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRowFormatFieldIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableRowFormatFieldIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableRowFormatFieldIdentifier(s)
	}
}

func (s *TableRowFormatFieldIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableRowFormatFieldIdentifier(s)
	}
}

func (p *HiveParser) TableRowFormatFieldIdentifier() (localctx ITableRowFormatFieldIdentifierContext) {
	localctx = NewTableRowFormatFieldIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, HiveParserRULE_tableRowFormatFieldIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2225)
		p.Match(HiveParserKW_FIELDS)
	}
	{
		p.SetState(2226)
		p.Match(HiveParserKW_TERMINATED)
	}
	{
		p.SetState(2227)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2228)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(2232)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ESCAPED {
		{
			p.SetState(2229)
			p.Match(HiveParserKW_ESCAPED)
		}
		{
			p.SetState(2230)
			p.Match(HiveParserKW_BY)
		}
		{
			p.SetState(2231)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// ITableRowFormatCollItemsIdentifierContext is an interface to support dynamic dispatch.
type ITableRowFormatCollItemsIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableRowFormatCollItemsIdentifierContext differentiates from other interfaces.
	IsTableRowFormatCollItemsIdentifierContext()
}

type TableRowFormatCollItemsIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableRowFormatCollItemsIdentifierContext() *TableRowFormatCollItemsIdentifierContext {
	var p = new(TableRowFormatCollItemsIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableRowFormatCollItemsIdentifier
	return p
}

func (*TableRowFormatCollItemsIdentifierContext) IsTableRowFormatCollItemsIdentifierContext() {}

func NewTableRowFormatCollItemsIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableRowFormatCollItemsIdentifierContext {
	var p = new(TableRowFormatCollItemsIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableRowFormatCollItemsIdentifier

	return p
}

func (s *TableRowFormatCollItemsIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TableRowFormatCollItemsIdentifierContext) KW_COLLECTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLLECTION, 0)
}

func (s *TableRowFormatCollItemsIdentifierContext) KW_ITEMS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ITEMS, 0)
}

func (s *TableRowFormatCollItemsIdentifierContext) KW_TERMINATED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TERMINATED, 0)
}

func (s *TableRowFormatCollItemsIdentifierContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *TableRowFormatCollItemsIdentifierContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TableRowFormatCollItemsIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRowFormatCollItemsIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableRowFormatCollItemsIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableRowFormatCollItemsIdentifier(s)
	}
}

func (s *TableRowFormatCollItemsIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableRowFormatCollItemsIdentifier(s)
	}
}

func (p *HiveParser) TableRowFormatCollItemsIdentifier() (localctx ITableRowFormatCollItemsIdentifierContext) {
	localctx = NewTableRowFormatCollItemsIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, HiveParserRULE_tableRowFormatCollItemsIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2234)
		p.Match(HiveParserKW_COLLECTION)
	}
	{
		p.SetState(2235)
		p.Match(HiveParserKW_ITEMS)
	}
	{
		p.SetState(2236)
		p.Match(HiveParserKW_TERMINATED)
	}
	{
		p.SetState(2237)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2238)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITableRowFormatMapKeysIdentifierContext is an interface to support dynamic dispatch.
type ITableRowFormatMapKeysIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableRowFormatMapKeysIdentifierContext differentiates from other interfaces.
	IsTableRowFormatMapKeysIdentifierContext()
}

type TableRowFormatMapKeysIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableRowFormatMapKeysIdentifierContext() *TableRowFormatMapKeysIdentifierContext {
	var p = new(TableRowFormatMapKeysIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableRowFormatMapKeysIdentifier
	return p
}

func (*TableRowFormatMapKeysIdentifierContext) IsTableRowFormatMapKeysIdentifierContext() {}

func NewTableRowFormatMapKeysIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableRowFormatMapKeysIdentifierContext {
	var p = new(TableRowFormatMapKeysIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableRowFormatMapKeysIdentifier

	return p
}

func (s *TableRowFormatMapKeysIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TableRowFormatMapKeysIdentifierContext) KW_MAP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAP, 0)
}

func (s *TableRowFormatMapKeysIdentifierContext) KW_KEYS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEYS, 0)
}

func (s *TableRowFormatMapKeysIdentifierContext) KW_TERMINATED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TERMINATED, 0)
}

func (s *TableRowFormatMapKeysIdentifierContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *TableRowFormatMapKeysIdentifierContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TableRowFormatMapKeysIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRowFormatMapKeysIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableRowFormatMapKeysIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableRowFormatMapKeysIdentifier(s)
	}
}

func (s *TableRowFormatMapKeysIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableRowFormatMapKeysIdentifier(s)
	}
}

func (p *HiveParser) TableRowFormatMapKeysIdentifier() (localctx ITableRowFormatMapKeysIdentifierContext) {
	localctx = NewTableRowFormatMapKeysIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, HiveParserRULE_tableRowFormatMapKeysIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2240)
		p.Match(HiveParserKW_MAP)
	}
	{
		p.SetState(2241)
		p.Match(HiveParserKW_KEYS)
	}
	{
		p.SetState(2242)
		p.Match(HiveParserKW_TERMINATED)
	}
	{
		p.SetState(2243)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2244)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITableRowFormatLinesIdentifierContext is an interface to support dynamic dispatch.
type ITableRowFormatLinesIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableRowFormatLinesIdentifierContext differentiates from other interfaces.
	IsTableRowFormatLinesIdentifierContext()
}

type TableRowFormatLinesIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableRowFormatLinesIdentifierContext() *TableRowFormatLinesIdentifierContext {
	var p = new(TableRowFormatLinesIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableRowFormatLinesIdentifier
	return p
}

func (*TableRowFormatLinesIdentifierContext) IsTableRowFormatLinesIdentifierContext() {}

func NewTableRowFormatLinesIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableRowFormatLinesIdentifierContext {
	var p = new(TableRowFormatLinesIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableRowFormatLinesIdentifier

	return p
}

func (s *TableRowFormatLinesIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TableRowFormatLinesIdentifierContext) KW_LINES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LINES, 0)
}

func (s *TableRowFormatLinesIdentifierContext) KW_TERMINATED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TERMINATED, 0)
}

func (s *TableRowFormatLinesIdentifierContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *TableRowFormatLinesIdentifierContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TableRowFormatLinesIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRowFormatLinesIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableRowFormatLinesIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableRowFormatLinesIdentifier(s)
	}
}

func (s *TableRowFormatLinesIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableRowFormatLinesIdentifier(s)
	}
}

func (p *HiveParser) TableRowFormatLinesIdentifier() (localctx ITableRowFormatLinesIdentifierContext) {
	localctx = NewTableRowFormatLinesIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, HiveParserRULE_tableRowFormatLinesIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2246)
		p.Match(HiveParserKW_LINES)
	}
	{
		p.SetState(2247)
		p.Match(HiveParserKW_TERMINATED)
	}
	{
		p.SetState(2248)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(2249)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITableRowNullFormatContext is an interface to support dynamic dispatch.
type ITableRowNullFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableRowNullFormatContext differentiates from other interfaces.
	IsTableRowNullFormatContext()
}

type TableRowNullFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableRowNullFormatContext() *TableRowNullFormatContext {
	var p = new(TableRowNullFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableRowNullFormat
	return p
}

func (*TableRowNullFormatContext) IsTableRowNullFormatContext() {}

func NewTableRowNullFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableRowNullFormatContext {
	var p = new(TableRowNullFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableRowNullFormat

	return p
}

func (s *TableRowNullFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *TableRowNullFormatContext) KW_NULL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NULL, 0)
}

func (s *TableRowNullFormatContext) KW_DEFINED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFINED, 0)
}

func (s *TableRowNullFormatContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *TableRowNullFormatContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TableRowNullFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRowNullFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableRowNullFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableRowNullFormat(s)
	}
}

func (s *TableRowNullFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableRowNullFormat(s)
	}
}

func (p *HiveParser) TableRowNullFormat() (localctx ITableRowNullFormatContext) {
	localctx = NewTableRowNullFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, HiveParserRULE_tableRowNullFormat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2251)
		p.Match(HiveParserKW_NULL)
	}
	{
		p.SetState(2252)
		p.Match(HiveParserKW_DEFINED)
	}
	{
		p.SetState(2253)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(2254)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// ITableFileFormatContext is an interface to support dynamic dispatch.
type ITableFileFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableFileFormatContext differentiates from other interfaces.
	IsTableFileFormatContext()
}

type TableFileFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableFileFormatContext() *TableFileFormatContext {
	var p = new(TableFileFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableFileFormat
	return p
}

func (*TableFileFormatContext) IsTableFileFormatContext() {}

func NewTableFileFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableFileFormatContext {
	var p = new(TableFileFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableFileFormat

	return p
}

func (s *TableFileFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *TableFileFormatContext) KW_STORED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STORED, 0)
}

func (s *TableFileFormatContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *TableFileFormatContext) KW_INPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTFORMAT, 0)
}

func (s *TableFileFormatContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *TableFileFormatContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *TableFileFormatContext) KW_OUTPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTPUTFORMAT, 0)
}

func (s *TableFileFormatContext) KW_INPUTDRIVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTDRIVER, 0)
}

func (s *TableFileFormatContext) KW_OUTPUTDRIVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTPUTDRIVER, 0)
}

func (s *TableFileFormatContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *TableFileFormatContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *TableFileFormatContext) KW_SERDEPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDEPROPERTIES, 0)
}

func (s *TableFileFormatContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *TableFileFormatContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableFileFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableFileFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableFileFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableFileFormat(s)
	}
}

func (s *TableFileFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableFileFormat(s)
	}
}

func (p *HiveParser) TableFileFormat() (localctx ITableFileFormatContext) {
	localctx = NewTableFileFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, HiveParserRULE_tableFileFormat)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2279)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2256)
			p.Match(HiveParserKW_STORED)
		}
		{
			p.SetState(2257)
			p.Match(HiveParserKW_AS)
		}
		{
			p.SetState(2258)
			p.Match(HiveParserKW_INPUTFORMAT)
		}
		{
			p.SetState(2259)
			p.Match(HiveParserStringLiteral)
		}
		{
			p.SetState(2260)
			p.Match(HiveParserKW_OUTPUTFORMAT)
		}
		{
			p.SetState(2261)
			p.Match(HiveParserStringLiteral)
		}
		p.SetState(2266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_INPUTDRIVER {
			{
				p.SetState(2262)
				p.Match(HiveParserKW_INPUTDRIVER)
			}
			{
				p.SetState(2263)
				p.Match(HiveParserStringLiteral)
			}
			{
				p.SetState(2264)
				p.Match(HiveParserKW_OUTPUTDRIVER)
			}
			{
				p.SetState(2265)
				p.Match(HiveParserStringLiteral)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2268)
			p.Match(HiveParserKW_STORED)
		}
		{
			p.SetState(2269)
			p.Match(HiveParserKW_BY)
		}
		{
			p.SetState(2270)
			p.Match(HiveParserStringLiteral)
		}
		p.SetState(2274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WITH {
			{
				p.SetState(2271)
				p.Match(HiveParserKW_WITH)
			}
			{
				p.SetState(2272)
				p.Match(HiveParserKW_SERDEPROPERTIES)
			}
			{
				p.SetState(2273)
				p.TableProperties()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2276)
			p.Match(HiveParserKW_STORED)
		}
		{
			p.SetState(2277)
			p.Match(HiveParserKW_AS)
		}
		{
			p.SetState(2278)
			p.Identifier()
		}

	}

	return localctx
}

// ITableLocationContext is an interface to support dynamic dispatch.
type ITableLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableLocationContext differentiates from other interfaces.
	IsTableLocationContext()
}

type TableLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableLocationContext() *TableLocationContext {
	var p = new(TableLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableLocation
	return p
}

func (*TableLocationContext) IsTableLocationContext() {}

func NewTableLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableLocationContext {
	var p = new(TableLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableLocation

	return p
}

func (s *TableLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *TableLocationContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *TableLocationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TableLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableLocation(s)
	}
}

func (s *TableLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableLocation(s)
	}
}

func (p *HiveParser) TableLocation() (localctx ITableLocationContext) {
	localctx = NewTableLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, HiveParserRULE_tableLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2281)
		p.Match(HiveParserKW_LOCATION)
	}
	{
		p.SetState(2282)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IColumnNameTypeListContext is an interface to support dynamic dispatch.
type IColumnNameTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameTypeListContext differentiates from other interfaces.
	IsColumnNameTypeListContext()
}

type ColumnNameTypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameTypeListContext() *ColumnNameTypeListContext {
	var p = new(ColumnNameTypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameTypeList
	return p
}

func (*ColumnNameTypeListContext) IsColumnNameTypeListContext() {}

func NewColumnNameTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameTypeListContext {
	var p = new(ColumnNameTypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameTypeList

	return p
}

func (s *ColumnNameTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameTypeListContext) AllColumnNameType() []IColumnNameTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameTypeContext)(nil)).Elem())
	var tst = make([]IColumnNameTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameTypeContext)
		}
	}

	return tst
}

func (s *ColumnNameTypeListContext) ColumnNameType(i int) IColumnNameTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeContext)
}

func (s *ColumnNameTypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnNameTypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnNameTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameTypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameTypeList(s)
	}
}

func (s *ColumnNameTypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameTypeList(s)
	}
}

func (p *HiveParser) ColumnNameTypeList() (localctx IColumnNameTypeListContext) {
	localctx = NewColumnNameTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, HiveParserRULE_columnNameTypeList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2284)
		p.ColumnNameType()
	}
	p.SetState(2289)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2285)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(2286)
				p.ColumnNameType()
			}

		}
		p.SetState(2291)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())
	}

	return localctx
}

// IColumnNameTypeOrConstraintListContext is an interface to support dynamic dispatch.
type IColumnNameTypeOrConstraintListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameTypeOrConstraintListContext differentiates from other interfaces.
	IsColumnNameTypeOrConstraintListContext()
}

type ColumnNameTypeOrConstraintListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameTypeOrConstraintListContext() *ColumnNameTypeOrConstraintListContext {
	var p = new(ColumnNameTypeOrConstraintListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameTypeOrConstraintList
	return p
}

func (*ColumnNameTypeOrConstraintListContext) IsColumnNameTypeOrConstraintListContext() {}

func NewColumnNameTypeOrConstraintListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameTypeOrConstraintListContext {
	var p = new(ColumnNameTypeOrConstraintListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameTypeOrConstraintList

	return p
}

func (s *ColumnNameTypeOrConstraintListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameTypeOrConstraintListContext) AllColumnNameTypeOrConstraint() []IColumnNameTypeOrConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameTypeOrConstraintContext)(nil)).Elem())
	var tst = make([]IColumnNameTypeOrConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameTypeOrConstraintContext)
		}
	}

	return tst
}

func (s *ColumnNameTypeOrConstraintListContext) ColumnNameTypeOrConstraint(i int) IColumnNameTypeOrConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeOrConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeOrConstraintContext)
}

func (s *ColumnNameTypeOrConstraintListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnNameTypeOrConstraintListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnNameTypeOrConstraintListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameTypeOrConstraintListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameTypeOrConstraintListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameTypeOrConstraintList(s)
	}
}

func (s *ColumnNameTypeOrConstraintListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameTypeOrConstraintList(s)
	}
}

func (p *HiveParser) ColumnNameTypeOrConstraintList() (localctx IColumnNameTypeOrConstraintListContext) {
	localctx = NewColumnNameTypeOrConstraintListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, HiveParserRULE_columnNameTypeOrConstraintList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2292)
		p.ColumnNameTypeOrConstraint()
	}
	p.SetState(2297)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2293)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2294)
			p.ColumnNameTypeOrConstraint()
		}

		p.SetState(2299)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnNameColonTypeListContext is an interface to support dynamic dispatch.
type IColumnNameColonTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameColonTypeListContext differentiates from other interfaces.
	IsColumnNameColonTypeListContext()
}

type ColumnNameColonTypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameColonTypeListContext() *ColumnNameColonTypeListContext {
	var p = new(ColumnNameColonTypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameColonTypeList
	return p
}

func (*ColumnNameColonTypeListContext) IsColumnNameColonTypeListContext() {}

func NewColumnNameColonTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameColonTypeListContext {
	var p = new(ColumnNameColonTypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameColonTypeList

	return p
}

func (s *ColumnNameColonTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameColonTypeListContext) AllColumnNameColonType() []IColumnNameColonTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameColonTypeContext)(nil)).Elem())
	var tst = make([]IColumnNameColonTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameColonTypeContext)
		}
	}

	return tst
}

func (s *ColumnNameColonTypeListContext) ColumnNameColonType(i int) IColumnNameColonTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameColonTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameColonTypeContext)
}

func (s *ColumnNameColonTypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnNameColonTypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnNameColonTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameColonTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameColonTypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameColonTypeList(s)
	}
}

func (s *ColumnNameColonTypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameColonTypeList(s)
	}
}

func (p *HiveParser) ColumnNameColonTypeList() (localctx IColumnNameColonTypeListContext) {
	localctx = NewColumnNameColonTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, HiveParserRULE_columnNameColonTypeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2300)
		p.ColumnNameColonType()
	}
	p.SetState(2305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2301)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2302)
			p.ColumnNameColonType()
		}

		p.SetState(2307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnNameListContext is an interface to support dynamic dispatch.
type IColumnNameListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameListContext differentiates from other interfaces.
	IsColumnNameListContext()
}

type ColumnNameListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameListContext() *ColumnNameListContext {
	var p = new(ColumnNameListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameList
	return p
}

func (*ColumnNameListContext) IsColumnNameListContext() {}

func NewColumnNameListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameListContext {
	var p = new(ColumnNameListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameList

	return p
}

func (s *ColumnNameListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameListContext) AllColumnName() []IColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameContext)(nil)).Elem())
	var tst = make([]IColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameContext)
		}
	}

	return tst
}

func (s *ColumnNameListContext) ColumnName(i int) IColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *ColumnNameListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnNameListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnNameListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameList(s)
	}
}

func (s *ColumnNameListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameList(s)
	}
}

func (p *HiveParser) ColumnNameList() (localctx IColumnNameListContext) {
	localctx = NewColumnNameListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, HiveParserRULE_columnNameList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2308)
		p.ColumnName()
	}
	p.SetState(2313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2309)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2310)
			p.ColumnName()
		}

		p.SetState(2315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnNameContext is an interface to support dynamic dispatch.
type IColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameContext differentiates from other interfaces.
	IsColumnNameContext()
}

type ColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameContext() *ColumnNameContext {
	var p = new(ColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnName
	return p
}

func (*ColumnNameContext) IsColumnNameContext() {}

func NewColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameContext {
	var p = new(ColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnName

	return p
}

func (s *ColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnName(s)
	}
}

func (s *ColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnName(s)
	}
}

func (p *HiveParser) ColumnName() (localctx IColumnNameContext) {
	localctx = NewColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, HiveParserRULE_columnName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2316)
		p.Identifier()
	}

	return localctx
}

// IExtColumnNameContext is an interface to support dynamic dispatch.
type IExtColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtColumnNameContext differentiates from other interfaces.
	IsExtColumnNameContext()
}

type ExtColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtColumnNameContext() *ExtColumnNameContext {
	var p = new(ExtColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_extColumnName
	return p
}

func (*ExtColumnNameContext) IsExtColumnNameContext() {}

func NewExtColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtColumnNameContext {
	var p = new(ExtColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_extColumnName

	return p
}

func (s *ExtColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtColumnNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ExtColumnNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExtColumnNameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(HiveParserDOT)
}

func (s *ExtColumnNameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, i)
}

func (s *ExtColumnNameContext) AllKW_ELEM_TYPE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_ELEM_TYPE)
}

func (s *ExtColumnNameContext) KW_ELEM_TYPE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ELEM_TYPE, i)
}

func (s *ExtColumnNameContext) AllKW_KEY_TYPE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_KEY_TYPE)
}

func (s *ExtColumnNameContext) KW_KEY_TYPE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY_TYPE, i)
}

func (s *ExtColumnNameContext) AllKW_VALUE_TYPE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_VALUE_TYPE)
}

func (s *ExtColumnNameContext) KW_VALUE_TYPE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALUE_TYPE, i)
}

func (s *ExtColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExtColumnName(s)
	}
}

func (s *ExtColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExtColumnName(s)
	}
}

func (p *HiveParser) ExtColumnName() (localctx IExtColumnNameContext) {
	localctx = NewExtColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, HiveParserRULE_extColumnName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2318)
		p.Identifier()
	}
	p.SetState(2328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserDOT {
		{
			p.SetState(2319)
			p.Match(HiveParserDOT)
		}
		p.SetState(2324)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2320)
				p.Match(HiveParserKW_ELEM_TYPE)
			}

		case 2:
			{
				p.SetState(2321)
				p.Match(HiveParserKW_KEY_TYPE)
			}

		case 3:
			{
				p.SetState(2322)
				p.Match(HiveParserKW_VALUE_TYPE)
			}

		case 4:
			{
				p.SetState(2323)
				p.Identifier()
			}

		}

		p.SetState(2330)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnNameOrderListContext is an interface to support dynamic dispatch.
type IColumnNameOrderListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameOrderListContext differentiates from other interfaces.
	IsColumnNameOrderListContext()
}

type ColumnNameOrderListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameOrderListContext() *ColumnNameOrderListContext {
	var p = new(ColumnNameOrderListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameOrderList
	return p
}

func (*ColumnNameOrderListContext) IsColumnNameOrderListContext() {}

func NewColumnNameOrderListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameOrderListContext {
	var p = new(ColumnNameOrderListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameOrderList

	return p
}

func (s *ColumnNameOrderListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameOrderListContext) AllColumnNameOrder() []IColumnNameOrderContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameOrderContext)(nil)).Elem())
	var tst = make([]IColumnNameOrderContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameOrderContext)
		}
	}

	return tst
}

func (s *ColumnNameOrderListContext) ColumnNameOrder(i int) IColumnNameOrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameOrderContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameOrderContext)
}

func (s *ColumnNameOrderListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnNameOrderListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnNameOrderListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameOrderListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameOrderListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameOrderList(s)
	}
}

func (s *ColumnNameOrderListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameOrderList(s)
	}
}

func (p *HiveParser) ColumnNameOrderList() (localctx IColumnNameOrderListContext) {
	localctx = NewColumnNameOrderListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, HiveParserRULE_columnNameOrderList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2331)
		p.ColumnNameOrder()
	}
	p.SetState(2336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2332)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2333)
			p.ColumnNameOrder()
		}

		p.SetState(2338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnParenthesesListContext is an interface to support dynamic dispatch.
type IColumnParenthesesListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnParenthesesListContext differentiates from other interfaces.
	IsColumnParenthesesListContext()
}

type ColumnParenthesesListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnParenthesesListContext() *ColumnParenthesesListContext {
	var p = new(ColumnParenthesesListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnParenthesesList
	return p
}

func (*ColumnParenthesesListContext) IsColumnParenthesesListContext() {}

func NewColumnParenthesesListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnParenthesesListContext {
	var p = new(ColumnParenthesesListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnParenthesesList

	return p
}

func (s *ColumnParenthesesListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnParenthesesListContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ColumnParenthesesListContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *ColumnParenthesesListContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ColumnParenthesesListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnParenthesesListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnParenthesesListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnParenthesesList(s)
	}
}

func (s *ColumnParenthesesListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnParenthesesList(s)
	}
}

func (p *HiveParser) ColumnParenthesesList() (localctx IColumnParenthesesListContext) {
	localctx = NewColumnParenthesesListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, HiveParserRULE_columnParenthesesList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2339)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2340)
		p.ColumnNameList()
	}
	{
		p.SetState(2341)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IEnableValidateSpecificationContext is an interface to support dynamic dispatch.
type IEnableValidateSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnableValidateSpecificationContext differentiates from other interfaces.
	IsEnableValidateSpecificationContext()
}

type EnableValidateSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnableValidateSpecificationContext() *EnableValidateSpecificationContext {
	var p = new(EnableValidateSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_enableValidateSpecification
	return p
}

func (*EnableValidateSpecificationContext) IsEnableValidateSpecificationContext() {}

func NewEnableValidateSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnableValidateSpecificationContext {
	var p = new(EnableValidateSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_enableValidateSpecification

	return p
}

func (s *EnableValidateSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnableValidateSpecificationContext) EnableSpecification() IEnableSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableSpecificationContext)
}

func (s *EnableValidateSpecificationContext) ValidateSpecification() IValidateSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidateSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValidateSpecificationContext)
}

func (s *EnableValidateSpecificationContext) EnforcedSpecification() IEnforcedSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnforcedSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnforcedSpecificationContext)
}

func (s *EnableValidateSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableValidateSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnableValidateSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterEnableValidateSpecification(s)
	}
}

func (s *EnableValidateSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitEnableValidateSpecification(s)
	}
}

func (p *HiveParser) EnableValidateSpecification() (localctx IEnableValidateSpecificationContext) {
	localctx = NewEnableValidateSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, HiveParserRULE_enableValidateSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2348)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ENABLE, HiveParserKW_DISABLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2343)
			p.EnableSpecification()
		}
		p.SetState(2345)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_VALIDATE || _la == HiveParserKW_NOVALIDATE {
			{
				p.SetState(2344)
				p.ValidateSpecification()
			}

		}

	case HiveParserKW_NOT, HiveParserKW_ENFORCED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2347)
			p.EnforcedSpecification()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnableSpecificationContext is an interface to support dynamic dispatch.
type IEnableSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnableSpecificationContext differentiates from other interfaces.
	IsEnableSpecificationContext()
}

type EnableSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnableSpecificationContext() *EnableSpecificationContext {
	var p = new(EnableSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_enableSpecification
	return p
}

func (*EnableSpecificationContext) IsEnableSpecificationContext() {}

func NewEnableSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnableSpecificationContext {
	var p = new(EnableSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_enableSpecification

	return p
}

func (s *EnableSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnableSpecificationContext) KW_ENABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ENABLE, 0)
}

func (s *EnableSpecificationContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISABLE, 0)
}

func (s *EnableSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnableSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterEnableSpecification(s)
	}
}

func (s *EnableSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitEnableSpecification(s)
	}
}

func (p *HiveParser) EnableSpecification() (localctx IEnableSpecificationContext) {
	localctx = NewEnableSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, HiveParserRULE_enableSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2350)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IValidateSpecificationContext is an interface to support dynamic dispatch.
type IValidateSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValidateSpecificationContext differentiates from other interfaces.
	IsValidateSpecificationContext()
}

type ValidateSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValidateSpecificationContext() *ValidateSpecificationContext {
	var p = new(ValidateSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_validateSpecification
	return p
}

func (*ValidateSpecificationContext) IsValidateSpecificationContext() {}

func NewValidateSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValidateSpecificationContext {
	var p = new(ValidateSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_validateSpecification

	return p
}

func (s *ValidateSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ValidateSpecificationContext) KW_VALIDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALIDATE, 0)
}

func (s *ValidateSpecificationContext) KW_NOVALIDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOVALIDATE, 0)
}

func (s *ValidateSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValidateSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValidateSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterValidateSpecification(s)
	}
}

func (s *ValidateSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitValidateSpecification(s)
	}
}

func (p *HiveParser) ValidateSpecification() (localctx IValidateSpecificationContext) {
	localctx = NewValidateSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, HiveParserRULE_validateSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2352)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_VALIDATE || _la == HiveParserKW_NOVALIDATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEnforcedSpecificationContext is an interface to support dynamic dispatch.
type IEnforcedSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnforcedSpecificationContext differentiates from other interfaces.
	IsEnforcedSpecificationContext()
}

type EnforcedSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnforcedSpecificationContext() *EnforcedSpecificationContext {
	var p = new(EnforcedSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_enforcedSpecification
	return p
}

func (*EnforcedSpecificationContext) IsEnforcedSpecificationContext() {}

func NewEnforcedSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnforcedSpecificationContext {
	var p = new(EnforcedSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_enforcedSpecification

	return p
}

func (s *EnforcedSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnforcedSpecificationContext) KW_ENFORCED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ENFORCED, 0)
}

func (s *EnforcedSpecificationContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *EnforcedSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnforcedSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnforcedSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterEnforcedSpecification(s)
	}
}

func (s *EnforcedSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitEnforcedSpecification(s)
	}
}

func (p *HiveParser) EnforcedSpecification() (localctx IEnforcedSpecificationContext) {
	localctx = NewEnforcedSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, HiveParserRULE_enforcedSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2357)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ENFORCED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2354)
			p.Match(HiveParserKW_ENFORCED)
		}

	case HiveParserKW_NOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2355)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(2356)
			p.Match(HiveParserKW_ENFORCED)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRelySpecificationContext is an interface to support dynamic dispatch.
type IRelySpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelySpecificationContext differentiates from other interfaces.
	IsRelySpecificationContext()
}

type RelySpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelySpecificationContext() *RelySpecificationContext {
	var p = new(RelySpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_relySpecification
	return p
}

func (*RelySpecificationContext) IsRelySpecificationContext() {}

func NewRelySpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelySpecificationContext {
	var p = new(RelySpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_relySpecification

	return p
}

func (s *RelySpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelySpecificationContext) KW_RELY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RELY, 0)
}

func (s *RelySpecificationContext) KW_NORELY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NORELY, 0)
}

func (s *RelySpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelySpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelySpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRelySpecification(s)
	}
}

func (s *RelySpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRelySpecification(s)
	}
}

func (p *HiveParser) RelySpecification() (localctx IRelySpecificationContext) {
	localctx = NewRelySpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, HiveParserRULE_relySpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2363)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_RELY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2359)
			p.Match(HiveParserKW_RELY)
		}

	case HiveParserEOF, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_COMMENT, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_NORELY, HiveParserCOMMA, HiveParserRPAREN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_NORELY {
			{
				p.SetState(2360)
				p.Match(HiveParserKW_NORELY)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateConstraintContext is an interface to support dynamic dispatch.
type ICreateConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateConstraintContext differentiates from other interfaces.
	IsCreateConstraintContext()
}

type CreateConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateConstraintContext() *CreateConstraintContext {
	var p = new(CreateConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createConstraint
	return p
}

func (*CreateConstraintContext) IsCreateConstraintContext() {}

func NewCreateConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateConstraintContext {
	var p = new(CreateConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createConstraint

	return p
}

func (s *CreateConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateConstraintContext) TableLevelConstraint() ITableLevelConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLevelConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableLevelConstraintContext)
}

func (s *CreateConstraintContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *CreateConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateConstraintContext) ConstraintOptsCreate() IConstraintOptsCreateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsCreateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsCreateContext)
}

func (s *CreateConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateConstraint(s)
	}
}

func (s *CreateConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateConstraint(s)
	}
}

func (p *HiveParser) CreateConstraint() (localctx ICreateConstraintContext) {
	localctx = NewCreateConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, HiveParserRULE_createConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2367)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CONSTRAINT {
		{
			p.SetState(2365)
			p.Match(HiveParserKW_CONSTRAINT)
		}
		{
			p.SetState(2366)
			p.Identifier()
		}

	}
	{
		p.SetState(2369)
		p.TableLevelConstraint()
	}
	p.SetState(2371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2370)
			p.ConstraintOptsCreate()
		}

	}

	return localctx
}

// IAlterConstraintWithNameContext is an interface to support dynamic dispatch.
type IAlterConstraintWithNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterConstraintWithNameContext differentiates from other interfaces.
	IsAlterConstraintWithNameContext()
}

type AlterConstraintWithNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterConstraintWithNameContext() *AlterConstraintWithNameContext {
	var p = new(AlterConstraintWithNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterConstraintWithName
	return p
}

func (*AlterConstraintWithNameContext) IsAlterConstraintWithNameContext() {}

func NewAlterConstraintWithNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterConstraintWithNameContext {
	var p = new(AlterConstraintWithNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterConstraintWithName

	return p
}

func (s *AlterConstraintWithNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterConstraintWithNameContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *AlterConstraintWithNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterConstraintWithNameContext) TableLevelConstraint() ITableLevelConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLevelConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableLevelConstraintContext)
}

func (s *AlterConstraintWithNameContext) ConstraintOptsAlter() IConstraintOptsAlterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsAlterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsAlterContext)
}

func (s *AlterConstraintWithNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterConstraintWithNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterConstraintWithNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterConstraintWithName(s)
	}
}

func (s *AlterConstraintWithNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterConstraintWithName(s)
	}
}

func (p *HiveParser) AlterConstraintWithName() (localctx IAlterConstraintWithNameContext) {
	localctx = NewAlterConstraintWithNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, HiveParserRULE_alterConstraintWithName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2373)
		p.Match(HiveParserKW_CONSTRAINT)
	}
	{
		p.SetState(2374)
		p.Identifier()
	}
	{
		p.SetState(2375)
		p.TableLevelConstraint()
	}
	p.SetState(2377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2376)
			p.ConstraintOptsAlter()
		}

	}

	return localctx
}

// ITableLevelConstraintContext is an interface to support dynamic dispatch.
type ITableLevelConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableLevelConstraintContext differentiates from other interfaces.
	IsTableLevelConstraintContext()
}

type TableLevelConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableLevelConstraintContext() *TableLevelConstraintContext {
	var p = new(TableLevelConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableLevelConstraint
	return p
}

func (*TableLevelConstraintContext) IsTableLevelConstraintContext() {}

func NewTableLevelConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableLevelConstraintContext {
	var p = new(TableLevelConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableLevelConstraint

	return p
}

func (s *TableLevelConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *TableLevelConstraintContext) PkUkConstraint() IPkUkConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkUkConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkUkConstraintContext)
}

func (s *TableLevelConstraintContext) CheckConstraint() ICheckConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckConstraintContext)
}

func (s *TableLevelConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableLevelConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableLevelConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableLevelConstraint(s)
	}
}

func (s *TableLevelConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableLevelConstraint(s)
	}
}

func (p *HiveParser) TableLevelConstraint() (localctx ITableLevelConstraintContext) {
	localctx = NewTableLevelConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, HiveParserRULE_tableLevelConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2381)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_PRIMARY, HiveParserKW_UNIQUE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2379)
			p.PkUkConstraint()
		}

	case HiveParserKW_CHECK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2380)
			p.CheckConstraint()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPkUkConstraintContext is an interface to support dynamic dispatch.
type IPkUkConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPkCols returns the pkCols rule contexts.
	GetPkCols() IColumnParenthesesListContext

	// SetPkCols sets the pkCols rule contexts.
	SetPkCols(IColumnParenthesesListContext)

	// IsPkUkConstraintContext differentiates from other interfaces.
	IsPkUkConstraintContext()
}

type PkUkConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	pkCols IColumnParenthesesListContext
}

func NewEmptyPkUkConstraintContext() *PkUkConstraintContext {
	var p = new(PkUkConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_pkUkConstraint
	return p
}

func (*PkUkConstraintContext) IsPkUkConstraintContext() {}

func NewPkUkConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkUkConstraintContext {
	var p = new(PkUkConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_pkUkConstraint

	return p
}

func (s *PkUkConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *PkUkConstraintContext) GetPkCols() IColumnParenthesesListContext { return s.pkCols }

func (s *PkUkConstraintContext) SetPkCols(v IColumnParenthesesListContext) { s.pkCols = v }

func (s *PkUkConstraintContext) TableConstraintType() ITableConstraintTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintTypeContext)
}

func (s *PkUkConstraintContext) ColumnParenthesesList() IColumnParenthesesListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnParenthesesListContext)
}

func (s *PkUkConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkUkConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkUkConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPkUkConstraint(s)
	}
}

func (s *PkUkConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPkUkConstraint(s)
	}
}

func (p *HiveParser) PkUkConstraint() (localctx IPkUkConstraintContext) {
	localctx = NewPkUkConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, HiveParserRULE_pkUkConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2383)
		p.TableConstraintType()
	}
	{
		p.SetState(2384)

		var _x = p.ColumnParenthesesList()

		localctx.(*PkUkConstraintContext).pkCols = _x
	}

	return localctx
}

// ICheckConstraintContext is an interface to support dynamic dispatch.
type ICheckConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckConstraintContext differentiates from other interfaces.
	IsCheckConstraintContext()
}

type CheckConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckConstraintContext() *CheckConstraintContext {
	var p = new(CheckConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_checkConstraint
	return p
}

func (*CheckConstraintContext) IsCheckConstraintContext() {}

func NewCheckConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckConstraintContext {
	var p = new(CheckConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_checkConstraint

	return p
}

func (s *CheckConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckConstraintContext) KW_CHECK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CHECK, 0)
}

func (s *CheckConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCheckConstraint(s)
	}
}

func (s *CheckConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCheckConstraint(s)
	}
}

func (p *HiveParser) CheckConstraint() (localctx ICheckConstraintContext) {
	localctx = NewCheckConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, HiveParserRULE_checkConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2386)
		p.Match(HiveParserKW_CHECK)
	}
	{
		p.SetState(2387)
		p.expression(0)
	}

	return localctx
}

// ICreateForeignKeyContext is an interface to support dynamic dispatch.
type ICreateForeignKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateForeignKeyContext differentiates from other interfaces.
	IsCreateForeignKeyContext()
}

type CreateForeignKeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateForeignKeyContext() *CreateForeignKeyContext {
	var p = new(CreateForeignKeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createForeignKey
	return p
}

func (*CreateForeignKeyContext) IsCreateForeignKeyContext() {}

func NewCreateForeignKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateForeignKeyContext {
	var p = new(CreateForeignKeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createForeignKey

	return p
}

func (s *CreateForeignKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateForeignKeyContext) KW_FOREIGN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOREIGN, 0)
}

func (s *CreateForeignKeyContext) KW_KEY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY, 0)
}

func (s *CreateForeignKeyContext) AllColumnParenthesesList() []IColumnParenthesesListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem())
	var tst = make([]IColumnParenthesesListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnParenthesesListContext)
		}
	}

	return tst
}

func (s *CreateForeignKeyContext) ColumnParenthesesList(i int) IColumnParenthesesListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnParenthesesListContext)
}

func (s *CreateForeignKeyContext) KW_REFERENCES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REFERENCES, 0)
}

func (s *CreateForeignKeyContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateForeignKeyContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *CreateForeignKeyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateForeignKeyContext) ConstraintOptsCreate() IConstraintOptsCreateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsCreateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsCreateContext)
}

func (s *CreateForeignKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateForeignKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateForeignKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateForeignKey(s)
	}
}

func (s *CreateForeignKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateForeignKey(s)
	}
}

func (p *HiveParser) CreateForeignKey() (localctx ICreateForeignKeyContext) {
	localctx = NewCreateForeignKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, HiveParserRULE_createForeignKey)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2391)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CONSTRAINT {
		{
			p.SetState(2389)
			p.Match(HiveParserKW_CONSTRAINT)
		}
		{
			p.SetState(2390)
			p.Identifier()
		}

	}
	{
		p.SetState(2393)
		p.Match(HiveParserKW_FOREIGN)
	}
	{
		p.SetState(2394)
		p.Match(HiveParserKW_KEY)
	}
	{
		p.SetState(2395)
		p.ColumnParenthesesList()
	}
	{
		p.SetState(2396)
		p.Match(HiveParserKW_REFERENCES)
	}
	{
		p.SetState(2397)
		p.TableName()
	}
	{
		p.SetState(2398)
		p.ColumnParenthesesList()
	}
	p.SetState(2400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2399)
			p.ConstraintOptsCreate()
		}

	}

	return localctx
}

// IAlterForeignKeyWithNameContext is an interface to support dynamic dispatch.
type IAlterForeignKeyWithNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterForeignKeyWithNameContext differentiates from other interfaces.
	IsAlterForeignKeyWithNameContext()
}

type AlterForeignKeyWithNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterForeignKeyWithNameContext() *AlterForeignKeyWithNameContext {
	var p = new(AlterForeignKeyWithNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterForeignKeyWithName
	return p
}

func (*AlterForeignKeyWithNameContext) IsAlterForeignKeyWithNameContext() {}

func NewAlterForeignKeyWithNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterForeignKeyWithNameContext {
	var p = new(AlterForeignKeyWithNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterForeignKeyWithName

	return p
}

func (s *AlterForeignKeyWithNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterForeignKeyWithNameContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *AlterForeignKeyWithNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterForeignKeyWithNameContext) KW_FOREIGN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOREIGN, 0)
}

func (s *AlterForeignKeyWithNameContext) KW_KEY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY, 0)
}

func (s *AlterForeignKeyWithNameContext) AllColumnParenthesesList() []IColumnParenthesesListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem())
	var tst = make([]IColumnParenthesesListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnParenthesesListContext)
		}
	}

	return tst
}

func (s *AlterForeignKeyWithNameContext) ColumnParenthesesList(i int) IColumnParenthesesListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnParenthesesListContext)
}

func (s *AlterForeignKeyWithNameContext) KW_REFERENCES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REFERENCES, 0)
}

func (s *AlterForeignKeyWithNameContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterForeignKeyWithNameContext) ConstraintOptsAlter() IConstraintOptsAlterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsAlterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsAlterContext)
}

func (s *AlterForeignKeyWithNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterForeignKeyWithNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterForeignKeyWithNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterForeignKeyWithName(s)
	}
}

func (s *AlterForeignKeyWithNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterForeignKeyWithName(s)
	}
}

func (p *HiveParser) AlterForeignKeyWithName() (localctx IAlterForeignKeyWithNameContext) {
	localctx = NewAlterForeignKeyWithNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, HiveParserRULE_alterForeignKeyWithName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2402)
		p.Match(HiveParserKW_CONSTRAINT)
	}
	{
		p.SetState(2403)
		p.Identifier()
	}
	{
		p.SetState(2404)
		p.Match(HiveParserKW_FOREIGN)
	}
	{
		p.SetState(2405)
		p.Match(HiveParserKW_KEY)
	}
	{
		p.SetState(2406)
		p.ColumnParenthesesList()
	}
	{
		p.SetState(2407)
		p.Match(HiveParserKW_REFERENCES)
	}
	{
		p.SetState(2408)
		p.TableName()
	}
	{
		p.SetState(2409)
		p.ColumnParenthesesList()
	}
	p.SetState(2411)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2410)
			p.ConstraintOptsAlter()
		}

	}

	return localctx
}

// ISkewedValueElementContext is an interface to support dynamic dispatch.
type ISkewedValueElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedValueElementContext differentiates from other interfaces.
	IsSkewedValueElementContext()
}

type SkewedValueElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedValueElementContext() *SkewedValueElementContext {
	var p = new(SkewedValueElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedValueElement
	return p
}

func (*SkewedValueElementContext) IsSkewedValueElementContext() {}

func NewSkewedValueElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedValueElementContext {
	var p = new(SkewedValueElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedValueElement

	return p
}

func (s *SkewedValueElementContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedValueElementContext) SkewedColumnValues() ISkewedColumnValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValuesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValuesContext)
}

func (s *SkewedValueElementContext) SkewedColumnValuePairList() ISkewedColumnValuePairListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValuePairListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValuePairListContext)
}

func (s *SkewedValueElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedValueElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedValueElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedValueElement(s)
	}
}

func (s *SkewedValueElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedValueElement(s)
	}
}

func (p *HiveParser) SkewedValueElement() (localctx ISkewedValueElementContext) {
	localctx = NewSkewedValueElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, HiveParserRULE_skewedValueElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2415)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_TRUE, HiveParserKW_FALSE, HiveParserKW_NULL, HiveParserKW_DATE, HiveParserKW_TIMESTAMP, HiveParserKW_TIMESTAMPLOCALTZ, HiveParserKW_CURRENT_DATE, HiveParserKW_CURRENT_TIMESTAMP, HiveParserStringLiteral, HiveParserIntegralLiteral, HiveParserNumberLiteral, HiveParserNumber, HiveParserCharSetName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2413)
			p.SkewedColumnValues()
		}

	case HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2414)
			p.SkewedColumnValuePairList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISkewedColumnValuePairListContext is an interface to support dynamic dispatch.
type ISkewedColumnValuePairListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedColumnValuePairListContext differentiates from other interfaces.
	IsSkewedColumnValuePairListContext()
}

type SkewedColumnValuePairListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedColumnValuePairListContext() *SkewedColumnValuePairListContext {
	var p = new(SkewedColumnValuePairListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedColumnValuePairList
	return p
}

func (*SkewedColumnValuePairListContext) IsSkewedColumnValuePairListContext() {}

func NewSkewedColumnValuePairListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedColumnValuePairListContext {
	var p = new(SkewedColumnValuePairListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedColumnValuePairList

	return p
}

func (s *SkewedColumnValuePairListContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedColumnValuePairListContext) AllSkewedColumnValuePair() []ISkewedColumnValuePairContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISkewedColumnValuePairContext)(nil)).Elem())
	var tst = make([]ISkewedColumnValuePairContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISkewedColumnValuePairContext)
		}
	}

	return tst
}

func (s *SkewedColumnValuePairListContext) SkewedColumnValuePair(i int) ISkewedColumnValuePairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValuePairContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValuePairContext)
}

func (s *SkewedColumnValuePairListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SkewedColumnValuePairListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SkewedColumnValuePairListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedColumnValuePairListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedColumnValuePairListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedColumnValuePairList(s)
	}
}

func (s *SkewedColumnValuePairListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedColumnValuePairList(s)
	}
}

func (p *HiveParser) SkewedColumnValuePairList() (localctx ISkewedColumnValuePairListContext) {
	localctx = NewSkewedColumnValuePairListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, HiveParserRULE_skewedColumnValuePairList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2417)
		p.SkewedColumnValuePair()
	}
	p.SetState(2422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2418)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2419)
			p.SkewedColumnValuePair()
		}

		p.SetState(2424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISkewedColumnValuePairContext is an interface to support dynamic dispatch.
type ISkewedColumnValuePairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedColumnValuePairContext differentiates from other interfaces.
	IsSkewedColumnValuePairContext()
}

type SkewedColumnValuePairContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedColumnValuePairContext() *SkewedColumnValuePairContext {
	var p = new(SkewedColumnValuePairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedColumnValuePair
	return p
}

func (*SkewedColumnValuePairContext) IsSkewedColumnValuePairContext() {}

func NewSkewedColumnValuePairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedColumnValuePairContext {
	var p = new(SkewedColumnValuePairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedColumnValuePair

	return p
}

func (s *SkewedColumnValuePairContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedColumnValuePairContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *SkewedColumnValuePairContext) SkewedColumnValues() ISkewedColumnValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValuesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValuesContext)
}

func (s *SkewedColumnValuePairContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *SkewedColumnValuePairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedColumnValuePairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedColumnValuePairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedColumnValuePair(s)
	}
}

func (s *SkewedColumnValuePairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedColumnValuePair(s)
	}
}

func (p *HiveParser) SkewedColumnValuePair() (localctx ISkewedColumnValuePairContext) {
	localctx = NewSkewedColumnValuePairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, HiveParserRULE_skewedColumnValuePair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2425)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2426)
		p.SkewedColumnValues()
	}
	{
		p.SetState(2427)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ISkewedColumnValuesContext is an interface to support dynamic dispatch.
type ISkewedColumnValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedColumnValuesContext differentiates from other interfaces.
	IsSkewedColumnValuesContext()
}

type SkewedColumnValuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedColumnValuesContext() *SkewedColumnValuesContext {
	var p = new(SkewedColumnValuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedColumnValues
	return p
}

func (*SkewedColumnValuesContext) IsSkewedColumnValuesContext() {}

func NewSkewedColumnValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedColumnValuesContext {
	var p = new(SkewedColumnValuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedColumnValues

	return p
}

func (s *SkewedColumnValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedColumnValuesContext) AllSkewedColumnValue() []ISkewedColumnValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISkewedColumnValueContext)(nil)).Elem())
	var tst = make([]ISkewedColumnValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISkewedColumnValueContext)
		}
	}

	return tst
}

func (s *SkewedColumnValuesContext) SkewedColumnValue(i int) ISkewedColumnValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValueContext)
}

func (s *SkewedColumnValuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SkewedColumnValuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SkewedColumnValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedColumnValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedColumnValuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedColumnValues(s)
	}
}

func (s *SkewedColumnValuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedColumnValues(s)
	}
}

func (p *HiveParser) SkewedColumnValues() (localctx ISkewedColumnValuesContext) {
	localctx = NewSkewedColumnValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, HiveParserRULE_skewedColumnValues)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2429)
		p.SkewedColumnValue()
	}
	p.SetState(2434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2430)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2431)
			p.SkewedColumnValue()
		}

		p.SetState(2436)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISkewedColumnValueContext is an interface to support dynamic dispatch.
type ISkewedColumnValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedColumnValueContext differentiates from other interfaces.
	IsSkewedColumnValueContext()
}

type SkewedColumnValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedColumnValueContext() *SkewedColumnValueContext {
	var p = new(SkewedColumnValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedColumnValue
	return p
}

func (*SkewedColumnValueContext) IsSkewedColumnValueContext() {}

func NewSkewedColumnValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedColumnValueContext {
	var p = new(SkewedColumnValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedColumnValue

	return p
}

func (s *SkewedColumnValueContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedColumnValueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *SkewedColumnValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedColumnValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedColumnValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedColumnValue(s)
	}
}

func (s *SkewedColumnValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedColumnValue(s)
	}
}

func (p *HiveParser) SkewedColumnValue() (localctx ISkewedColumnValueContext) {
	localctx = NewSkewedColumnValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, HiveParserRULE_skewedColumnValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2437)
		p.Constant()
	}

	return localctx
}

// ISkewedValueLocationElementContext is an interface to support dynamic dispatch.
type ISkewedValueLocationElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSkewedValueLocationElementContext differentiates from other interfaces.
	IsSkewedValueLocationElementContext()
}

type SkewedValueLocationElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkewedValueLocationElementContext() *SkewedValueLocationElementContext {
	var p = new(SkewedValueLocationElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_skewedValueLocationElement
	return p
}

func (*SkewedValueLocationElementContext) IsSkewedValueLocationElementContext() {}

func NewSkewedValueLocationElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SkewedValueLocationElementContext {
	var p = new(SkewedValueLocationElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_skewedValueLocationElement

	return p
}

func (s *SkewedValueLocationElementContext) GetParser() antlr.Parser { return s.parser }

func (s *SkewedValueLocationElementContext) SkewedColumnValue() ISkewedColumnValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValueContext)
}

func (s *SkewedValueLocationElementContext) SkewedColumnValuePair() ISkewedColumnValuePairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISkewedColumnValuePairContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISkewedColumnValuePairContext)
}

func (s *SkewedValueLocationElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SkewedValueLocationElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SkewedValueLocationElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSkewedValueLocationElement(s)
	}
}

func (s *SkewedValueLocationElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSkewedValueLocationElement(s)
	}
}

func (p *HiveParser) SkewedValueLocationElement() (localctx ISkewedValueLocationElementContext) {
	localctx = NewSkewedValueLocationElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, HiveParserRULE_skewedValueLocationElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2441)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_TRUE, HiveParserKW_FALSE, HiveParserKW_NULL, HiveParserKW_DATE, HiveParserKW_TIMESTAMP, HiveParserKW_TIMESTAMPLOCALTZ, HiveParserKW_CURRENT_DATE, HiveParserKW_CURRENT_TIMESTAMP, HiveParserStringLiteral, HiveParserIntegralLiteral, HiveParserNumberLiteral, HiveParserNumber, HiveParserCharSetName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2439)
			p.SkewedColumnValue()
		}

	case HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2440)
			p.SkewedColumnValuePair()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOrderSpecificationContext is an interface to support dynamic dispatch.
type IOrderSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderSpecificationContext differentiates from other interfaces.
	IsOrderSpecificationContext()
}

type OrderSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderSpecificationContext() *OrderSpecificationContext {
	var p = new(OrderSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_orderSpecification
	return p
}

func (*OrderSpecificationContext) IsOrderSpecificationContext() {}

func NewOrderSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderSpecificationContext {
	var p = new(OrderSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_orderSpecification

	return p
}

func (s *OrderSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderSpecificationContext) KW_ASC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ASC, 0)
}

func (s *OrderSpecificationContext) KW_DESC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DESC, 0)
}

func (s *OrderSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterOrderSpecification(s)
	}
}

func (s *OrderSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitOrderSpecification(s)
	}
}

func (p *HiveParser) OrderSpecification() (localctx IOrderSpecificationContext) {
	localctx = NewOrderSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, HiveParserRULE_orderSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2443)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_ASC || _la == HiveParserKW_DESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INullOrderingContext is an interface to support dynamic dispatch.
type INullOrderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullOrderingContext differentiates from other interfaces.
	IsNullOrderingContext()
}

type NullOrderingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullOrderingContext() *NullOrderingContext {
	var p = new(NullOrderingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_nullOrdering
	return p
}

func (*NullOrderingContext) IsNullOrderingContext() {}

func NewNullOrderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullOrderingContext {
	var p = new(NullOrderingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_nullOrdering

	return p
}

func (s *NullOrderingContext) GetParser() antlr.Parser { return s.parser }

func (s *NullOrderingContext) KW_NULLS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NULLS, 0)
}

func (s *NullOrderingContext) KW_FIRST() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FIRST, 0)
}

func (s *NullOrderingContext) KW_LAST() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LAST, 0)
}

func (s *NullOrderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullOrderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullOrderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterNullOrdering(s)
	}
}

func (s *NullOrderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitNullOrdering(s)
	}
}

func (p *HiveParser) NullOrdering() (localctx INullOrderingContext) {
	localctx = NewNullOrderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, HiveParserRULE_nullOrdering)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2449)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2445)
			p.Match(HiveParserKW_NULLS)
		}
		{
			p.SetState(2446)
			p.Match(HiveParserKW_FIRST)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2447)
			p.Match(HiveParserKW_NULLS)
		}
		{
			p.SetState(2448)
			p.Match(HiveParserKW_LAST)
		}

	}

	return localctx
}

// IColumnNameOrderContext is an interface to support dynamic dispatch.
type IColumnNameOrderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameOrderContext differentiates from other interfaces.
	IsColumnNameOrderContext()
}

type ColumnNameOrderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameOrderContext() *ColumnNameOrderContext {
	var p = new(ColumnNameOrderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameOrder
	return p
}

func (*ColumnNameOrderContext) IsColumnNameOrderContext() {}

func NewColumnNameOrderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameOrderContext {
	var p = new(ColumnNameOrderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameOrder

	return p
}

func (s *ColumnNameOrderContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameOrderContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameOrderContext) OrderSpecification() IOrderSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderSpecificationContext)
}

func (s *ColumnNameOrderContext) NullOrdering() INullOrderingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullOrderingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullOrderingContext)
}

func (s *ColumnNameOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameOrderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameOrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameOrder(s)
	}
}

func (s *ColumnNameOrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameOrder(s)
	}
}

func (p *HiveParser) ColumnNameOrder() (localctx IColumnNameOrderContext) {
	localctx = NewColumnNameOrderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, HiveParserRULE_columnNameOrder)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2451)
		p.Identifier()
	}
	p.SetState(2453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ASC || _la == HiveParserKW_DESC {
		{
			p.SetState(2452)
			p.OrderSpecification()
		}

	}
	p.SetState(2456)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NULLS {
		{
			p.SetState(2455)
			p.NullOrdering()
		}

	}

	return localctx
}

// IColumnNameCommentListContext is an interface to support dynamic dispatch.
type IColumnNameCommentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameCommentListContext differentiates from other interfaces.
	IsColumnNameCommentListContext()
}

type ColumnNameCommentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameCommentListContext() *ColumnNameCommentListContext {
	var p = new(ColumnNameCommentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameCommentList
	return p
}

func (*ColumnNameCommentListContext) IsColumnNameCommentListContext() {}

func NewColumnNameCommentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameCommentListContext {
	var p = new(ColumnNameCommentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameCommentList

	return p
}

func (s *ColumnNameCommentListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameCommentListContext) AllColumnNameComment() []IColumnNameCommentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameCommentContext)(nil)).Elem())
	var tst = make([]IColumnNameCommentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameCommentContext)
		}
	}

	return tst
}

func (s *ColumnNameCommentListContext) ColumnNameComment(i int) IColumnNameCommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameCommentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameCommentContext)
}

func (s *ColumnNameCommentListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnNameCommentListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnNameCommentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameCommentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameCommentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameCommentList(s)
	}
}

func (s *ColumnNameCommentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameCommentList(s)
	}
}

func (p *HiveParser) ColumnNameCommentList() (localctx IColumnNameCommentListContext) {
	localctx = NewColumnNameCommentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, HiveParserRULE_columnNameCommentList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2458)
		p.ColumnNameComment()
	}
	p.SetState(2463)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2459)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2460)
			p.ColumnNameComment()
		}

		p.SetState(2465)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnNameCommentContext is an interface to support dynamic dispatch.
type IColumnNameCommentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameCommentContext differentiates from other interfaces.
	IsColumnNameCommentContext()
}

type ColumnNameCommentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameCommentContext() *ColumnNameCommentContext {
	var p = new(ColumnNameCommentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameComment
	return p
}

func (*ColumnNameCommentContext) IsColumnNameCommentContext() {}

func NewColumnNameCommentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameCommentContext {
	var p = new(ColumnNameCommentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameComment

	return p
}

func (s *ColumnNameCommentContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameCommentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameCommentContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *ColumnNameCommentContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ColumnNameCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameCommentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameComment(s)
	}
}

func (s *ColumnNameCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameComment(s)
	}
}

func (p *HiveParser) ColumnNameComment() (localctx IColumnNameCommentContext) {
	localctx = NewColumnNameCommentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, HiveParserRULE_columnNameComment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2466)
		p.Identifier()
	}
	p.SetState(2469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(2467)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(2468)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// IColumnRefOrderContext is an interface to support dynamic dispatch.
type IColumnRefOrderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnRefOrderContext differentiates from other interfaces.
	IsColumnRefOrderContext()
}

type ColumnRefOrderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnRefOrderContext() *ColumnRefOrderContext {
	var p = new(ColumnRefOrderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnRefOrder
	return p
}

func (*ColumnRefOrderContext) IsColumnRefOrderContext() {}

func NewColumnRefOrderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnRefOrderContext {
	var p = new(ColumnRefOrderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnRefOrder

	return p
}

func (s *ColumnRefOrderContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnRefOrderContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ColumnRefOrderContext) OrderSpecification() IOrderSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderSpecificationContext)
}

func (s *ColumnRefOrderContext) NullOrdering() INullOrderingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullOrderingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullOrderingContext)
}

func (s *ColumnRefOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnRefOrderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnRefOrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnRefOrder(s)
	}
}

func (s *ColumnRefOrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnRefOrder(s)
	}
}

func (p *HiveParser) ColumnRefOrder() (localctx IColumnRefOrderContext) {
	localctx = NewColumnRefOrderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, HiveParserRULE_columnRefOrder)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2471)
		p.expression(0)
	}
	p.SetState(2473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ASC || _la == HiveParserKW_DESC {
		{
			p.SetState(2472)
			p.OrderSpecification()
		}

	}
	p.SetState(2476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NULLS {
		{
			p.SetState(2475)
			p.NullOrdering()
		}

	}

	return localctx
}

// IColumnNameTypeContext is an interface to support dynamic dispatch.
type IColumnNameTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameTypeContext differentiates from other interfaces.
	IsColumnNameTypeContext()
}

type ColumnNameTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameTypeContext() *ColumnNameTypeContext {
	var p = new(ColumnNameTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameType
	return p
}

func (*ColumnNameTypeContext) IsColumnNameTypeContext() {}

func NewColumnNameTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameTypeContext {
	var p = new(ColumnNameTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameType

	return p
}

func (s *ColumnNameTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameTypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameTypeContext) ColType() IColTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColTypeContext)
}

func (s *ColumnNameTypeContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *ColumnNameTypeContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ColumnNameTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameType(s)
	}
}

func (s *ColumnNameTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameType(s)
	}
}

func (p *HiveParser) ColumnNameType() (localctx IColumnNameTypeContext) {
	localctx = NewColumnNameTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, HiveParserRULE_columnNameType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2478)
		p.Identifier()
	}
	{
		p.SetState(2479)
		p.ColType()
	}
	p.SetState(2482)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(2480)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(2481)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// IColumnNameTypeOrConstraintContext is an interface to support dynamic dispatch.
type IColumnNameTypeOrConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameTypeOrConstraintContext differentiates from other interfaces.
	IsColumnNameTypeOrConstraintContext()
}

type ColumnNameTypeOrConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameTypeOrConstraintContext() *ColumnNameTypeOrConstraintContext {
	var p = new(ColumnNameTypeOrConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameTypeOrConstraint
	return p
}

func (*ColumnNameTypeOrConstraintContext) IsColumnNameTypeOrConstraintContext() {}

func NewColumnNameTypeOrConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameTypeOrConstraintContext {
	var p = new(ColumnNameTypeOrConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameTypeOrConstraint

	return p
}

func (s *ColumnNameTypeOrConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameTypeOrConstraintContext) TableConstraint() ITableConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintContext)
}

func (s *ColumnNameTypeOrConstraintContext) ColumnNameTypeConstraint() IColumnNameTypeConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeConstraintContext)
}

func (s *ColumnNameTypeOrConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameTypeOrConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameTypeOrConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameTypeOrConstraint(s)
	}
}

func (s *ColumnNameTypeOrConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameTypeOrConstraint(s)
	}
}

func (p *HiveParser) ColumnNameTypeOrConstraint() (localctx IColumnNameTypeOrConstraintContext) {
	localctx = NewColumnNameTypeOrConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, HiveParserRULE_columnNameTypeOrConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2486)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2484)
			p.TableConstraint()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2485)
			p.ColumnNameTypeConstraint()
		}

	}

	return localctx
}

// ITableConstraintContext is an interface to support dynamic dispatch.
type ITableConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableConstraintContext differentiates from other interfaces.
	IsTableConstraintContext()
}

type TableConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstraintContext() *TableConstraintContext {
	var p = new(TableConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableConstraint
	return p
}

func (*TableConstraintContext) IsTableConstraintContext() {}

func NewTableConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstraintContext {
	var p = new(TableConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableConstraint

	return p
}

func (s *TableConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstraintContext) CreateForeignKey() ICreateForeignKeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateForeignKeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateForeignKeyContext)
}

func (s *TableConstraintContext) CreateConstraint() ICreateConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateConstraintContext)
}

func (s *TableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableConstraint(s)
	}
}

func (s *TableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableConstraint(s)
	}
}

func (p *HiveParser) TableConstraint() (localctx ITableConstraintContext) {
	localctx = NewTableConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, HiveParserRULE_tableConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2490)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2488)
			p.CreateForeignKey()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2489)
			p.CreateConstraint()
		}

	}

	return localctx
}

// IColumnNameTypeConstraintContext is an interface to support dynamic dispatch.
type IColumnNameTypeConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameTypeConstraintContext differentiates from other interfaces.
	IsColumnNameTypeConstraintContext()
}

type ColumnNameTypeConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameTypeConstraintContext() *ColumnNameTypeConstraintContext {
	var p = new(ColumnNameTypeConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameTypeConstraint
	return p
}

func (*ColumnNameTypeConstraintContext) IsColumnNameTypeConstraintContext() {}

func NewColumnNameTypeConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameTypeConstraintContext {
	var p = new(ColumnNameTypeConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameTypeConstraint

	return p
}

func (s *ColumnNameTypeConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameTypeConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameTypeConstraintContext) ColType() IColTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColTypeContext)
}

func (s *ColumnNameTypeConstraintContext) ColumnConstraint() IColumnConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintContext)
}

func (s *ColumnNameTypeConstraintContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *ColumnNameTypeConstraintContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ColumnNameTypeConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameTypeConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameTypeConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameTypeConstraint(s)
	}
}

func (s *ColumnNameTypeConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameTypeConstraint(s)
	}
}

func (p *HiveParser) ColumnNameTypeConstraint() (localctx IColumnNameTypeConstraintContext) {
	localctx = NewColumnNameTypeConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, HiveParserRULE_columnNameTypeConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2492)
		p.Identifier()
	}
	{
		p.SetState(2493)
		p.ColType()
	}
	p.SetState(2495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || (((_la-287)&-(0x1f+1)) == 0 && ((1<<uint((_la-287)))&((1<<(HiveParserKW_PRIMARY-287))|(1<<(HiveParserKW_REFERENCES-287))|(1<<(HiveParserKW_CONSTRAINT-287))|(1<<(HiveParserKW_UNIQUE-287))|(1<<(HiveParserKW_DEFAULT-287))|(1<<(HiveParserKW_CHECK-287)))) != 0) {
		{
			p.SetState(2494)
			p.ColumnConstraint()
		}

	}
	p.SetState(2499)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(2497)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(2498)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// IColumnConstraintContext is an interface to support dynamic dispatch.
type IColumnConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnConstraintContext differentiates from other interfaces.
	IsColumnConstraintContext()
}

type ColumnConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintContext() *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnConstraint
	return p
}

func (*ColumnConstraintContext) IsColumnConstraintContext() {}

func NewColumnConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnConstraint

	return p
}

func (s *ColumnConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintContext) ForeignKeyConstraint() IForeignKeyConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeignKeyConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeignKeyConstraintContext)
}

func (s *ColumnConstraintContext) ColConstraint() IColConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColConstraintContext)
}

func (s *ColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnConstraint(s)
	}
}

func (s *ColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnConstraint(s)
	}
}

func (p *HiveParser) ColumnConstraint() (localctx IColumnConstraintContext) {
	localctx = NewColumnConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, HiveParserRULE_columnConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2503)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2501)
			p.ForeignKeyConstraint()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2502)
			p.ColConstraint()
		}

	}

	return localctx
}

// IForeignKeyConstraintContext is an interface to support dynamic dispatch.
type IForeignKeyConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeignKeyConstraintContext differentiates from other interfaces.
	IsForeignKeyConstraintContext()
}

type ForeignKeyConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeignKeyConstraintContext() *ForeignKeyConstraintContext {
	var p = new(ForeignKeyConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_foreignKeyConstraint
	return p
}

func (*ForeignKeyConstraintContext) IsForeignKeyConstraintContext() {}

func NewForeignKeyConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForeignKeyConstraintContext {
	var p = new(ForeignKeyConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_foreignKeyConstraint

	return p
}

func (s *ForeignKeyConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ForeignKeyConstraintContext) KW_REFERENCES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REFERENCES, 0)
}

func (s *ForeignKeyConstraintContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ForeignKeyConstraintContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ForeignKeyConstraintContext) ColumnName() IColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *ForeignKeyConstraintContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ForeignKeyConstraintContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *ForeignKeyConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ForeignKeyConstraintContext) ConstraintOptsCreate() IConstraintOptsCreateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsCreateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsCreateContext)
}

func (s *ForeignKeyConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForeignKeyConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForeignKeyConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterForeignKeyConstraint(s)
	}
}

func (s *ForeignKeyConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitForeignKeyConstraint(s)
	}
}

func (p *HiveParser) ForeignKeyConstraint() (localctx IForeignKeyConstraintContext) {
	localctx = NewForeignKeyConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, HiveParserRULE_foreignKeyConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CONSTRAINT {
		{
			p.SetState(2505)
			p.Match(HiveParserKW_CONSTRAINT)
		}
		{
			p.SetState(2506)
			p.Identifier()
		}

	}
	{
		p.SetState(2509)
		p.Match(HiveParserKW_REFERENCES)
	}
	{
		p.SetState(2510)
		p.TableName()
	}
	{
		p.SetState(2511)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2512)
		p.ColumnName()
	}
	{
		p.SetState(2513)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(2515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2514)
			p.ConstraintOptsCreate()
		}

	}

	return localctx
}

// IColConstraintContext is an interface to support dynamic dispatch.
type IColConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColConstraintContext differentiates from other interfaces.
	IsColConstraintContext()
}

type ColConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColConstraintContext() *ColConstraintContext {
	var p = new(ColConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_colConstraint
	return p
}

func (*ColConstraintContext) IsColConstraintContext() {}

func NewColConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColConstraintContext {
	var p = new(ColConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_colConstraint

	return p
}

func (s *ColConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColConstraintContext) ColumnConstraintType() IColumnConstraintTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnConstraintTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintTypeContext)
}

func (s *ColConstraintContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *ColConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColConstraintContext) ConstraintOptsCreate() IConstraintOptsCreateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsCreateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsCreateContext)
}

func (s *ColConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColConstraint(s)
	}
}

func (s *ColConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColConstraint(s)
	}
}

func (p *HiveParser) ColConstraint() (localctx IColConstraintContext) {
	localctx = NewColConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, HiveParserRULE_colConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CONSTRAINT {
		{
			p.SetState(2517)
			p.Match(HiveParserKW_CONSTRAINT)
		}
		{
			p.SetState(2518)
			p.Identifier()
		}

	}
	{
		p.SetState(2521)
		p.ColumnConstraintType()
	}
	p.SetState(2523)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2522)
			p.ConstraintOptsCreate()
		}

	}

	return localctx
}

// IAlterColumnConstraintContext is an interface to support dynamic dispatch.
type IAlterColumnConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterColumnConstraintContext differentiates from other interfaces.
	IsAlterColumnConstraintContext()
}

type AlterColumnConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterColumnConstraintContext() *AlterColumnConstraintContext {
	var p = new(AlterColumnConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterColumnConstraint
	return p
}

func (*AlterColumnConstraintContext) IsAlterColumnConstraintContext() {}

func NewAlterColumnConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterColumnConstraintContext {
	var p = new(AlterColumnConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterColumnConstraint

	return p
}

func (s *AlterColumnConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterColumnConstraintContext) AlterForeignKeyConstraint() IAlterForeignKeyConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterForeignKeyConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterForeignKeyConstraintContext)
}

func (s *AlterColumnConstraintContext) AlterColConstraint() IAlterColConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterColConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterColConstraintContext)
}

func (s *AlterColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterColumnConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterColumnConstraint(s)
	}
}

func (s *AlterColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterColumnConstraint(s)
	}
}

func (p *HiveParser) AlterColumnConstraint() (localctx IAlterColumnConstraintContext) {
	localctx = NewAlterColumnConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, HiveParserRULE_alterColumnConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2527)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2525)
			p.AlterForeignKeyConstraint()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2526)
			p.AlterColConstraint()
		}

	}

	return localctx
}

// IAlterForeignKeyConstraintContext is an interface to support dynamic dispatch.
type IAlterForeignKeyConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterForeignKeyConstraintContext differentiates from other interfaces.
	IsAlterForeignKeyConstraintContext()
}

type AlterForeignKeyConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterForeignKeyConstraintContext() *AlterForeignKeyConstraintContext {
	var p = new(AlterForeignKeyConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterForeignKeyConstraint
	return p
}

func (*AlterForeignKeyConstraintContext) IsAlterForeignKeyConstraintContext() {}

func NewAlterForeignKeyConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterForeignKeyConstraintContext {
	var p = new(AlterForeignKeyConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterForeignKeyConstraint

	return p
}

func (s *AlterForeignKeyConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterForeignKeyConstraintContext) KW_REFERENCES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REFERENCES, 0)
}

func (s *AlterForeignKeyConstraintContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterForeignKeyConstraintContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *AlterForeignKeyConstraintContext) ColumnName() IColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *AlterForeignKeyConstraintContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *AlterForeignKeyConstraintContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *AlterForeignKeyConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterForeignKeyConstraintContext) ConstraintOptsAlter() IConstraintOptsAlterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsAlterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsAlterContext)
}

func (s *AlterForeignKeyConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterForeignKeyConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterForeignKeyConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterForeignKeyConstraint(s)
	}
}

func (s *AlterForeignKeyConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterForeignKeyConstraint(s)
	}
}

func (p *HiveParser) AlterForeignKeyConstraint() (localctx IAlterForeignKeyConstraintContext) {
	localctx = NewAlterForeignKeyConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, HiveParserRULE_alterForeignKeyConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2531)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CONSTRAINT {
		{
			p.SetState(2529)
			p.Match(HiveParserKW_CONSTRAINT)
		}
		{
			p.SetState(2530)
			p.Identifier()
		}

	}
	{
		p.SetState(2533)
		p.Match(HiveParserKW_REFERENCES)
	}
	{
		p.SetState(2534)
		p.TableName()
	}
	{
		p.SetState(2535)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2536)
		p.ColumnName()
	}
	{
		p.SetState(2537)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(2539)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2538)
			p.ConstraintOptsAlter()
		}

	}

	return localctx
}

// IAlterColConstraintContext is an interface to support dynamic dispatch.
type IAlterColConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterColConstraintContext differentiates from other interfaces.
	IsAlterColConstraintContext()
}

type AlterColConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterColConstraintContext() *AlterColConstraintContext {
	var p = new(AlterColConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterColConstraint
	return p
}

func (*AlterColConstraintContext) IsAlterColConstraintContext() {}

func NewAlterColConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterColConstraintContext {
	var p = new(AlterColConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterColConstraint

	return p
}

func (s *AlterColConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterColConstraintContext) ColumnConstraintType() IColumnConstraintTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnConstraintTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintTypeContext)
}

func (s *AlterColConstraintContext) KW_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONSTRAINT, 0)
}

func (s *AlterColConstraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterColConstraintContext) ConstraintOptsAlter() IConstraintOptsAlterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintOptsAlterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintOptsAlterContext)
}

func (s *AlterColConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterColConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterColConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterColConstraint(s)
	}
}

func (s *AlterColConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterColConstraint(s)
	}
}

func (p *HiveParser) AlterColConstraint() (localctx IAlterColConstraintContext) {
	localctx = NewAlterColConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, HiveParserRULE_alterColConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CONSTRAINT {
		{
			p.SetState(2541)
			p.Match(HiveParserKW_CONSTRAINT)
		}
		{
			p.SetState(2542)
			p.Identifier()
		}

	}
	{
		p.SetState(2545)
		p.ColumnConstraintType()
	}
	p.SetState(2547)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_NOT || _la == HiveParserKW_ENABLE || _la == HiveParserKW_DISABLE || _la == HiveParserKW_ENFORCED {
		{
			p.SetState(2546)
			p.ConstraintOptsAlter()
		}

	}

	return localctx
}

// IColumnConstraintTypeContext is an interface to support dynamic dispatch.
type IColumnConstraintTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnConstraintTypeContext differentiates from other interfaces.
	IsColumnConstraintTypeContext()
}

type ColumnConstraintTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintTypeContext() *ColumnConstraintTypeContext {
	var p = new(ColumnConstraintTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnConstraintType
	return p
}

func (*ColumnConstraintTypeContext) IsColumnConstraintTypeContext() {}

func NewColumnConstraintTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintTypeContext {
	var p = new(ColumnConstraintTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnConstraintType

	return p
}

func (s *ColumnConstraintTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintTypeContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *ColumnConstraintTypeContext) KW_NULL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NULL, 0)
}

func (s *ColumnConstraintTypeContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFAULT, 0)
}

func (s *ColumnConstraintTypeContext) DefaultVal() IDefaultValContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValContext)
}

func (s *ColumnConstraintTypeContext) CheckConstraint() ICheckConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckConstraintContext)
}

func (s *ColumnConstraintTypeContext) TableConstraintType() ITableConstraintTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintTypeContext)
}

func (s *ColumnConstraintTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnConstraintTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnConstraintType(s)
	}
}

func (s *ColumnConstraintTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnConstraintType(s)
	}
}

func (p *HiveParser) ColumnConstraintType() (localctx IColumnConstraintTypeContext) {
	localctx = NewColumnConstraintTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, HiveParserRULE_columnConstraintType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2555)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_NOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2549)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(2550)
			p.Match(HiveParserKW_NULL)
		}

	case HiveParserKW_DEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2551)
			p.Match(HiveParserKW_DEFAULT)
		}
		{
			p.SetState(2552)
			p.DefaultVal()
		}

	case HiveParserKW_CHECK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2553)
			p.CheckConstraint()
		}

	case HiveParserKW_PRIMARY, HiveParserKW_UNIQUE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2554)
			p.TableConstraintType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDefaultValContext is an interface to support dynamic dispatch.
type IDefaultValContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultValContext differentiates from other interfaces.
	IsDefaultValContext()
}

type DefaultValContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultValContext() *DefaultValContext {
	var p = new(DefaultValContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_defaultVal
	return p
}

func (*DefaultValContext) IsDefaultValContext() {}

func NewDefaultValContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValContext {
	var p = new(DefaultValContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_defaultVal

	return p
}

func (s *DefaultValContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *DefaultValContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *DefaultValContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *DefaultValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDefaultVal(s)
	}
}

func (s *DefaultValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDefaultVal(s)
	}
}

func (p *HiveParser) DefaultVal() (localctx IDefaultValContext) {
	localctx = NewDefaultValContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, HiveParserRULE_defaultVal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2560)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2557)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2558)
			p.Function()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2559)
			p.CastExpression()
		}

	}

	return localctx
}

// ITableConstraintTypeContext is an interface to support dynamic dispatch.
type ITableConstraintTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableConstraintTypeContext differentiates from other interfaces.
	IsTableConstraintTypeContext()
}

type TableConstraintTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstraintTypeContext() *TableConstraintTypeContext {
	var p = new(TableConstraintTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableConstraintType
	return p
}

func (*TableConstraintTypeContext) IsTableConstraintTypeContext() {}

func NewTableConstraintTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstraintTypeContext {
	var p = new(TableConstraintTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableConstraintType

	return p
}

func (s *TableConstraintTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstraintTypeContext) KW_PRIMARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRIMARY, 0)
}

func (s *TableConstraintTypeContext) KW_KEY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY, 0)
}

func (s *TableConstraintTypeContext) KW_UNIQUE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNIQUE, 0)
}

func (s *TableConstraintTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstraintTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableConstraintTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableConstraintType(s)
	}
}

func (s *TableConstraintTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableConstraintType(s)
	}
}

func (p *HiveParser) TableConstraintType() (localctx ITableConstraintTypeContext) {
	localctx = NewTableConstraintTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, HiveParserRULE_tableConstraintType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2565)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_PRIMARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2562)
			p.Match(HiveParserKW_PRIMARY)
		}
		{
			p.SetState(2563)
			p.Match(HiveParserKW_KEY)
		}

	case HiveParserKW_UNIQUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2564)
			p.Match(HiveParserKW_UNIQUE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstraintOptsCreateContext is an interface to support dynamic dispatch.
type IConstraintOptsCreateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraintOptsCreateContext differentiates from other interfaces.
	IsConstraintOptsCreateContext()
}

type ConstraintOptsCreateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintOptsCreateContext() *ConstraintOptsCreateContext {
	var p = new(ConstraintOptsCreateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_constraintOptsCreate
	return p
}

func (*ConstraintOptsCreateContext) IsConstraintOptsCreateContext() {}

func NewConstraintOptsCreateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintOptsCreateContext {
	var p = new(ConstraintOptsCreateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_constraintOptsCreate

	return p
}

func (s *ConstraintOptsCreateContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintOptsCreateContext) EnableValidateSpecification() IEnableValidateSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableValidateSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableValidateSpecificationContext)
}

func (s *ConstraintOptsCreateContext) RelySpecification() IRelySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelySpecificationContext)
}

func (s *ConstraintOptsCreateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintOptsCreateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintOptsCreateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterConstraintOptsCreate(s)
	}
}

func (s *ConstraintOptsCreateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitConstraintOptsCreate(s)
	}
}

func (p *HiveParser) ConstraintOptsCreate() (localctx IConstraintOptsCreateContext) {
	localctx = NewConstraintOptsCreateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, HiveParserRULE_constraintOptsCreate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2567)
		p.EnableValidateSpecification()
	}
	{
		p.SetState(2568)
		p.RelySpecification()
	}

	return localctx
}

// IConstraintOptsAlterContext is an interface to support dynamic dispatch.
type IConstraintOptsAlterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraintOptsAlterContext differentiates from other interfaces.
	IsConstraintOptsAlterContext()
}

type ConstraintOptsAlterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintOptsAlterContext() *ConstraintOptsAlterContext {
	var p = new(ConstraintOptsAlterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_constraintOptsAlter
	return p
}

func (*ConstraintOptsAlterContext) IsConstraintOptsAlterContext() {}

func NewConstraintOptsAlterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintOptsAlterContext {
	var p = new(ConstraintOptsAlterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_constraintOptsAlter

	return p
}

func (s *ConstraintOptsAlterContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintOptsAlterContext) EnableValidateSpecification() IEnableValidateSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableValidateSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableValidateSpecificationContext)
}

func (s *ConstraintOptsAlterContext) RelySpecification() IRelySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelySpecificationContext)
}

func (s *ConstraintOptsAlterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintOptsAlterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintOptsAlterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterConstraintOptsAlter(s)
	}
}

func (s *ConstraintOptsAlterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitConstraintOptsAlter(s)
	}
}

func (p *HiveParser) ConstraintOptsAlter() (localctx IConstraintOptsAlterContext) {
	localctx = NewConstraintOptsAlterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, HiveParserRULE_constraintOptsAlter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2570)
		p.EnableValidateSpecification()
	}
	{
		p.SetState(2571)
		p.RelySpecification()
	}

	return localctx
}

// IColumnNameColonTypeContext is an interface to support dynamic dispatch.
type IColumnNameColonTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameColonTypeContext differentiates from other interfaces.
	IsColumnNameColonTypeContext()
}

type ColumnNameColonTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameColonTypeContext() *ColumnNameColonTypeContext {
	var p = new(ColumnNameColonTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnNameColonType
	return p
}

func (*ColumnNameColonTypeContext) IsColumnNameColonTypeContext() {}

func NewColumnNameColonTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameColonTypeContext {
	var p = new(ColumnNameColonTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnNameColonType

	return p
}

func (s *ColumnNameColonTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameColonTypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameColonTypeContext) COLON() antlr.TerminalNode {
	return s.GetToken(HiveParserCOLON, 0)
}

func (s *ColumnNameColonTypeContext) ColType() IColTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColTypeContext)
}

func (s *ColumnNameColonTypeContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *ColumnNameColonTypeContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ColumnNameColonTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameColonTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameColonTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnNameColonType(s)
	}
}

func (s *ColumnNameColonTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnNameColonType(s)
	}
}

func (p *HiveParser) ColumnNameColonType() (localctx IColumnNameColonTypeContext) {
	localctx = NewColumnNameColonTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, HiveParserRULE_columnNameColonType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2573)
		p.Identifier()
	}
	{
		p.SetState(2574)
		p.Match(HiveParserCOLON)
	}
	{
		p.SetState(2575)
		p.ColType()
	}
	p.SetState(2578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_COMMENT {
		{
			p.SetState(2576)
			p.Match(HiveParserKW_COMMENT)
		}
		{
			p.SetState(2577)
			p.Match(HiveParserStringLiteral)
		}

	}

	return localctx
}

// IColTypeContext is an interface to support dynamic dispatch.
type IColTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColTypeContext differentiates from other interfaces.
	IsColTypeContext()
}

type ColTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColTypeContext() *ColTypeContext {
	var p = new(ColTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_colType
	return p
}

func (*ColTypeContext) IsColTypeContext() {}

func NewColTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColTypeContext {
	var p = new(ColTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_colType

	return p
}

func (s *ColTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ColTypeContext) Type_db_col() IType_db_colContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_db_colContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_db_colContext)
}

func (s *ColTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColType(s)
	}
}

func (s *ColTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColType(s)
	}
}

func (p *HiveParser) ColType() (localctx IColTypeContext) {
	localctx = NewColTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, HiveParserRULE_colType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2580)
		p.Type_db_col()
	}

	return localctx
}

// IColTypeListContext is an interface to support dynamic dispatch.
type IColTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColTypeListContext differentiates from other interfaces.
	IsColTypeListContext()
}

type ColTypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColTypeListContext() *ColTypeListContext {
	var p = new(ColTypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_colTypeList
	return p
}

func (*ColTypeListContext) IsColTypeListContext() {}

func NewColTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColTypeListContext {
	var p = new(ColTypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_colTypeList

	return p
}

func (s *ColTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColTypeListContext) AllColType() []IColTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColTypeContext)(nil)).Elem())
	var tst = make([]IColTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColTypeContext)
		}
	}

	return tst
}

func (s *ColTypeListContext) ColType(i int) IColTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColTypeContext)
}

func (s *ColTypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColTypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColTypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColTypeList(s)
	}
}

func (s *ColTypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColTypeList(s)
	}
}

func (p *HiveParser) ColTypeList() (localctx IColTypeListContext) {
	localctx = NewColTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, HiveParserRULE_colTypeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2582)
		p.ColType()
	}
	p.SetState(2587)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2583)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2584)
			p.ColType()
		}

		p.SetState(2589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IType_db_colContext is an interface to support dynamic dispatch.
type IType_db_colContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_db_colContext differentiates from other interfaces.
	IsType_db_colContext()
}

type Type_db_colContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_db_colContext() *Type_db_colContext {
	var p = new(Type_db_colContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_type_db_col
	return p
}

func (*Type_db_colContext) IsType_db_colContext() {}

func NewType_db_colContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_db_colContext {
	var p = new(Type_db_colContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_type_db_col

	return p
}

func (s *Type_db_colContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_db_colContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *Type_db_colContext) ListType() IListTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListTypeContext)
}

func (s *Type_db_colContext) StructType() IStructTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *Type_db_colContext) MapType() IMapTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *Type_db_colContext) UnionType() IUnionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionTypeContext)
}

func (s *Type_db_colContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_db_colContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_db_colContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterType_db_col(s)
	}
}

func (s *Type_db_colContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitType_db_col(s)
	}
}

func (p *HiveParser) Type_db_col() (localctx IType_db_colContext) {
	localctx = NewType_db_colContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, HiveParserRULE_type_db_col)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2595)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_BOOLEAN, HiveParserKW_TINYINT, HiveParserKW_SMALLINT, HiveParserKW_INT, HiveParserKW_BIGINT, HiveParserKW_FLOAT, HiveParserKW_DOUBLE, HiveParserKW_DATE, HiveParserKW_DATETIME, HiveParserKW_TIMESTAMP, HiveParserKW_TIMESTAMPLOCALTZ, HiveParserKW_DECIMAL, HiveParserKW_STRING, HiveParserKW_CHAR, HiveParserKW_VARCHAR, HiveParserKW_BINARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2590)
			p.PrimitiveType()
		}

	case HiveParserKW_ARRAY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2591)
			p.ListType()
		}

	case HiveParserKW_STRUCT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2592)
			p.StructType()
		}

	case HiveParserKW_MAP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2593)
			p.MapType()
		}

	case HiveParserKW_UNIONTYPE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2594)
			p.UnionType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimitiveTypeContext is an interface to support dynamic dispatch.
type IPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitiveTypeContext differentiates from other interfaces.
	IsPrimitiveTypeContext()
}

type PrimitiveTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveTypeContext() *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_primitiveType
	return p
}

func (*PrimitiveTypeContext) IsPrimitiveTypeContext() {}

func NewPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_primitiveType

	return p
}

func (s *PrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveTypeContext) KW_TINYINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TINYINT, 0)
}

func (s *PrimitiveTypeContext) KW_SMALLINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SMALLINT, 0)
}

func (s *PrimitiveTypeContext) KW_INT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INT, 0)
}

func (s *PrimitiveTypeContext) KW_BIGINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BIGINT, 0)
}

func (s *PrimitiveTypeContext) KW_BOOLEAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BOOLEAN, 0)
}

func (s *PrimitiveTypeContext) KW_FLOAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FLOAT, 0)
}

func (s *PrimitiveTypeContext) KW_DOUBLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DOUBLE, 0)
}

func (s *PrimitiveTypeContext) KW_PRECISION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRECISION, 0)
}

func (s *PrimitiveTypeContext) KW_DATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATE, 0)
}

func (s *PrimitiveTypeContext) KW_DATETIME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATETIME, 0)
}

func (s *PrimitiveTypeContext) KW_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TIMESTAMP, 0)
}

func (s *PrimitiveTypeContext) KW_TIMESTAMPLOCALTZ() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TIMESTAMPLOCALTZ, 0)
}

func (s *PrimitiveTypeContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *PrimitiveTypeContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCAL, 0)
}

func (s *PrimitiveTypeContext) KW_TIME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TIME, 0)
}

func (s *PrimitiveTypeContext) KW_ZONE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ZONE, 0)
}

func (s *PrimitiveTypeContext) KW_STRING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STRING, 0)
}

func (s *PrimitiveTypeContext) KW_BINARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BINARY, 0)
}

func (s *PrimitiveTypeContext) KW_DECIMAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DECIMAL, 0)
}

func (s *PrimitiveTypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *PrimitiveTypeContext) AllNumber() []antlr.TerminalNode {
	return s.GetTokens(HiveParserNumber)
}

func (s *PrimitiveTypeContext) Number(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, i)
}

func (s *PrimitiveTypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *PrimitiveTypeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, 0)
}

func (s *PrimitiveTypeContext) KW_VARCHAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VARCHAR, 0)
}

func (s *PrimitiveTypeContext) KW_CHAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CHAR, 0)
}

func (s *PrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrimitiveType(s)
	}
}

func (s *PrimitiveTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrimitiveType(s)
	}
}

func (p *HiveParser) PrimitiveType() (localctx IPrimitiveTypeContext) {
	localctx = NewPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, HiveParserRULE_primitiveType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2636)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2597)
			p.Match(HiveParserKW_TINYINT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2598)
			p.Match(HiveParserKW_SMALLINT)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2599)
			p.Match(HiveParserKW_INT)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2600)
			p.Match(HiveParserKW_BIGINT)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2601)
			p.Match(HiveParserKW_BOOLEAN)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2602)
			p.Match(HiveParserKW_FLOAT)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2603)
			p.Match(HiveParserKW_DOUBLE)
		}
		p.SetState(2605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_PRECISION {
			{
				p.SetState(2604)
				p.Match(HiveParserKW_PRECISION)
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2607)
			p.Match(HiveParserKW_DATE)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2608)
			p.Match(HiveParserKW_DATETIME)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2609)
			p.Match(HiveParserKW_TIMESTAMP)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2610)
			p.Match(HiveParserKW_TIMESTAMPLOCALTZ)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2611)
			p.Match(HiveParserKW_TIMESTAMP)
		}
		{
			p.SetState(2612)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(2613)
			p.Match(HiveParserKW_LOCAL)
		}
		{
			p.SetState(2614)
			p.Match(HiveParserKW_TIME)
		}
		{
			p.SetState(2615)
			p.Match(HiveParserKW_ZONE)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2616)
			p.Match(HiveParserKW_STRING)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2617)
			p.Match(HiveParserKW_BINARY)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2618)
			p.Match(HiveParserKW_DECIMAL)
		}
		p.SetState(2626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserLPAREN {
			{
				p.SetState(2619)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(2620)
				p.Match(HiveParserNumber)
			}
			p.SetState(2623)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserCOMMA {
				{
					p.SetState(2621)
					p.Match(HiveParserCOMMA)
				}
				{
					p.SetState(2622)
					p.Match(HiveParserNumber)
				}

			}
			{
				p.SetState(2625)
				p.Match(HiveParserRPAREN)
			}

		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2628)
			p.Match(HiveParserKW_VARCHAR)
		}
		{
			p.SetState(2629)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(2630)
			p.Match(HiveParserNumber)
		}
		{
			p.SetState(2631)
			p.Match(HiveParserRPAREN)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2632)
			p.Match(HiveParserKW_CHAR)
		}
		{
			p.SetState(2633)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(2634)
			p.Match(HiveParserNumber)
		}
		{
			p.SetState(2635)
			p.Match(HiveParserRPAREN)
		}

	}

	return localctx
}

// IListTypeContext is an interface to support dynamic dispatch.
type IListTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListTypeContext differentiates from other interfaces.
	IsListTypeContext()
}

type ListTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListTypeContext() *ListTypeContext {
	var p = new(ListTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_listType
	return p
}

func (*ListTypeContext) IsListTypeContext() {}

func NewListTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListTypeContext {
	var p = new(ListTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_listType

	return p
}

func (s *ListTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ListTypeContext) KW_ARRAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ARRAY, 0)
}

func (s *ListTypeContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *ListTypeContext) Type_db_col() IType_db_colContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_db_colContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_db_colContext)
}

func (s *ListTypeContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *ListTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterListType(s)
	}
}

func (s *ListTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitListType(s)
	}
}

func (p *HiveParser) ListType() (localctx IListTypeContext) {
	localctx = NewListTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, HiveParserRULE_listType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2638)
		p.Match(HiveParserKW_ARRAY)
	}
	{
		p.SetState(2639)
		p.Match(HiveParserLESSTHAN)
	}
	{
		p.SetState(2640)
		p.Type_db_col()
	}
	{
		p.SetState(2641)
		p.Match(HiveParserGREATERTHAN)
	}

	return localctx
}

// IStructTypeContext is an interface to support dynamic dispatch.
type IStructTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructTypeContext differentiates from other interfaces.
	IsStructTypeContext()
}

type StructTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructTypeContext() *StructTypeContext {
	var p = new(StructTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_structType
	return p
}

func (*StructTypeContext) IsStructTypeContext() {}

func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructTypeContext {
	var p = new(StructTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_structType

	return p
}

func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *StructTypeContext) KW_STRUCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STRUCT, 0)
}

func (s *StructTypeContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *StructTypeContext) ColumnNameColonTypeList() IColumnNameColonTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameColonTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameColonTypeListContext)
}

func (s *StructTypeContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterStructType(s)
	}
}

func (s *StructTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitStructType(s)
	}
}

func (p *HiveParser) StructType() (localctx IStructTypeContext) {
	localctx = NewStructTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, HiveParserRULE_structType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2643)
		p.Match(HiveParserKW_STRUCT)
	}
	{
		p.SetState(2644)
		p.Match(HiveParserLESSTHAN)
	}
	{
		p.SetState(2645)
		p.ColumnNameColonTypeList()
	}
	{
		p.SetState(2646)
		p.Match(HiveParserGREATERTHAN)
	}

	return localctx
}

// IMapTypeContext is an interface to support dynamic dispatch.
type IMapTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeContext differentiates from other interfaces.
	IsMapTypeContext()
}

type MapTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeContext() *MapTypeContext {
	var p = new(MapTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_mapType
	return p
}

func (*MapTypeContext) IsMapTypeContext() {}

func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeContext {
	var p = new(MapTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_mapType

	return p
}

func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeContext) KW_MAP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAP, 0)
}

func (s *MapTypeContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *MapTypeContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *MapTypeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, 0)
}

func (s *MapTypeContext) Type_db_col() IType_db_colContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_db_colContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_db_colContext)
}

func (s *MapTypeContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterMapType(s)
	}
}

func (s *MapTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitMapType(s)
	}
}

func (p *HiveParser) MapType() (localctx IMapTypeContext) {
	localctx = NewMapTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, HiveParserRULE_mapType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2648)
		p.Match(HiveParserKW_MAP)
	}
	{
		p.SetState(2649)
		p.Match(HiveParserLESSTHAN)
	}
	{
		p.SetState(2650)
		p.PrimitiveType()
	}
	{
		p.SetState(2651)
		p.Match(HiveParserCOMMA)
	}
	{
		p.SetState(2652)
		p.Type_db_col()
	}
	{
		p.SetState(2653)
		p.Match(HiveParserGREATERTHAN)
	}

	return localctx
}

// IUnionTypeContext is an interface to support dynamic dispatch.
type IUnionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionTypeContext differentiates from other interfaces.
	IsUnionTypeContext()
}

type UnionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionTypeContext() *UnionTypeContext {
	var p = new(UnionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_unionType
	return p
}

func (*UnionTypeContext) IsUnionTypeContext() {}

func NewUnionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionTypeContext {
	var p = new(UnionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_unionType

	return p
}

func (s *UnionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionTypeContext) KW_UNIONTYPE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNIONTYPE, 0)
}

func (s *UnionTypeContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *UnionTypeContext) ColTypeList() IColTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColTypeListContext)
}

func (s *UnionTypeContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *UnionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUnionType(s)
	}
}

func (s *UnionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUnionType(s)
	}
}

func (p *HiveParser) UnionType() (localctx IUnionTypeContext) {
	localctx = NewUnionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, HiveParserRULE_unionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2655)
		p.Match(HiveParserKW_UNIONTYPE)
	}
	{
		p.SetState(2656)
		p.Match(HiveParserLESSTHAN)
	}
	{
		p.SetState(2657)
		p.ColTypeList()
	}
	{
		p.SetState(2658)
		p.Match(HiveParserGREATERTHAN)
	}

	return localctx
}

// ISetOperatorContext is an interface to support dynamic dispatch.
type ISetOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetOperatorContext differentiates from other interfaces.
	IsSetOperatorContext()
}

type SetOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetOperatorContext() *SetOperatorContext {
	var p = new(SetOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_setOperator
	return p
}

func (*SetOperatorContext) IsSetOperatorContext() {}

func NewSetOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetOperatorContext {
	var p = new(SetOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_setOperator

	return p
}

func (s *SetOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *SetOperatorContext) KW_UNION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNION, 0)
}

func (s *SetOperatorContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *SetOperatorContext) KW_DISTINCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTINCT, 0)
}

func (s *SetOperatorContext) KW_INTERSECT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTERSECT, 0)
}

func (s *SetOperatorContext) KW_EXCEPT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXCEPT, 0)
}

func (s *SetOperatorContext) KW_MINUS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MINUS, 0)
}

func (s *SetOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSetOperator(s)
	}
}

func (s *SetOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSetOperator(s)
	}
}

func (p *HiveParser) SetOperator() (localctx ISetOperatorContext) {
	localctx = NewSetOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, HiveParserRULE_setOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2684)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 268, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2660)
			p.Match(HiveParserKW_UNION)
		}
		{
			p.SetState(2661)
			p.Match(HiveParserKW_ALL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2662)
			p.Match(HiveParserKW_UNION)
		}
		p.SetState(2664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DISTINCT {
			{
				p.SetState(2663)
				p.Match(HiveParserKW_DISTINCT)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2666)
			p.Match(HiveParserKW_INTERSECT)
		}
		{
			p.SetState(2667)
			p.Match(HiveParserKW_ALL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2668)
			p.Match(HiveParserKW_INTERSECT)
		}
		p.SetState(2670)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DISTINCT {
			{
				p.SetState(2669)
				p.Match(HiveParserKW_DISTINCT)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2672)
			p.Match(HiveParserKW_EXCEPT)
		}
		{
			p.SetState(2673)
			p.Match(HiveParserKW_ALL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2674)
			p.Match(HiveParserKW_EXCEPT)
		}
		p.SetState(2676)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DISTINCT {
			{
				p.SetState(2675)
				p.Match(HiveParserKW_DISTINCT)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2678)
			p.Match(HiveParserKW_MINUS)
		}
		{
			p.SetState(2679)
			p.Match(HiveParserKW_ALL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2680)
			p.Match(HiveParserKW_MINUS)
		}
		p.SetState(2682)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DISTINCT {
			{
				p.SetState(2681)
				p.Match(HiveParserKW_DISTINCT)
			}

		}

	}

	return localctx
}

// IQueryStatementExpressionContext is an interface to support dynamic dispatch.
type IQueryStatementExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryStatementExpressionContext differentiates from other interfaces.
	IsQueryStatementExpressionContext()
}

type QueryStatementExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryStatementExpressionContext() *QueryStatementExpressionContext {
	var p = new(QueryStatementExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_queryStatementExpression
	return p
}

func (*QueryStatementExpressionContext) IsQueryStatementExpressionContext() {}

func NewQueryStatementExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryStatementExpressionContext {
	var p = new(QueryStatementExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_queryStatementExpression

	return p
}

func (s *QueryStatementExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryStatementExpressionContext) QueryStatementExpressionBody() IQueryStatementExpressionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryStatementExpressionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryStatementExpressionBodyContext)
}

func (s *QueryStatementExpressionContext) WithClause() IWithClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *QueryStatementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryStatementExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryStatementExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterQueryStatementExpression(s)
	}
}

func (s *QueryStatementExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitQueryStatementExpression(s)
	}
}

func (p *HiveParser) QueryStatementExpression() (localctx IQueryStatementExpressionContext) {
	localctx = NewQueryStatementExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, HiveParserRULE_queryStatementExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2687)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(2686)
			p.WithClause()
		}

	}
	{
		p.SetState(2689)
		p.QueryStatementExpressionBody()
	}

	return localctx
}

// IQueryStatementExpressionBodyContext is an interface to support dynamic dispatch.
type IQueryStatementExpressionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryStatementExpressionBodyContext differentiates from other interfaces.
	IsQueryStatementExpressionBodyContext()
}

type QueryStatementExpressionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryStatementExpressionBodyContext() *QueryStatementExpressionBodyContext {
	var p = new(QueryStatementExpressionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_queryStatementExpressionBody
	return p
}

func (*QueryStatementExpressionBodyContext) IsQueryStatementExpressionBodyContext() {}

func NewQueryStatementExpressionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryStatementExpressionBodyContext {
	var p = new(QueryStatementExpressionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_queryStatementExpressionBody

	return p
}

func (s *QueryStatementExpressionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryStatementExpressionBodyContext) FromStatement() IFromStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromStatementContext)
}

func (s *QueryStatementExpressionBodyContext) RegularBody() IRegularBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularBodyContext)
}

func (s *QueryStatementExpressionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryStatementExpressionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryStatementExpressionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterQueryStatementExpressionBody(s)
	}
}

func (s *QueryStatementExpressionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitQueryStatementExpressionBody(s)
	}
}

func (p *HiveParser) QueryStatementExpressionBody() (localctx IQueryStatementExpressionBodyContext) {
	localctx = NewQueryStatementExpressionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, HiveParserRULE_queryStatementExpressionBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2693)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_FROM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2691)
			p.FromStatement()
		}

	case HiveParserKW_SELECT, HiveParserKW_INSERT, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2692)
			p.RegularBody()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWithClauseContext is an interface to support dynamic dispatch.
type IWithClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithClauseContext differentiates from other interfaces.
	IsWithClauseContext()
}

type WithClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithClauseContext() *WithClauseContext {
	var p = new(WithClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_withClause
	return p
}

func (*WithClauseContext) IsWithClauseContext() {}

func NewWithClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithClauseContext {
	var p = new(WithClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_withClause

	return p
}

func (s *WithClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WithClauseContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *WithClauseContext) AllCteStatement() []ICteStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICteStatementContext)(nil)).Elem())
	var tst = make([]ICteStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICteStatementContext)
		}
	}

	return tst
}

func (s *WithClauseContext) CteStatement(i int) ICteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICteStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICteStatementContext)
}

func (s *WithClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *WithClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *WithClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWithClause(s)
	}
}

func (s *WithClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWithClause(s)
	}
}

func (p *HiveParser) WithClause() (localctx IWithClauseContext) {
	localctx = NewWithClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, HiveParserRULE_withClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2695)
		p.Match(HiveParserKW_WITH)
	}
	{
		p.SetState(2696)
		p.CteStatement()
	}
	p.SetState(2701)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2697)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2698)
			p.CteStatement()
		}

		p.SetState(2703)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICteStatementContext is an interface to support dynamic dispatch.
type ICteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCteStatementContext differentiates from other interfaces.
	IsCteStatementContext()
}

type CteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCteStatementContext() *CteStatementContext {
	var p = new(CteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_cteStatement
	return p
}

func (*CteStatementContext) IsCteStatementContext() {}

func NewCteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CteStatementContext {
	var p = new(CteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_cteStatement

	return p
}

func (s *CteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CteStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CteStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *CteStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *CteStatementContext) QueryStatementExpression() IQueryStatementExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryStatementExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryStatementExpressionContext)
}

func (s *CteStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *CteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCteStatement(s)
	}
}

func (s *CteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCteStatement(s)
	}
}

func (p *HiveParser) CteStatement() (localctx ICteStatementContext) {
	localctx = NewCteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, HiveParserRULE_cteStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2704)
		p.Identifier()
	}
	{
		p.SetState(2705)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(2706)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(2707)
		p.QueryStatementExpression()
	}
	{
		p.SetState(2708)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IFromStatementContext is an interface to support dynamic dispatch.
type IFromStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromStatementContext differentiates from other interfaces.
	IsFromStatementContext()
}

type FromStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromStatementContext() *FromStatementContext {
	var p = new(FromStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_fromStatement
	return p
}

func (*FromStatementContext) IsFromStatementContext() {}

func NewFromStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromStatementContext {
	var p = new(FromStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_fromStatement

	return p
}

func (s *FromStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FromStatementContext) AllSingleFromStatement() []ISingleFromStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleFromStatementContext)(nil)).Elem())
	var tst = make([]ISingleFromStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleFromStatementContext)
		}
	}

	return tst
}

func (s *FromStatementContext) SingleFromStatement(i int) ISingleFromStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleFromStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleFromStatementContext)
}

func (s *FromStatementContext) AllSetOperator() []ISetOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISetOperatorContext)(nil)).Elem())
	var tst = make([]ISetOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISetOperatorContext)
		}
	}

	return tst
}

func (s *FromStatementContext) SetOperator(i int) ISetOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISetOperatorContext)
}

func (s *FromStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFromStatement(s)
	}
}

func (s *FromStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFromStatement(s)
	}
}

func (p *HiveParser) FromStatement() (localctx IFromStatementContext) {
	localctx = NewFromStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, HiveParserRULE_fromStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2710)
		p.SingleFromStatement()
	}

	p.SetState(2716)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserKW_UNION || _la == HiveParserKW_EXCEPT || _la == HiveParserKW_MINUS || _la == HiveParserKW_INTERSECT {
		{
			p.SetState(2711)
			p.SetOperator()
		}
		{
			p.SetState(2712)
			p.SingleFromStatement()
		}

		p.SetState(2718)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISingleFromStatementContext is an interface to support dynamic dispatch.
type ISingleFromStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleFromStatementContext differentiates from other interfaces.
	IsSingleFromStatementContext()
}

type SingleFromStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleFromStatementContext() *SingleFromStatementContext {
	var p = new(SingleFromStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_singleFromStatement
	return p
}

func (*SingleFromStatementContext) IsSingleFromStatementContext() {}

func NewSingleFromStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleFromStatementContext {
	var p = new(SingleFromStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_singleFromStatement

	return p
}

func (s *SingleFromStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleFromStatementContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *SingleFromStatementContext) AllBody() []IBodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBodyContext)(nil)).Elem())
	var tst = make([]IBodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBodyContext)
		}
	}

	return tst
}

func (s *SingleFromStatementContext) Body(i int) IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *SingleFromStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleFromStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleFromStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSingleFromStatement(s)
	}
}

func (s *SingleFromStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSingleFromStatement(s)
	}
}

func (p *HiveParser) SingleFromStatement() (localctx ISingleFromStatementContext) {
	localctx = NewSingleFromStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, HiveParserRULE_singleFromStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2719)
		p.FromClause()
	}
	p.SetState(2721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserKW_SELECT || _la == HiveParserKW_INSERT || _la == HiveParserKW_MAP || _la == HiveParserKW_REDUCE {
		{
			p.SetState(2720)
			p.Body()
		}

		p.SetState(2723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRegularBodyContext is an interface to support dynamic dispatch.
type IRegularBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRegularBodyContext differentiates from other interfaces.
	IsRegularBodyContext()
}

type RegularBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRegularBodyContext() *RegularBodyContext {
	var p = new(RegularBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_regularBody
	return p
}

func (*RegularBodyContext) IsRegularBodyContext() {}

func NewRegularBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RegularBodyContext {
	var p = new(RegularBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_regularBody

	return p
}

func (s *RegularBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *RegularBodyContext) InsertClause() IInsertClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertClauseContext)
}

func (s *RegularBodyContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *RegularBodyContext) ValuesClause() IValuesClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValuesClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValuesClauseContext)
}

func (s *RegularBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegularBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RegularBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRegularBody(s)
	}
}

func (s *RegularBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRegularBody(s)
	}
}

func (p *HiveParser) RegularBody() (localctx IRegularBodyContext) {
	localctx = NewRegularBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, HiveParserRULE_regularBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2731)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_INSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2725)
			p.InsertClause()
		}
		p.SetState(2728)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_SELECT, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserLPAREN:
			{
				p.SetState(2726)
				p.SelectStatement()
			}

		case HiveParserKW_VALUES:
			{
				p.SetState(2727)
				p.ValuesClause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case HiveParserKW_SELECT, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2730)
			p.SelectStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtomSelectStatementContext is an interface to support dynamic dispatch.
type IAtomSelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomSelectStatementContext differentiates from other interfaces.
	IsAtomSelectStatementContext()
}

type AtomSelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomSelectStatementContext() *AtomSelectStatementContext {
	var p = new(AtomSelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_atomSelectStatement
	return p
}

func (*AtomSelectStatementContext) IsAtomSelectStatementContext() {}

func NewAtomSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomSelectStatementContext {
	var p = new(AtomSelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_atomSelectStatement

	return p
}

func (s *AtomSelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomSelectStatementContext) SelectClause() ISelectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectClauseContext)
}

func (s *AtomSelectStatementContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *AtomSelectStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *AtomSelectStatementContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *AtomSelectStatementContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *AtomSelectStatementContext) Window_clause() IWindow_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *AtomSelectStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *AtomSelectStatementContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *AtomSelectStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *AtomSelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomSelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomSelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAtomSelectStatement(s)
	}
}

func (s *AtomSelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAtomSelectStatement(s)
	}
}

func (p *HiveParser) AtomSelectStatement() (localctx IAtomSelectStatementContext) {
	localctx = NewAtomSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, HiveParserRULE_atomSelectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2753)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_SELECT, HiveParserKW_MAP, HiveParserKW_REDUCE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2733)
			p.SelectClause()
		}
		p.SetState(2735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_FROM {
			{
				p.SetState(2734)
				p.FromClause()
			}

		}
		p.SetState(2738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WHERE {
			{
				p.SetState(2737)
				p.WhereClause()
			}

		}
		p.SetState(2741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_GROUP {
			{
				p.SetState(2740)
				p.GroupByClause()
			}

		}
		p.SetState(2744)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_HAVING {
			{
				p.SetState(2743)
				p.HavingClause()
			}

		}
		p.SetState(2747)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WINDOW {
			{
				p.SetState(2746)
				p.Window_clause()
			}

		}

	case HiveParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2749)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(2750)
			p.SelectStatement()
		}
		{
			p.SetState(2751)
			p.Match(HiveParserRPAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectStatement
	return p
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) AtomSelectStatement() IAtomSelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomSelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomSelectStatementContext)
}

func (s *SelectStatementContext) SetOpSelectStatement() ISetOpSelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetOpSelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetOpSelectStatementContext)
}

func (s *SelectStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SelectStatementContext) ClusterByClause() IClusterByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusterByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusterByClauseContext)
}

func (s *SelectStatementContext) DistributeByClause() IDistributeByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDistributeByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDistributeByClauseContext)
}

func (s *SelectStatementContext) SortByClause() ISortByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISortByClauseContext)
}

func (s *SelectStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectStatement(s)
	}
}

func (s *SelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectStatement(s)
	}
}

func (p *HiveParser) SelectStatement() (localctx ISelectStatementContext) {
	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, HiveParserRULE_selectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2755)
		p.AtomSelectStatement()
	}
	p.SetState(2757)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_UNION || _la == HiveParserKW_EXCEPT || _la == HiveParserKW_MINUS || _la == HiveParserKW_INTERSECT {
		{
			p.SetState(2756)
			p.SetOpSelectStatement()
		}

	}
	p.SetState(2760)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ORDER {
		{
			p.SetState(2759)
			p.OrderByClause()
		}

	}
	p.SetState(2763)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_CLUSTER {
		{
			p.SetState(2762)
			p.ClusterByClause()
		}

	}
	p.SetState(2766)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_DISTRIBUTE {
		{
			p.SetState(2765)
			p.DistributeByClause()
		}

	}
	p.SetState(2769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_SORT {
		{
			p.SetState(2768)
			p.SortByClause()
		}

	}
	p.SetState(2772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_LIMIT {
		{
			p.SetState(2771)
			p.LimitClause()
		}

	}

	return localctx
}

// ISetOpSelectStatementContext is an interface to support dynamic dispatch.
type ISetOpSelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetOpSelectStatementContext differentiates from other interfaces.
	IsSetOpSelectStatementContext()
}

type SetOpSelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetOpSelectStatementContext() *SetOpSelectStatementContext {
	var p = new(SetOpSelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_setOpSelectStatement
	return p
}

func (*SetOpSelectStatementContext) IsSetOpSelectStatementContext() {}

func NewSetOpSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetOpSelectStatementContext {
	var p = new(SetOpSelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_setOpSelectStatement

	return p
}

func (s *SetOpSelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetOpSelectStatementContext) AllSetOperator() []ISetOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISetOperatorContext)(nil)).Elem())
	var tst = make([]ISetOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISetOperatorContext)
		}
	}

	return tst
}

func (s *SetOpSelectStatementContext) SetOperator(i int) ISetOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISetOperatorContext)
}

func (s *SetOpSelectStatementContext) AllAtomSelectStatement() []IAtomSelectStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtomSelectStatementContext)(nil)).Elem())
	var tst = make([]IAtomSelectStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtomSelectStatementContext)
		}
	}

	return tst
}

func (s *SetOpSelectStatementContext) AtomSelectStatement(i int) IAtomSelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomSelectStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtomSelectStatementContext)
}

func (s *SetOpSelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetOpSelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetOpSelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSetOpSelectStatement(s)
	}
}

func (s *SetOpSelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSetOpSelectStatement(s)
	}
}

func (p *HiveParser) SetOpSelectStatement() (localctx ISetOpSelectStatementContext) {
	localctx = NewSetOpSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, HiveParserRULE_setOpSelectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserKW_UNION || _la == HiveParserKW_EXCEPT || _la == HiveParserKW_MINUS || _la == HiveParserKW_INTERSECT {
		{
			p.SetState(2774)
			p.SetOperator()
		}
		{
			p.SetState(2775)
			p.AtomSelectStatement()
		}

		p.SetState(2779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectStatementWithCTEContext is an interface to support dynamic dispatch.
type ISelectStatementWithCTEContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStatementWithCTEContext differentiates from other interfaces.
	IsSelectStatementWithCTEContext()
}

type SelectStatementWithCTEContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementWithCTEContext() *SelectStatementWithCTEContext {
	var p = new(SelectStatementWithCTEContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectStatementWithCTE
	return p
}

func (*SelectStatementWithCTEContext) IsSelectStatementWithCTEContext() {}

func NewSelectStatementWithCTEContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementWithCTEContext {
	var p = new(SelectStatementWithCTEContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectStatementWithCTE

	return p
}

func (s *SelectStatementWithCTEContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementWithCTEContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SelectStatementWithCTEContext) WithClause() IWithClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *SelectStatementWithCTEContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementWithCTEContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStatementWithCTEContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectStatementWithCTE(s)
	}
}

func (s *SelectStatementWithCTEContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectStatementWithCTE(s)
	}
}

func (p *HiveParser) SelectStatementWithCTE() (localctx ISelectStatementWithCTEContext) {
	localctx = NewSelectStatementWithCTEContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, HiveParserRULE_selectStatementWithCTE)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(2781)
			p.WithClause()
		}

	}
	{
		p.SetState(2784)
		p.SelectStatement()
	}

	return localctx
}

// IBodyContext is an interface to support dynamic dispatch.
type IBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBodyContext differentiates from other interfaces.
	IsBodyContext()
}

type BodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBodyContext() *BodyContext {
	var p = new(BodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_body
	return p
}

func (*BodyContext) IsBodyContext() {}

func NewBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BodyContext {
	var p = new(BodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_body

	return p
}

func (s *BodyContext) GetParser() antlr.Parser { return s.parser }

func (s *BodyContext) InsertClause() IInsertClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertClauseContext)
}

func (s *BodyContext) SelectClause() ISelectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectClauseContext)
}

func (s *BodyContext) LateralView() ILateralViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILateralViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILateralViewContext)
}

func (s *BodyContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *BodyContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *BodyContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *BodyContext) Window_clause() IWindow_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *BodyContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *BodyContext) ClusterByClause() IClusterByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusterByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusterByClauseContext)
}

func (s *BodyContext) DistributeByClause() IDistributeByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDistributeByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDistributeByClauseContext)
}

func (s *BodyContext) SortByClause() ISortByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISortByClauseContext)
}

func (s *BodyContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *BodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterBody(s)
	}
}

func (s *BodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitBody(s)
	}
}

func (p *HiveParser) Body() (localctx IBodyContext) {
	localctx = NewBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, HiveParserRULE_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2849)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_INSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2786)
			p.InsertClause()
		}
		{
			p.SetState(2787)
			p.SelectClause()
		}
		p.SetState(2789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LATERAL || _la == HiveParserCOMMA {
			{
				p.SetState(2788)
				p.LateralView()
			}

		}
		p.SetState(2792)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WHERE {
			{
				p.SetState(2791)
				p.WhereClause()
			}

		}
		p.SetState(2795)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_GROUP {
			{
				p.SetState(2794)
				p.GroupByClause()
			}

		}
		p.SetState(2798)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_HAVING {
			{
				p.SetState(2797)
				p.HavingClause()
			}

		}
		p.SetState(2801)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WINDOW {
			{
				p.SetState(2800)
				p.Window_clause()
			}

		}
		p.SetState(2804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ORDER {
			{
				p.SetState(2803)
				p.OrderByClause()
			}

		}
		p.SetState(2807)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_CLUSTER {
			{
				p.SetState(2806)
				p.ClusterByClause()
			}

		}
		p.SetState(2810)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DISTRIBUTE {
			{
				p.SetState(2809)
				p.DistributeByClause()
			}

		}
		p.SetState(2813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_SORT {
			{
				p.SetState(2812)
				p.SortByClause()
			}

		}
		p.SetState(2816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LIMIT {
			{
				p.SetState(2815)
				p.LimitClause()
			}

		}

	case HiveParserKW_SELECT, HiveParserKW_MAP, HiveParserKW_REDUCE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2818)
			p.SelectClause()
		}
		p.SetState(2820)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LATERAL || _la == HiveParserCOMMA {
			{
				p.SetState(2819)
				p.LateralView()
			}

		}
		p.SetState(2823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WHERE {
			{
				p.SetState(2822)
				p.WhereClause()
			}

		}
		p.SetState(2826)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_GROUP {
			{
				p.SetState(2825)
				p.GroupByClause()
			}

		}
		p.SetState(2829)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_HAVING {
			{
				p.SetState(2828)
				p.HavingClause()
			}

		}
		p.SetState(2832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WINDOW {
			{
				p.SetState(2831)
				p.Window_clause()
			}

		}
		p.SetState(2835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ORDER {
			{
				p.SetState(2834)
				p.OrderByClause()
			}

		}
		p.SetState(2838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_CLUSTER {
			{
				p.SetState(2837)
				p.ClusterByClause()
			}

		}
		p.SetState(2841)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_DISTRIBUTE {
			{
				p.SetState(2840)
				p.DistributeByClause()
			}

		}
		p.SetState(2844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_SORT {
			{
				p.SetState(2843)
				p.SortByClause()
			}

		}
		p.SetState(2847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LIMIT {
			{
				p.SetState(2846)
				p.LimitClause()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInsertClauseContext is an interface to support dynamic dispatch.
type IInsertClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertClauseContext differentiates from other interfaces.
	IsInsertClauseContext()
}

type InsertClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertClauseContext() *InsertClauseContext {
	var p = new(InsertClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_insertClause
	return p
}

func (*InsertClauseContext) IsInsertClauseContext() {}

func NewInsertClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertClauseContext {
	var p = new(InsertClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_insertClause

	return p
}

func (s *InsertClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertClauseContext) KW_INSERT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INSERT, 0)
}

func (s *InsertClauseContext) KW_OVERWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OVERWRITE, 0)
}

func (s *InsertClauseContext) Destination() IDestinationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestinationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestinationContext)
}

func (s *InsertClauseContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *InsertClauseContext) KW_INTO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTO, 0)
}

func (s *InsertClauseContext) TableOrPartition() ITableOrPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrPartitionContext)
}

func (s *InsertClauseContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *InsertClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *InsertClauseContext) ColumnNameList() IColumnNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameListContext)
}

func (s *InsertClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *InsertClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterInsertClause(s)
	}
}

func (s *InsertClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitInsertClause(s)
	}
}

func (p *HiveParser) InsertClause() (localctx IInsertClauseContext) {
	localctx = NewInsertClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, HiveParserRULE_insertClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2869)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2851)
			p.Match(HiveParserKW_INSERT)
		}
		{
			p.SetState(2852)
			p.Match(HiveParserKW_OVERWRITE)
		}
		{
			p.SetState(2853)
			p.Destination()
		}
		p.SetState(2855)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_IF {
			{
				p.SetState(2854)
				p.IfNotExists()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2857)
			p.Match(HiveParserKW_INSERT)
		}
		{
			p.SetState(2858)
			p.Match(HiveParserKW_INTO)
		}
		p.SetState(2860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_TABLE {
			{
				p.SetState(2859)
				p.Match(HiveParserKW_TABLE)
			}

		}
		{
			p.SetState(2862)
			p.TableOrPartition()
		}
		p.SetState(2867)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 313, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2863)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(2864)
				p.ColumnNameList()
			}
			{
				p.SetState(2865)
				p.Match(HiveParserRPAREN)
			}

		}

	}

	return localctx
}

// IDestinationContext is an interface to support dynamic dispatch.
type IDestinationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDestinationContext differentiates from other interfaces.
	IsDestinationContext()
}

type DestinationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDestinationContext() *DestinationContext {
	var p = new(DestinationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_destination
	return p
}

func (*DestinationContext) IsDestinationContext() {}

func NewDestinationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DestinationContext {
	var p = new(DestinationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_destination

	return p
}

func (s *DestinationContext) GetParser() antlr.Parser { return s.parser }

func (s *DestinationContext) KW_DIRECTORY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DIRECTORY, 0)
}

func (s *DestinationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *DestinationContext) KW_LOCAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCAL, 0)
}

func (s *DestinationContext) TableRowFormat() ITableRowFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableRowFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableRowFormatContext)
}

func (s *DestinationContext) TableFileFormat() ITableFileFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableFileFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableFileFormatContext)
}

func (s *DestinationContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *DestinationContext) TableOrPartition() ITableOrPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrPartitionContext)
}

func (s *DestinationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DestinationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DestinationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDestination(s)
	}
}

func (s *DestinationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDestination(s)
	}
}

func (p *HiveParser) Destination() (localctx IDestinationContext) {
	localctx = NewDestinationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, HiveParserRULE_destination)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2884)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_DIRECTORY, HiveParserKW_LOCAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2872)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_LOCAL {
			{
				p.SetState(2871)
				p.Match(HiveParserKW_LOCAL)
			}

		}
		{
			p.SetState(2874)
			p.Match(HiveParserKW_DIRECTORY)
		}
		{
			p.SetState(2875)
			p.Match(HiveParserStringLiteral)
		}
		p.SetState(2877)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ROW {
			{
				p.SetState(2876)
				p.TableRowFormat()
			}

		}
		p.SetState(2880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_STORED {
			{
				p.SetState(2879)
				p.TableFileFormat()
			}

		}

	case HiveParserKW_TABLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2882)
			p.Match(HiveParserKW_TABLE)
		}
		{
			p.SetState(2883)
			p.TableOrPartition()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_limitClause
	return p
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) KW_LIMIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIMIT, 0)
}

func (s *LimitClauseContext) AllNumber() []antlr.TerminalNode {
	return s.GetTokens(HiveParserNumber)
}

func (s *LimitClauseContext) Number(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, i)
}

func (s *LimitClauseContext) COMMA() antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, 0)
}

func (s *LimitClauseContext) KW_OFFSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OFFSET, 0)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (p *HiveParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, HiveParserRULE_limitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2896)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 320, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2886)
			p.Match(HiveParserKW_LIMIT)
		}

		p.SetState(2889)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 319, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2887)
				p.Match(HiveParserNumber)
			}
			{
				p.SetState(2888)
				p.Match(HiveParserCOMMA)
			}

		}
		{
			p.SetState(2891)
			p.Match(HiveParserNumber)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2892)
			p.Match(HiveParserKW_LIMIT)
		}
		{
			p.SetState(2893)
			p.Match(HiveParserNumber)
		}
		{
			p.SetState(2894)
			p.Match(HiveParserKW_OFFSET)
		}
		{
			p.SetState(2895)
			p.Match(HiveParserNumber)
		}

	}

	return localctx
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_deleteStatement
	return p
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) KW_DELETE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DELETE, 0)
}

func (s *DeleteStatementContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *DeleteStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DeleteStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDeleteStatement(s)
	}
}

func (p *HiveParser) DeleteStatement() (localctx IDeleteStatementContext) {
	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, HiveParserRULE_deleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2898)
		p.Match(HiveParserKW_DELETE)
	}
	{
		p.SetState(2899)
		p.Match(HiveParserKW_FROM)
	}
	{
		p.SetState(2900)
		p.TableName()
	}
	p.SetState(2902)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WHERE {
		{
			p.SetState(2901)
			p.WhereClause()
		}

	}

	return localctx
}

// IColumnAssignmentClauseContext is an interface to support dynamic dispatch.
type IColumnAssignmentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnAssignmentClauseContext differentiates from other interfaces.
	IsColumnAssignmentClauseContext()
}

type ColumnAssignmentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnAssignmentClauseContext() *ColumnAssignmentClauseContext {
	var p = new(ColumnAssignmentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnAssignmentClause
	return p
}

func (*ColumnAssignmentClauseContext) IsColumnAssignmentClauseContext() {}

func NewColumnAssignmentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnAssignmentClauseContext {
	var p = new(ColumnAssignmentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnAssignmentClause

	return p
}

func (s *ColumnAssignmentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnAssignmentClauseContext) TableOrColumn() ITableOrColumnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrColumnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrColumnContext)
}

func (s *ColumnAssignmentClauseContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *ColumnAssignmentClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ColumnAssignmentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnAssignmentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnAssignmentClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnAssignmentClause(s)
	}
}

func (s *ColumnAssignmentClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnAssignmentClause(s)
	}
}

func (p *HiveParser) ColumnAssignmentClause() (localctx IColumnAssignmentClauseContext) {
	localctx = NewColumnAssignmentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, HiveParserRULE_columnAssignmentClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2904)
		p.TableOrColumn()
	}
	{
		p.SetState(2905)
		p.Match(HiveParserEQUAL)
	}
	{
		p.SetState(2906)
		p.expression(0)
	}

	return localctx
}

// ISetColumnsClauseContext is an interface to support dynamic dispatch.
type ISetColumnsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetColumnsClauseContext differentiates from other interfaces.
	IsSetColumnsClauseContext()
}

type SetColumnsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetColumnsClauseContext() *SetColumnsClauseContext {
	var p = new(SetColumnsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_setColumnsClause
	return p
}

func (*SetColumnsClauseContext) IsSetColumnsClauseContext() {}

func NewSetColumnsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetColumnsClauseContext {
	var p = new(SetColumnsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_setColumnsClause

	return p
}

func (s *SetColumnsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SetColumnsClauseContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *SetColumnsClauseContext) AllColumnAssignmentClause() []IColumnAssignmentClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnAssignmentClauseContext)(nil)).Elem())
	var tst = make([]IColumnAssignmentClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnAssignmentClauseContext)
		}
	}

	return tst
}

func (s *SetColumnsClauseContext) ColumnAssignmentClause(i int) IColumnAssignmentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAssignmentClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnAssignmentClauseContext)
}

func (s *SetColumnsClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SetColumnsClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SetColumnsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetColumnsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetColumnsClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSetColumnsClause(s)
	}
}

func (s *SetColumnsClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSetColumnsClause(s)
	}
}

func (p *HiveParser) SetColumnsClause() (localctx ISetColumnsClauseContext) {
	localctx = NewSetColumnsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, HiveParserRULE_setColumnsClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2908)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(2909)
		p.ColumnAssignmentClause()
	}
	p.SetState(2914)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(2910)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(2911)
			p.ColumnAssignmentClause()
		}

		p.SetState(2916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_updateStatement
	return p
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *UpdateStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *UpdateStatementContext) SetColumnsClause() ISetColumnsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetColumnsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetColumnsClauseContext)
}

func (s *UpdateStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUpdateStatement(s)
	}
}

func (p *HiveParser) UpdateStatement() (localctx IUpdateStatementContext) {
	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, HiveParserRULE_updateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2917)
		p.Match(HiveParserKW_UPDATE)
	}
	{
		p.SetState(2918)
		p.TableName()
	}
	{
		p.SetState(2919)
		p.SetColumnsClause()
	}
	p.SetState(2921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WHERE {
		{
			p.SetState(2920)
			p.WhereClause()
		}

	}

	return localctx
}

// ISqlTransactionStatementContext is an interface to support dynamic dispatch.
type ISqlTransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlTransactionStatementContext differentiates from other interfaces.
	IsSqlTransactionStatementContext()
}

type SqlTransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlTransactionStatementContext() *SqlTransactionStatementContext {
	var p = new(SqlTransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_sqlTransactionStatement
	return p
}

func (*SqlTransactionStatementContext) IsSqlTransactionStatementContext() {}

func NewSqlTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlTransactionStatementContext {
	var p = new(SqlTransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_sqlTransactionStatement

	return p
}

func (s *SqlTransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlTransactionStatementContext) StartTransactionStatement() IStartTransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartTransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartTransactionStatementContext)
}

func (s *SqlTransactionStatementContext) CommitStatement() ICommitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommitStatementContext)
}

func (s *SqlTransactionStatementContext) RollbackStatement() IRollbackStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollbackStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollbackStatementContext)
}

func (s *SqlTransactionStatementContext) SetAutoCommitStatement() ISetAutoCommitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAutoCommitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAutoCommitStatementContext)
}

func (s *SqlTransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlTransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlTransactionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSqlTransactionStatement(s)
	}
}

func (s *SqlTransactionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSqlTransactionStatement(s)
	}
}

func (p *HiveParser) SqlTransactionStatement() (localctx ISqlTransactionStatementContext) {
	localctx = NewSqlTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, HiveParserRULE_sqlTransactionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2927)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_START:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2923)
			p.StartTransactionStatement()
		}

	case HiveParserKW_COMMIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2924)
			p.CommitStatement()
		}

	case HiveParserKW_ROLLBACK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2925)
			p.RollbackStatement()
		}

	case HiveParserKW_SET:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2926)
			p.SetAutoCommitStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStartTransactionStatementContext is an interface to support dynamic dispatch.
type IStartTransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartTransactionStatementContext differentiates from other interfaces.
	IsStartTransactionStatementContext()
}

type StartTransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartTransactionStatementContext() *StartTransactionStatementContext {
	var p = new(StartTransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_startTransactionStatement
	return p
}

func (*StartTransactionStatementContext) IsStartTransactionStatementContext() {}

func NewStartTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartTransactionStatementContext {
	var p = new(StartTransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_startTransactionStatement

	return p
}

func (s *StartTransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StartTransactionStatementContext) KW_START() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_START, 0)
}

func (s *StartTransactionStatementContext) KW_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRANSACTION, 0)
}

func (s *StartTransactionStatementContext) AllTransactionMode() []ITransactionModeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem())
	var tst = make([]ITransactionModeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionModeContext)
		}
	}

	return tst
}

func (s *StartTransactionStatementContext) TransactionMode(i int) ITransactionModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionModeContext)
}

func (s *StartTransactionStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *StartTransactionStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *StartTransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartTransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartTransactionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterStartTransactionStatement(s)
	}
}

func (s *StartTransactionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitStartTransactionStatement(s)
	}
}

func (p *HiveParser) StartTransactionStatement() (localctx IStartTransactionStatementContext) {
	localctx = NewStartTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, HiveParserRULE_startTransactionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2929)
		p.Match(HiveParserKW_START)
	}
	{
		p.SetState(2930)
		p.Match(HiveParserKW_TRANSACTION)
	}
	p.SetState(2939)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_READ || _la == HiveParserKW_ISOLATION {
		{
			p.SetState(2931)
			p.TransactionMode()
		}
		p.SetState(2936)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(2932)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(2933)
				p.TransactionMode()
			}

			p.SetState(2938)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ITransactionModeContext is an interface to support dynamic dispatch.
type ITransactionModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionModeContext differentiates from other interfaces.
	IsTransactionModeContext()
}

type TransactionModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionModeContext() *TransactionModeContext {
	var p = new(TransactionModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_transactionMode
	return p
}

func (*TransactionModeContext) IsTransactionModeContext() {}

func NewTransactionModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionModeContext {
	var p = new(TransactionModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_transactionMode

	return p
}

func (s *TransactionModeContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionModeContext) IsolationLevel() IIsolationLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsolationLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIsolationLevelContext)
}

func (s *TransactionModeContext) TransactionAccessMode() ITransactionAccessModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionAccessModeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionAccessModeContext)
}

func (s *TransactionModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionModeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTransactionMode(s)
	}
}

func (s *TransactionModeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTransactionMode(s)
	}
}

func (p *HiveParser) TransactionMode() (localctx ITransactionModeContext) {
	localctx = NewTransactionModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, HiveParserRULE_transactionMode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2943)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ISOLATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2941)
			p.IsolationLevel()
		}

	case HiveParserKW_READ:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2942)
			p.TransactionAccessMode()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITransactionAccessModeContext is an interface to support dynamic dispatch.
type ITransactionAccessModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionAccessModeContext differentiates from other interfaces.
	IsTransactionAccessModeContext()
}

type TransactionAccessModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionAccessModeContext() *TransactionAccessModeContext {
	var p = new(TransactionAccessModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_transactionAccessMode
	return p
}

func (*TransactionAccessModeContext) IsTransactionAccessModeContext() {}

func NewTransactionAccessModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionAccessModeContext {
	var p = new(TransactionAccessModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_transactionAccessMode

	return p
}

func (s *TransactionAccessModeContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionAccessModeContext) KW_READ() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_READ, 0)
}

func (s *TransactionAccessModeContext) KW_ONLY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ONLY, 0)
}

func (s *TransactionAccessModeContext) KW_WRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WRITE, 0)
}

func (s *TransactionAccessModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionAccessModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionAccessModeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTransactionAccessMode(s)
	}
}

func (s *TransactionAccessModeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTransactionAccessMode(s)
	}
}

func (p *HiveParser) TransactionAccessMode() (localctx ITransactionAccessModeContext) {
	localctx = NewTransactionAccessModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, HiveParserRULE_transactionAccessMode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2949)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 328, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2945)
			p.Match(HiveParserKW_READ)
		}
		{
			p.SetState(2946)
			p.Match(HiveParserKW_ONLY)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2947)
			p.Match(HiveParserKW_READ)
		}
		{
			p.SetState(2948)
			p.Match(HiveParserKW_WRITE)
		}

	}

	return localctx
}

// IIsolationLevelContext is an interface to support dynamic dispatch.
type IIsolationLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIsolationLevelContext differentiates from other interfaces.
	IsIsolationLevelContext()
}

type IsolationLevelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIsolationLevelContext() *IsolationLevelContext {
	var p = new(IsolationLevelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_isolationLevel
	return p
}

func (*IsolationLevelContext) IsIsolationLevelContext() {}

func NewIsolationLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IsolationLevelContext {
	var p = new(IsolationLevelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_isolationLevel

	return p
}

func (s *IsolationLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *IsolationLevelContext) KW_ISOLATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ISOLATION, 0)
}

func (s *IsolationLevelContext) KW_LEVEL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LEVEL, 0)
}

func (s *IsolationLevelContext) LevelOfIsolation() ILevelOfIsolationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelOfIsolationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevelOfIsolationContext)
}

func (s *IsolationLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsolationLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IsolationLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIsolationLevel(s)
	}
}

func (s *IsolationLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIsolationLevel(s)
	}
}

func (p *HiveParser) IsolationLevel() (localctx IIsolationLevelContext) {
	localctx = NewIsolationLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, HiveParserRULE_isolationLevel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2951)
		p.Match(HiveParserKW_ISOLATION)
	}
	{
		p.SetState(2952)
		p.Match(HiveParserKW_LEVEL)
	}
	{
		p.SetState(2953)
		p.LevelOfIsolation()
	}

	return localctx
}

// ILevelOfIsolationContext is an interface to support dynamic dispatch.
type ILevelOfIsolationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevelOfIsolationContext differentiates from other interfaces.
	IsLevelOfIsolationContext()
}

type LevelOfIsolationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevelOfIsolationContext() *LevelOfIsolationContext {
	var p = new(LevelOfIsolationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_levelOfIsolation
	return p
}

func (*LevelOfIsolationContext) IsLevelOfIsolationContext() {}

func NewLevelOfIsolationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelOfIsolationContext {
	var p = new(LevelOfIsolationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_levelOfIsolation

	return p
}

func (s *LevelOfIsolationContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelOfIsolationContext) KW_SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SNAPSHOT, 0)
}

func (s *LevelOfIsolationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelOfIsolationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LevelOfIsolationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLevelOfIsolation(s)
	}
}

func (s *LevelOfIsolationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLevelOfIsolation(s)
	}
}

func (p *HiveParser) LevelOfIsolation() (localctx ILevelOfIsolationContext) {
	localctx = NewLevelOfIsolationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, HiveParserRULE_levelOfIsolation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2955)
		p.Match(HiveParserKW_SNAPSHOT)
	}

	return localctx
}

// ICommitStatementContext is an interface to support dynamic dispatch.
type ICommitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommitStatementContext differentiates from other interfaces.
	IsCommitStatementContext()
}

type CommitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommitStatementContext() *CommitStatementContext {
	var p = new(CommitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_commitStatement
	return p
}

func (*CommitStatementContext) IsCommitStatementContext() {}

func NewCommitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommitStatementContext {
	var p = new(CommitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_commitStatement

	return p
}

func (s *CommitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CommitStatementContext) KW_COMMIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMIT, 0)
}

func (s *CommitStatementContext) KW_WORK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WORK, 0)
}

func (s *CommitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommitStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCommitStatement(s)
	}
}

func (s *CommitStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCommitStatement(s)
	}
}

func (p *HiveParser) CommitStatement() (localctx ICommitStatementContext) {
	localctx = NewCommitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, HiveParserRULE_commitStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2957)
		p.Match(HiveParserKW_COMMIT)
	}
	p.SetState(2959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WORK {
		{
			p.SetState(2958)
			p.Match(HiveParserKW_WORK)
		}

	}

	return localctx
}

// IRollbackStatementContext is an interface to support dynamic dispatch.
type IRollbackStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollbackStatementContext differentiates from other interfaces.
	IsRollbackStatementContext()
}

type RollbackStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollbackStatementContext() *RollbackStatementContext {
	var p = new(RollbackStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rollbackStatement
	return p
}

func (*RollbackStatementContext) IsRollbackStatementContext() {}

func NewRollbackStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackStatementContext {
	var p = new(RollbackStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rollbackStatement

	return p
}

func (s *RollbackStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackStatementContext) KW_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLLBACK, 0)
}

func (s *RollbackStatementContext) KW_WORK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WORK, 0)
}

func (s *RollbackStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollbackStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRollbackStatement(s)
	}
}

func (s *RollbackStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRollbackStatement(s)
	}
}

func (p *HiveParser) RollbackStatement() (localctx IRollbackStatementContext) {
	localctx = NewRollbackStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, HiveParserRULE_rollbackStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2961)
		p.Match(HiveParserKW_ROLLBACK)
	}
	p.SetState(2963)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WORK {
		{
			p.SetState(2962)
			p.Match(HiveParserKW_WORK)
		}

	}

	return localctx
}

// ISetAutoCommitStatementContext is an interface to support dynamic dispatch.
type ISetAutoCommitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetAutoCommitStatementContext differentiates from other interfaces.
	IsSetAutoCommitStatementContext()
}

type SetAutoCommitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAutoCommitStatementContext() *SetAutoCommitStatementContext {
	var p = new(SetAutoCommitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_setAutoCommitStatement
	return p
}

func (*SetAutoCommitStatementContext) IsSetAutoCommitStatementContext() {}

func NewSetAutoCommitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAutoCommitStatementContext {
	var p = new(SetAutoCommitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_setAutoCommitStatement

	return p
}

func (s *SetAutoCommitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAutoCommitStatementContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *SetAutoCommitStatementContext) KW_AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AUTOCOMMIT, 0)
}

func (s *SetAutoCommitStatementContext) BooleanValueTok() IBooleanValueTokContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueTokContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueTokContext)
}

func (s *SetAutoCommitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutoCommitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAutoCommitStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSetAutoCommitStatement(s)
	}
}

func (s *SetAutoCommitStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSetAutoCommitStatement(s)
	}
}

func (p *HiveParser) SetAutoCommitStatement() (localctx ISetAutoCommitStatementContext) {
	localctx = NewSetAutoCommitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, HiveParserRULE_setAutoCommitStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2965)
		p.Match(HiveParserKW_SET)
	}
	{
		p.SetState(2966)
		p.Match(HiveParserKW_AUTOCOMMIT)
	}
	{
		p.SetState(2967)
		p.BooleanValueTok()
	}

	return localctx
}

// IAbortTransactionStatementContext is an interface to support dynamic dispatch.
type IAbortTransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbortTransactionStatementContext differentiates from other interfaces.
	IsAbortTransactionStatementContext()
}

type AbortTransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbortTransactionStatementContext() *AbortTransactionStatementContext {
	var p = new(AbortTransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_abortTransactionStatement
	return p
}

func (*AbortTransactionStatementContext) IsAbortTransactionStatementContext() {}

func NewAbortTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbortTransactionStatementContext {
	var p = new(AbortTransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_abortTransactionStatement

	return p
}

func (s *AbortTransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AbortTransactionStatementContext) KW_ABORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ABORT, 0)
}

func (s *AbortTransactionStatementContext) KW_TRANSACTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRANSACTIONS, 0)
}

func (s *AbortTransactionStatementContext) AllNumber() []antlr.TerminalNode {
	return s.GetTokens(HiveParserNumber)
}

func (s *AbortTransactionStatementContext) Number(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, i)
}

func (s *AbortTransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbortTransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbortTransactionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAbortTransactionStatement(s)
	}
}

func (s *AbortTransactionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAbortTransactionStatement(s)
	}
}

func (p *HiveParser) AbortTransactionStatement() (localctx IAbortTransactionStatementContext) {
	localctx = NewAbortTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, HiveParserRULE_abortTransactionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2969)
		p.Match(HiveParserKW_ABORT)
	}
	{
		p.SetState(2970)
		p.Match(HiveParserKW_TRANSACTIONS)
	}
	p.SetState(2972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserNumber {
		{
			p.SetState(2971)
			p.Match(HiveParserNumber)
		}

		p.SetState(2974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMergeStatementContext is an interface to support dynamic dispatch.
type IMergeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMergeStatementContext differentiates from other interfaces.
	IsMergeStatementContext()
}

type MergeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMergeStatementContext() *MergeStatementContext {
	var p = new(MergeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_mergeStatement
	return p
}

func (*MergeStatementContext) IsMergeStatementContext() {}

func NewMergeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MergeStatementContext {
	var p = new(MergeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_mergeStatement

	return p
}

func (s *MergeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MergeStatementContext) KW_MERGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MERGE, 0)
}

func (s *MergeStatementContext) KW_INTO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTO, 0)
}

func (s *MergeStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *MergeStatementContext) KW_USING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USING, 0)
}

func (s *MergeStatementContext) JoinSourcePart() IJoinSourcePartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinSourcePartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinSourcePartContext)
}

func (s *MergeStatementContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *MergeStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MergeStatementContext) WhenClauses() IWhenClausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenClausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhenClausesContext)
}

func (s *MergeStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *MergeStatementContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *MergeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MergeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MergeStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterMergeStatement(s)
	}
}

func (s *MergeStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitMergeStatement(s)
	}
}

func (p *HiveParser) MergeStatement() (localctx IMergeStatementContext) {
	localctx = NewMergeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, HiveParserRULE_mergeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2976)
		p.Match(HiveParserKW_MERGE)
	}
	{
		p.SetState(2977)
		p.Match(HiveParserKW_INTO)
	}
	{
		p.SetState(2978)
		p.TableName()
	}
	p.SetState(2983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_AS)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
		p.SetState(2980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(2979)
				p.Match(HiveParserKW_AS)
			}

		}
		{
			p.SetState(2982)
			p.Identifier()
		}

	}
	{
		p.SetState(2985)
		p.Match(HiveParserKW_USING)
	}
	{
		p.SetState(2986)
		p.JoinSourcePart()
	}
	{
		p.SetState(2987)
		p.Match(HiveParserKW_ON)
	}
	{
		p.SetState(2988)
		p.expression(0)
	}
	{
		p.SetState(2989)
		p.WhenClauses()
	}

	return localctx
}

// IWhenClausesContext is an interface to support dynamic dispatch.
type IWhenClausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenClausesContext differentiates from other interfaces.
	IsWhenClausesContext()
}

type WhenClausesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenClausesContext() *WhenClausesContext {
	var p = new(WhenClausesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_whenClauses
	return p
}

func (*WhenClausesContext) IsWhenClausesContext() {}

func NewWhenClausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenClausesContext {
	var p = new(WhenClausesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_whenClauses

	return p
}

func (s *WhenClausesContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenClausesContext) AllWhenMatchedAndClause() []IWhenMatchedAndClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenMatchedAndClauseContext)(nil)).Elem())
	var tst = make([]IWhenMatchedAndClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenMatchedAndClauseContext)
		}
	}

	return tst
}

func (s *WhenClausesContext) WhenMatchedAndClause(i int) IWhenMatchedAndClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenMatchedAndClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenMatchedAndClauseContext)
}

func (s *WhenClausesContext) AllWhenMatchedThenClause() []IWhenMatchedThenClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenMatchedThenClauseContext)(nil)).Elem())
	var tst = make([]IWhenMatchedThenClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenMatchedThenClauseContext)
		}
	}

	return tst
}

func (s *WhenClausesContext) WhenMatchedThenClause(i int) IWhenMatchedThenClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenMatchedThenClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenMatchedThenClauseContext)
}

func (s *WhenClausesContext) WhenNotMatchedClause() IWhenNotMatchedClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenNotMatchedClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhenNotMatchedClauseContext)
}

func (s *WhenClausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenClausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenClausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWhenClauses(s)
	}
}

func (s *WhenClausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWhenClauses(s)
	}
}

func (p *HiveParser) WhenClauses() (localctx IWhenClausesContext) {
	localctx = NewWhenClausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, HiveParserRULE_whenClauses)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2995)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 335, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2993)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(2991)
					p.WhenMatchedAndClause()
				}

			case 2:
				{
					p.SetState(2992)
					p.WhenMatchedThenClause()
				}

			}

		}
		p.SetState(2997)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 335, p.GetParserRuleContext())
	}
	p.SetState(2999)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WHEN {
		{
			p.SetState(2998)
			p.WhenNotMatchedClause()
		}

	}

	return localctx
}

// IWhenNotMatchedClauseContext is an interface to support dynamic dispatch.
type IWhenNotMatchedClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenNotMatchedClauseContext differentiates from other interfaces.
	IsWhenNotMatchedClauseContext()
}

type WhenNotMatchedClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenNotMatchedClauseContext() *WhenNotMatchedClauseContext {
	var p = new(WhenNotMatchedClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_whenNotMatchedClause
	return p
}

func (*WhenNotMatchedClauseContext) IsWhenNotMatchedClauseContext() {}

func NewWhenNotMatchedClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenNotMatchedClauseContext {
	var p = new(WhenNotMatchedClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_whenNotMatchedClause

	return p
}

func (s *WhenNotMatchedClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenNotMatchedClauseContext) KW_WHEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, 0)
}

func (s *WhenNotMatchedClauseContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *WhenNotMatchedClauseContext) KW_MATCHED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATCHED, 0)
}

func (s *WhenNotMatchedClauseContext) KW_THEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_THEN, 0)
}

func (s *WhenNotMatchedClauseContext) KW_INSERT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INSERT, 0)
}

func (s *WhenNotMatchedClauseContext) KW_VALUES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALUES, 0)
}

func (s *WhenNotMatchedClauseContext) ValueRowConstructor() IValueRowConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueRowConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueRowConstructorContext)
}

func (s *WhenNotMatchedClauseContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *WhenNotMatchedClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenNotMatchedClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenNotMatchedClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenNotMatchedClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWhenNotMatchedClause(s)
	}
}

func (s *WhenNotMatchedClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWhenNotMatchedClause(s)
	}
}

func (p *HiveParser) WhenNotMatchedClause() (localctx IWhenNotMatchedClauseContext) {
	localctx = NewWhenNotMatchedClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, HiveParserRULE_whenNotMatchedClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3001)
		p.Match(HiveParserKW_WHEN)
	}
	{
		p.SetState(3002)
		p.Match(HiveParserKW_NOT)
	}
	{
		p.SetState(3003)
		p.Match(HiveParserKW_MATCHED)
	}
	p.SetState(3006)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_AND {
		{
			p.SetState(3004)
			p.Match(HiveParserKW_AND)
		}
		{
			p.SetState(3005)
			p.expression(0)
		}

	}
	{
		p.SetState(3008)
		p.Match(HiveParserKW_THEN)
	}
	{
		p.SetState(3009)
		p.Match(HiveParserKW_INSERT)
	}
	{
		p.SetState(3010)
		p.Match(HiveParserKW_VALUES)
	}
	{
		p.SetState(3011)
		p.ValueRowConstructor()
	}

	return localctx
}

// IWhenMatchedAndClauseContext is an interface to support dynamic dispatch.
type IWhenMatchedAndClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenMatchedAndClauseContext differentiates from other interfaces.
	IsWhenMatchedAndClauseContext()
}

type WhenMatchedAndClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenMatchedAndClauseContext() *WhenMatchedAndClauseContext {
	var p = new(WhenMatchedAndClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_whenMatchedAndClause
	return p
}

func (*WhenMatchedAndClauseContext) IsWhenMatchedAndClauseContext() {}

func NewWhenMatchedAndClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenMatchedAndClauseContext {
	var p = new(WhenMatchedAndClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_whenMatchedAndClause

	return p
}

func (s *WhenMatchedAndClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenMatchedAndClauseContext) KW_WHEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, 0)
}

func (s *WhenMatchedAndClauseContext) KW_MATCHED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATCHED, 0)
}

func (s *WhenMatchedAndClauseContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *WhenMatchedAndClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenMatchedAndClauseContext) KW_THEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_THEN, 0)
}

func (s *WhenMatchedAndClauseContext) UpdateOrDelete() IUpdateOrDeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateOrDeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateOrDeleteContext)
}

func (s *WhenMatchedAndClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenMatchedAndClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenMatchedAndClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWhenMatchedAndClause(s)
	}
}

func (s *WhenMatchedAndClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWhenMatchedAndClause(s)
	}
}

func (p *HiveParser) WhenMatchedAndClause() (localctx IWhenMatchedAndClauseContext) {
	localctx = NewWhenMatchedAndClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, HiveParserRULE_whenMatchedAndClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3013)
		p.Match(HiveParserKW_WHEN)
	}
	{
		p.SetState(3014)
		p.Match(HiveParserKW_MATCHED)
	}
	{
		p.SetState(3015)
		p.Match(HiveParserKW_AND)
	}
	{
		p.SetState(3016)
		p.expression(0)
	}
	{
		p.SetState(3017)
		p.Match(HiveParserKW_THEN)
	}
	{
		p.SetState(3018)
		p.UpdateOrDelete()
	}

	return localctx
}

// IWhenMatchedThenClauseContext is an interface to support dynamic dispatch.
type IWhenMatchedThenClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenMatchedThenClauseContext differentiates from other interfaces.
	IsWhenMatchedThenClauseContext()
}

type WhenMatchedThenClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenMatchedThenClauseContext() *WhenMatchedThenClauseContext {
	var p = new(WhenMatchedThenClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_whenMatchedThenClause
	return p
}

func (*WhenMatchedThenClauseContext) IsWhenMatchedThenClauseContext() {}

func NewWhenMatchedThenClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenMatchedThenClauseContext {
	var p = new(WhenMatchedThenClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_whenMatchedThenClause

	return p
}

func (s *WhenMatchedThenClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenMatchedThenClauseContext) KW_WHEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, 0)
}

func (s *WhenMatchedThenClauseContext) KW_MATCHED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATCHED, 0)
}

func (s *WhenMatchedThenClauseContext) KW_THEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_THEN, 0)
}

func (s *WhenMatchedThenClauseContext) UpdateOrDelete() IUpdateOrDeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateOrDeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateOrDeleteContext)
}

func (s *WhenMatchedThenClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenMatchedThenClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenMatchedThenClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWhenMatchedThenClause(s)
	}
}

func (s *WhenMatchedThenClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWhenMatchedThenClause(s)
	}
}

func (p *HiveParser) WhenMatchedThenClause() (localctx IWhenMatchedThenClauseContext) {
	localctx = NewWhenMatchedThenClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, HiveParserRULE_whenMatchedThenClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3020)
		p.Match(HiveParserKW_WHEN)
	}
	{
		p.SetState(3021)
		p.Match(HiveParserKW_MATCHED)
	}
	{
		p.SetState(3022)
		p.Match(HiveParserKW_THEN)
	}
	{
		p.SetState(3023)
		p.UpdateOrDelete()
	}

	return localctx
}

// IUpdateOrDeleteContext is an interface to support dynamic dispatch.
type IUpdateOrDeleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateOrDeleteContext differentiates from other interfaces.
	IsUpdateOrDeleteContext()
}

type UpdateOrDeleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOrDeleteContext() *UpdateOrDeleteContext {
	var p = new(UpdateOrDeleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_updateOrDelete
	return p
}

func (*UpdateOrDeleteContext) IsUpdateOrDeleteContext() {}

func NewUpdateOrDeleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOrDeleteContext {
	var p = new(UpdateOrDeleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_updateOrDelete

	return p
}

func (s *UpdateOrDeleteContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOrDeleteContext) KW_UPDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UPDATE, 0)
}

func (s *UpdateOrDeleteContext) SetColumnsClause() ISetColumnsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetColumnsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetColumnsClauseContext)
}

func (s *UpdateOrDeleteContext) KW_DELETE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DELETE, 0)
}

func (s *UpdateOrDeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOrDeleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOrDeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUpdateOrDelete(s)
	}
}

func (s *UpdateOrDeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUpdateOrDelete(s)
	}
}

func (p *HiveParser) UpdateOrDelete() (localctx IUpdateOrDeleteContext) {
	localctx = NewUpdateOrDeleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, HiveParserRULE_updateOrDelete)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3028)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_UPDATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3025)
			p.Match(HiveParserKW_UPDATE)
		}
		{
			p.SetState(3026)
			p.SetColumnsClause()
		}

	case HiveParserKW_DELETE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3027)
			p.Match(HiveParserKW_DELETE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IKillQueryStatementContext is an interface to support dynamic dispatch.
type IKillQueryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKillQueryStatementContext differentiates from other interfaces.
	IsKillQueryStatementContext()
}

type KillQueryStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKillQueryStatementContext() *KillQueryStatementContext {
	var p = new(KillQueryStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_killQueryStatement
	return p
}

func (*KillQueryStatementContext) IsKillQueryStatementContext() {}

func NewKillQueryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KillQueryStatementContext {
	var p = new(KillQueryStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_killQueryStatement

	return p
}

func (s *KillQueryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *KillQueryStatementContext) KW_KILL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KILL, 0)
}

func (s *KillQueryStatementContext) KW_QUERY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUERY, 0)
}

func (s *KillQueryStatementContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *KillQueryStatementContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *KillQueryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KillQueryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KillQueryStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterKillQueryStatement(s)
	}
}

func (s *KillQueryStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitKillQueryStatement(s)
	}
}

func (p *HiveParser) KillQueryStatement() (localctx IKillQueryStatementContext) {
	localctx = NewKillQueryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, HiveParserRULE_killQueryStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3030)
		p.Match(HiveParserKW_KILL)
	}
	{
		p.SetState(3031)
		p.Match(HiveParserKW_QUERY)
	}
	p.SetState(3033)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserStringLiteral {
		{
			p.SetState(3032)
			p.Match(HiveParserStringLiteral)
		}

		p.SetState(3035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectClauseContext is an interface to support dynamic dispatch.
type ISelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectClauseContext differentiates from other interfaces.
	IsSelectClauseContext()
}

type SelectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectClauseContext() *SelectClauseContext {
	var p = new(SelectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectClause
	return p
}

func (*SelectClauseContext) IsSelectClauseContext() {}

func NewSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectClauseContext {
	var p = new(SelectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectClause

	return p
}

func (s *SelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectClauseContext) KW_SELECT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SELECT, 0)
}

func (s *SelectClauseContext) QUERY_HINT() antlr.TerminalNode {
	return s.GetToken(HiveParserQUERY_HINT, 0)
}

func (s *SelectClauseContext) SelectList() ISelectListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectListContext)
}

func (s *SelectClauseContext) KW_TRANSFORM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRANSFORM, 0)
}

func (s *SelectClauseContext) SelectTrfmClause() ISelectTrfmClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectTrfmClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectTrfmClauseContext)
}

func (s *SelectClauseContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *SelectClauseContext) KW_DISTINCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTINCT, 0)
}

func (s *SelectClauseContext) TrfmClause() ITrfmClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrfmClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrfmClauseContext)
}

func (s *SelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectClause(s)
	}
}

func (s *SelectClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectClause(s)
	}
}

func (p *HiveParser) SelectClause() (localctx ISelectClauseContext) {
	localctx = NewSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, HiveParserRULE_selectClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3050)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3037)
			p.Match(HiveParserKW_SELECT)
		}
		p.SetState(3039)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserQUERY_HINT {
			{
				p.SetState(3038)
				p.Match(HiveParserQUERY_HINT)
			}

		}
		p.SetState(3047)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_TRUE, HiveParserKW_FALSE, HiveParserKW_ALL, HiveParserKW_NOT, HiveParserKW_IF, HiveParserKW_EXISTS, HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_DISTINCT, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_NULL, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_BOOLEAN, HiveParserKW_TINYINT, HiveParserKW_SMALLINT, HiveParserKW_INT, HiveParserKW_BIGINT, HiveParserKW_FLOAT, HiveParserKW_DOUBLE, HiveParserKW_DATE, HiveParserKW_DATETIME, HiveParserKW_TIMESTAMP, HiveParserKW_TIMESTAMPLOCALTZ, HiveParserKW_ZONE, HiveParserKW_INTERVAL, HiveParserKW_STRING, HiveParserKW_ARRAY, HiveParserKW_STRUCT, HiveParserKW_MAP, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_CAST, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_CASE, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_BINARY, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_CURRENT_DATE, HiveParserKW_CURRENT_TIMESTAMP, HiveParserKW_GROUPING, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_EXTRACT, HiveParserKW_FLOOR, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserLPAREN, HiveParserPLUS, HiveParserMINUS, HiveParserSTAR, HiveParserTILDE, HiveParserStringLiteral, HiveParserIntegralLiteral, HiveParserNumberLiteral, HiveParserNumber, HiveParserIdentifier, HiveParserCharSetName:
			p.SetState(3042)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserKW_ALL || _la == HiveParserKW_DISTINCT {
				{
					p.SetState(3041)
					_la = p.GetTokenStream().LA(1)

					if !(_la == HiveParserKW_ALL || _la == HiveParserKW_DISTINCT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(3044)
				p.SelectList()
			}

		case HiveParserKW_TRANSFORM:
			{
				p.SetState(3045)
				p.Match(HiveParserKW_TRANSFORM)
			}
			{
				p.SetState(3046)
				p.SelectTrfmClause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case HiveParserKW_MAP, HiveParserKW_REDUCE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3049)
			p.TrfmClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectListContext is an interface to support dynamic dispatch.
type ISelectListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectListContext differentiates from other interfaces.
	IsSelectListContext()
}

type SelectListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectListContext() *SelectListContext {
	var p = new(SelectListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectList
	return p
}

func (*SelectListContext) IsSelectListContext() {}

func NewSelectListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectListContext {
	var p = new(SelectListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectList

	return p
}

func (s *SelectListContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectListContext) AllSelectItem() []ISelectItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectItemContext)(nil)).Elem())
	var tst = make([]ISelectItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectItemContext)
		}
	}

	return tst
}

func (s *SelectListContext) SelectItem(i int) ISelectItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectItemContext)
}

func (s *SelectListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SelectListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SelectListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectList(s)
	}
}

func (s *SelectListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectList(s)
	}
}

func (p *HiveParser) SelectList() (localctx ISelectListContext) {
	localctx = NewSelectListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, HiveParserRULE_selectList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3052)
		p.SelectItem()
	}
	p.SetState(3057)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3053)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3054)
				p.SelectItem()
			}

		}
		p.SetState(3059)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext())
	}

	return localctx
}

// ISelectTrfmClauseContext is an interface to support dynamic dispatch.
type ISelectTrfmClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectTrfmClauseContext differentiates from other interfaces.
	IsSelectTrfmClauseContext()
}

type SelectTrfmClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectTrfmClauseContext() *SelectTrfmClauseContext {
	var p = new(SelectTrfmClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectTrfmClause
	return p
}

func (*SelectTrfmClauseContext) IsSelectTrfmClauseContext() {}

func NewSelectTrfmClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectTrfmClauseContext {
	var p = new(SelectTrfmClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectTrfmClause

	return p
}

func (s *SelectTrfmClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectTrfmClauseContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLPAREN)
}

func (s *SelectTrfmClauseContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, i)
}

func (s *SelectTrfmClauseContext) SelectExpressionList() ISelectExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectExpressionListContext)
}

func (s *SelectTrfmClauseContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRPAREN)
}

func (s *SelectTrfmClauseContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, i)
}

func (s *SelectTrfmClauseContext) KW_USING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USING, 0)
}

func (s *SelectTrfmClauseContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *SelectTrfmClauseContext) AllRowFormat() []IRowFormatContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRowFormatContext)(nil)).Elem())
	var tst = make([]IRowFormatContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRowFormatContext)
		}
	}

	return tst
}

func (s *SelectTrfmClauseContext) RowFormat(i int) IRowFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowFormatContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRowFormatContext)
}

func (s *SelectTrfmClauseContext) RecordWriter() IRecordWriterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecordWriterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecordWriterContext)
}

func (s *SelectTrfmClauseContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *SelectTrfmClauseContext) RecordReader() IRecordReaderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecordReaderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecordReaderContext)
}

func (s *SelectTrfmClauseContext) AliasList() IAliasListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasListContext)
}

func (s *SelectTrfmClauseContext) ColumnNameTypeList() IColumnNameTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeListContext)
}

func (s *SelectTrfmClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectTrfmClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectTrfmClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectTrfmClause(s)
	}
}

func (s *SelectTrfmClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectTrfmClause(s)
	}
}

func (p *HiveParser) SelectTrfmClause() (localctx ISelectTrfmClauseContext) {
	localctx = NewSelectTrfmClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, HiveParserRULE_selectTrfmClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3060)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3061)
		p.SelectExpressionList()
	}
	{
		p.SetState(3062)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(3064)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ROW {
		{
			p.SetState(3063)
			p.RowFormat()
		}

	}
	p.SetState(3067)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RECORDWRITER {
		{
			p.SetState(3066)
			p.RecordWriter()
		}

	}
	{
		p.SetState(3069)
		p.Match(HiveParserKW_USING)
	}
	{
		p.SetState(3070)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(3085)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_AS {
		{
			p.SetState(3071)
			p.Match(HiveParserKW_AS)
		}
		p.SetState(3083)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserLPAREN:
			{
				p.SetState(3072)
				p.Match(HiveParserLPAREN)
			}
			p.SetState(3075)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 347, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3073)
					p.AliasList()
				}

			case 2:
				{
					p.SetState(3074)
					p.ColumnNameTypeList()
				}

			}
			{
				p.SetState(3077)
				p.Match(HiveParserRPAREN)
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
			p.SetState(3081)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 348, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3079)
					p.AliasList()
				}

			case 2:
				{
					p.SetState(3080)
					p.ColumnNameTypeList()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(3088)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ROW {
		{
			p.SetState(3087)
			p.RowFormat()
		}

	}
	p.SetState(3091)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RECORDREADER {
		{
			p.SetState(3090)
			p.RecordReader()
		}

	}

	return localctx
}

// ISelectItemContext is an interface to support dynamic dispatch.
type ISelectItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectItemContext differentiates from other interfaces.
	IsSelectItemContext()
}

type SelectItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectItemContext() *SelectItemContext {
	var p = new(SelectItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectItem
	return p
}

func (*SelectItemContext) IsSelectItemContext() {}

func NewSelectItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectItemContext {
	var p = new(SelectItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectItem

	return p
}

func (s *SelectItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectItemContext) TableAllColumns() ITableAllColumnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableAllColumnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableAllColumnsContext)
}

func (s *SelectItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectItemContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *SelectItemContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SelectItemContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *SelectItemContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *SelectItemContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *SelectItemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SelectItemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SelectItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectItem(s)
	}
}

func (s *SelectItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectItem(s)
	}
}

func (p *HiveParser) SelectItem() (localctx ISelectItemContext) {
	localctx = NewSelectItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, HiveParserRULE_selectItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3113)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 356, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3093)
			p.TableAllColumns()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3094)
			p.expression(0)
		}
		p.SetState(3111)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext()) == 1 {
			p.SetState(3096)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserKW_AS {
				{
					p.SetState(3095)
					p.Match(HiveParserKW_AS)
				}

			}
			{
				p.SetState(3098)
				p.Identifier()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3099)
				p.Match(HiveParserKW_AS)
			}
			{
				p.SetState(3100)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(3101)
				p.Identifier()
			}
			p.SetState(3106)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == HiveParserCOMMA {
				{
					p.SetState(3102)
					p.Match(HiveParserCOMMA)
				}
				{
					p.SetState(3103)
					p.Identifier()
				}

				p.SetState(3108)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(3109)
				p.Match(HiveParserRPAREN)
			}

		}

	}

	return localctx
}

// ITrfmClauseContext is an interface to support dynamic dispatch.
type ITrfmClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrfmClauseContext differentiates from other interfaces.
	IsTrfmClauseContext()
}

type TrfmClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrfmClauseContext() *TrfmClauseContext {
	var p = new(TrfmClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_trfmClause
	return p
}

func (*TrfmClauseContext) IsTrfmClauseContext() {}

func NewTrfmClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrfmClauseContext {
	var p = new(TrfmClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_trfmClause

	return p
}

func (s *TrfmClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TrfmClauseContext) KW_USING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USING, 0)
}

func (s *TrfmClauseContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TrfmClauseContext) KW_MAP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAP, 0)
}

func (s *TrfmClauseContext) SelectExpressionList() ISelectExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectExpressionListContext)
}

func (s *TrfmClauseContext) KW_REDUCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REDUCE, 0)
}

func (s *TrfmClauseContext) AllRowFormat() []IRowFormatContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRowFormatContext)(nil)).Elem())
	var tst = make([]IRowFormatContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRowFormatContext)
		}
	}

	return tst
}

func (s *TrfmClauseContext) RowFormat(i int) IRowFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowFormatContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRowFormatContext)
}

func (s *TrfmClauseContext) RecordWriter() IRecordWriterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecordWriterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecordWriterContext)
}

func (s *TrfmClauseContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *TrfmClauseContext) RecordReader() IRecordReaderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecordReaderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecordReaderContext)
}

func (s *TrfmClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *TrfmClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *TrfmClauseContext) AliasList() IAliasListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasListContext)
}

func (s *TrfmClauseContext) ColumnNameTypeList() IColumnNameTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameTypeListContext)
}

func (s *TrfmClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrfmClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrfmClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTrfmClause(s)
	}
}

func (s *TrfmClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTrfmClause(s)
	}
}

func (p *HiveParser) TrfmClause() (localctx ITrfmClauseContext) {
	localctx = NewTrfmClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, HiveParserRULE_trfmClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3119)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_MAP:
		{
			p.SetState(3115)
			p.Match(HiveParserKW_MAP)
		}
		{
			p.SetState(3116)
			p.SelectExpressionList()
		}

	case HiveParserKW_REDUCE:
		{
			p.SetState(3117)
			p.Match(HiveParserKW_REDUCE)
		}
		{
			p.SetState(3118)
			p.SelectExpressionList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ROW {
		{
			p.SetState(3121)
			p.RowFormat()
		}

	}
	p.SetState(3125)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RECORDWRITER {
		{
			p.SetState(3124)
			p.RecordWriter()
		}

	}
	{
		p.SetState(3127)
		p.Match(HiveParserKW_USING)
	}
	{
		p.SetState(3128)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(3143)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_AS {
		{
			p.SetState(3129)
			p.Match(HiveParserKW_AS)
		}
		p.SetState(3141)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserLPAREN:
			{
				p.SetState(3130)
				p.Match(HiveParserLPAREN)
			}
			p.SetState(3133)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 360, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3131)
					p.AliasList()
				}

			case 2:
				{
					p.SetState(3132)
					p.ColumnNameTypeList()
				}

			}
			{
				p.SetState(3135)
				p.Match(HiveParserRPAREN)
			}

		case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
			p.SetState(3139)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3137)
					p.AliasList()
				}

			case 2:
				{
					p.SetState(3138)
					p.ColumnNameTypeList()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(3146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ROW {
		{
			p.SetState(3145)
			p.RowFormat()
		}

	}
	p.SetState(3149)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_RECORDREADER {
		{
			p.SetState(3148)
			p.RecordReader()
		}

	}

	return localctx
}

// ISelectExpressionContext is an interface to support dynamic dispatch.
type ISelectExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectExpressionContext differentiates from other interfaces.
	IsSelectExpressionContext()
}

type SelectExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectExpressionContext() *SelectExpressionContext {
	var p = new(SelectExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectExpression
	return p
}

func (*SelectExpressionContext) IsSelectExpressionContext() {}

func NewSelectExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectExpressionContext {
	var p = new(SelectExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectExpression

	return p
}

func (s *SelectExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectExpressionContext) TableAllColumns() ITableAllColumnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableAllColumnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableAllColumnsContext)
}

func (s *SelectExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectExpression(s)
	}
}

func (s *SelectExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectExpression(s)
	}
}

func (p *HiveParser) SelectExpression() (localctx ISelectExpressionContext) {
	localctx = NewSelectExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, HiveParserRULE_selectExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3153)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 366, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3151)
			p.TableAllColumns()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3152)
			p.expression(0)
		}

	}

	return localctx
}

// ISelectExpressionListContext is an interface to support dynamic dispatch.
type ISelectExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectExpressionListContext differentiates from other interfaces.
	IsSelectExpressionListContext()
}

type SelectExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectExpressionListContext() *SelectExpressionListContext {
	var p = new(SelectExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_selectExpressionList
	return p
}

func (*SelectExpressionListContext) IsSelectExpressionListContext() {}

func NewSelectExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectExpressionListContext {
	var p = new(SelectExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_selectExpressionList

	return p
}

func (s *SelectExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectExpressionListContext) AllSelectExpression() []ISelectExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectExpressionContext)(nil)).Elem())
	var tst = make([]ISelectExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectExpressionContext)
		}
	}

	return tst
}

func (s *SelectExpressionListContext) SelectExpression(i int) ISelectExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectExpressionContext)
}

func (s *SelectExpressionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *SelectExpressionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *SelectExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSelectExpressionList(s)
	}
}

func (s *SelectExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSelectExpressionList(s)
	}
}

func (p *HiveParser) SelectExpressionList() (localctx ISelectExpressionListContext) {
	localctx = NewSelectExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, HiveParserRULE_selectExpressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3155)
		p.SelectExpression()
	}
	p.SetState(3160)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3156)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3157)
			p.SelectExpression()
		}

		p.SetState(3162)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IWindow_clauseContext is an interface to support dynamic dispatch.
type IWindow_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_clauseContext differentiates from other interfaces.
	IsWindow_clauseContext()
}

type Window_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_clauseContext() *Window_clauseContext {
	var p = new(Window_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_clause
	return p
}

func (*Window_clauseContext) IsWindow_clauseContext() {}

func NewWindow_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_clauseContext {
	var p = new(Window_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_clause

	return p
}

func (s *Window_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_clauseContext) KW_WINDOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WINDOW, 0)
}

func (s *Window_clauseContext) AllWindow_defn() []IWindow_defnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_defnContext)(nil)).Elem())
	var tst = make([]IWindow_defnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_defnContext)
		}
	}

	return tst
}

func (s *Window_clauseContext) Window_defn(i int) IWindow_defnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_defnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_defnContext)
}

func (s *Window_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *Window_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *Window_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_clause(s)
	}
}

func (s *Window_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_clause(s)
	}
}

func (p *HiveParser) Window_clause() (localctx IWindow_clauseContext) {
	localctx = NewWindow_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, HiveParserRULE_window_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3163)
		p.Match(HiveParserKW_WINDOW)
	}
	{
		p.SetState(3164)
		p.Window_defn()
	}
	p.SetState(3169)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3165)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3166)
			p.Window_defn()
		}

		p.SetState(3171)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IWindow_defnContext is an interface to support dynamic dispatch.
type IWindow_defnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_defnContext differentiates from other interfaces.
	IsWindow_defnContext()
}

type Window_defnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_defnContext() *Window_defnContext {
	var p = new(Window_defnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_defn
	return p
}

func (*Window_defnContext) IsWindow_defnContext() {}

func NewWindow_defnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_defnContext {
	var p = new(Window_defnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_defn

	return p
}

func (s *Window_defnContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_defnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_defnContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *Window_defnContext) Window_specification() IWindow_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_specificationContext)
}

func (s *Window_defnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_defnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_defnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_defn(s)
	}
}

func (s *Window_defnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_defn(s)
	}
}

func (p *HiveParser) Window_defn() (localctx IWindow_defnContext) {
	localctx = NewWindow_defnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, HiveParserRULE_window_defn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3172)
		p.Identifier()
	}
	{
		p.SetState(3173)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(3174)
		p.Window_specification()
	}

	return localctx
}

// IWindow_specificationContext is an interface to support dynamic dispatch.
type IWindow_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_specificationContext differentiates from other interfaces.
	IsWindow_specificationContext()
}

type Window_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_specificationContext() *Window_specificationContext {
	var p = new(Window_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_specification
	return p
}

func (*Window_specificationContext) IsWindow_specificationContext() {}

func NewWindow_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_specificationContext {
	var p = new(Window_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_specification

	return p
}

func (s *Window_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_specificationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_specificationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *Window_specificationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *Window_specificationContext) PartitioningSpec() IPartitioningSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitioningSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitioningSpecContext)
}

func (s *Window_specificationContext) Window_frame() IWindow_frameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frameContext)
}

func (s *Window_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_specification(s)
	}
}

func (s *Window_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_specification(s)
	}
}

func (p *HiveParser) Window_specification() (localctx IWindow_specificationContext) {
	localctx = NewWindow_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, HiveParserRULE_window_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3188)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		{
			p.SetState(3176)
			p.Identifier()
		}

	case HiveParserLPAREN:
		{
			p.SetState(3177)
			p.Match(HiveParserLPAREN)
		}
		p.SetState(3179)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3178)
				p.Identifier()
			}

		}
		p.SetState(3182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ORDER || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(HiveParserKW_PARTITION-35))|(1<<(HiveParserKW_CLUSTER-35))|(1<<(HiveParserKW_DISTRIBUTE-35))|(1<<(HiveParserKW_SORT-35)))) != 0) {
			{
				p.SetState(3181)
				p.PartitioningSpec()
			}

		}
		p.SetState(3185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ROWS || _la == HiveParserKW_RANGE {
			{
				p.SetState(3184)
				p.Window_frame()
			}

		}
		{
			p.SetState(3187)
			p.Match(HiveParserRPAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frameContext is an interface to support dynamic dispatch.
type IWindow_frameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frameContext differentiates from other interfaces.
	IsWindow_frameContext()
}

type Window_frameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frameContext() *Window_frameContext {
	var p = new(Window_frameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_frame
	return p
}

func (*Window_frameContext) IsWindow_frameContext() {}

func NewWindow_frameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frameContext {
	var p = new(Window_frameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_frame

	return p
}

func (s *Window_frameContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frameContext) Window_range_expression() IWindow_range_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_range_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_range_expressionContext)
}

func (s *Window_frameContext) Window_value_expression() IWindow_value_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_value_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_value_expressionContext)
}

func (s *Window_frameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_frame(s)
	}
}

func (s *Window_frameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_frame(s)
	}
}

func (p *HiveParser) Window_frame() (localctx IWindow_frameContext) {
	localctx = NewWindow_frameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, HiveParserRULE_window_frame)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3192)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ROWS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3190)
			p.Window_range_expression()
		}

	case HiveParserKW_RANGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3191)
			p.Window_value_expression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_range_expressionContext is an interface to support dynamic dispatch.
type IWindow_range_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_range_expressionContext differentiates from other interfaces.
	IsWindow_range_expressionContext()
}

type Window_range_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_range_expressionContext() *Window_range_expressionContext {
	var p = new(Window_range_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_range_expression
	return p
}

func (*Window_range_expressionContext) IsWindow_range_expressionContext() {}

func NewWindow_range_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_range_expressionContext {
	var p = new(Window_range_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_range_expression

	return p
}

func (s *Window_range_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_range_expressionContext) KW_ROWS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROWS, 0)
}

func (s *Window_range_expressionContext) Window_frame_start_boundary() IWindow_frame_start_boundaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_start_boundaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_start_boundaryContext)
}

func (s *Window_range_expressionContext) KW_BETWEEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BETWEEN, 0)
}

func (s *Window_range_expressionContext) AllWindow_frame_boundary() []IWindow_frame_boundaryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_frame_boundaryContext)(nil)).Elem())
	var tst = make([]IWindow_frame_boundaryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_frame_boundaryContext)
		}
	}

	return tst
}

func (s *Window_range_expressionContext) Window_frame_boundary(i int) IWindow_frame_boundaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_boundaryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundaryContext)
}

func (s *Window_range_expressionContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *Window_range_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_range_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_range_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_range_expression(s)
	}
}

func (s *Window_range_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_range_expression(s)
	}
}

func (p *HiveParser) Window_range_expression() (localctx IWindow_range_expressionContext) {
	localctx = NewWindow_range_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, HiveParserRULE_window_range_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3202)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 374, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3194)
			p.Match(HiveParserKW_ROWS)
		}
		{
			p.SetState(3195)
			p.Window_frame_start_boundary()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3196)
			p.Match(HiveParserKW_ROWS)
		}
		{
			p.SetState(3197)
			p.Match(HiveParserKW_BETWEEN)
		}
		{
			p.SetState(3198)
			p.Window_frame_boundary()
		}
		{
			p.SetState(3199)
			p.Match(HiveParserKW_AND)
		}
		{
			p.SetState(3200)
			p.Window_frame_boundary()
		}

	}

	return localctx
}

// IWindow_value_expressionContext is an interface to support dynamic dispatch.
type IWindow_value_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_value_expressionContext differentiates from other interfaces.
	IsWindow_value_expressionContext()
}

type Window_value_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_value_expressionContext() *Window_value_expressionContext {
	var p = new(Window_value_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_value_expression
	return p
}

func (*Window_value_expressionContext) IsWindow_value_expressionContext() {}

func NewWindow_value_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_value_expressionContext {
	var p = new(Window_value_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_value_expression

	return p
}

func (s *Window_value_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_value_expressionContext) KW_RANGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RANGE, 0)
}

func (s *Window_value_expressionContext) Window_frame_start_boundary() IWindow_frame_start_boundaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_start_boundaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_start_boundaryContext)
}

func (s *Window_value_expressionContext) KW_BETWEEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BETWEEN, 0)
}

func (s *Window_value_expressionContext) AllWindow_frame_boundary() []IWindow_frame_boundaryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_frame_boundaryContext)(nil)).Elem())
	var tst = make([]IWindow_frame_boundaryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_frame_boundaryContext)
		}
	}

	return tst
}

func (s *Window_value_expressionContext) Window_frame_boundary(i int) IWindow_frame_boundaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_boundaryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundaryContext)
}

func (s *Window_value_expressionContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *Window_value_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_value_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_value_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_value_expression(s)
	}
}

func (s *Window_value_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_value_expression(s)
	}
}

func (p *HiveParser) Window_value_expression() (localctx IWindow_value_expressionContext) {
	localctx = NewWindow_value_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, HiveParserRULE_window_value_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3212)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 375, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3204)
			p.Match(HiveParserKW_RANGE)
		}
		{
			p.SetState(3205)
			p.Window_frame_start_boundary()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3206)
			p.Match(HiveParserKW_RANGE)
		}
		{
			p.SetState(3207)
			p.Match(HiveParserKW_BETWEEN)
		}
		{
			p.SetState(3208)
			p.Window_frame_boundary()
		}
		{
			p.SetState(3209)
			p.Match(HiveParserKW_AND)
		}
		{
			p.SetState(3210)
			p.Window_frame_boundary()
		}

	}

	return localctx
}

// IWindow_frame_start_boundaryContext is an interface to support dynamic dispatch.
type IWindow_frame_start_boundaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_start_boundaryContext differentiates from other interfaces.
	IsWindow_frame_start_boundaryContext()
}

type Window_frame_start_boundaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_start_boundaryContext() *Window_frame_start_boundaryContext {
	var p = new(Window_frame_start_boundaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_frame_start_boundary
	return p
}

func (*Window_frame_start_boundaryContext) IsWindow_frame_start_boundaryContext() {}

func NewWindow_frame_start_boundaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_start_boundaryContext {
	var p = new(Window_frame_start_boundaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_frame_start_boundary

	return p
}

func (s *Window_frame_start_boundaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_start_boundaryContext) KW_UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNBOUNDED, 0)
}

func (s *Window_frame_start_boundaryContext) KW_PRECEDING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRECEDING, 0)
}

func (s *Window_frame_start_boundaryContext) KW_CURRENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT, 0)
}

func (s *Window_frame_start_boundaryContext) KW_ROW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROW, 0)
}

func (s *Window_frame_start_boundaryContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *Window_frame_start_boundaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_start_boundaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_start_boundaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_frame_start_boundary(s)
	}
}

func (s *Window_frame_start_boundaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_frame_start_boundary(s)
	}
}

func (p *HiveParser) Window_frame_start_boundary() (localctx IWindow_frame_start_boundaryContext) {
	localctx = NewWindow_frame_start_boundaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, HiveParserRULE_window_frame_start_boundary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3220)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_UNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3214)
			p.Match(HiveParserKW_UNBOUNDED)
		}
		{
			p.SetState(3215)
			p.Match(HiveParserKW_PRECEDING)
		}

	case HiveParserKW_CURRENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3216)
			p.Match(HiveParserKW_CURRENT)
		}
		{
			p.SetState(3217)
			p.Match(HiveParserKW_ROW)
		}

	case HiveParserNumber:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3218)
			p.Match(HiveParserNumber)
		}
		{
			p.SetState(3219)
			p.Match(HiveParserKW_PRECEDING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_boundaryContext is an interface to support dynamic dispatch.
type IWindow_frame_boundaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_boundaryContext differentiates from other interfaces.
	IsWindow_frame_boundaryContext()
}

type Window_frame_boundaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_boundaryContext() *Window_frame_boundaryContext {
	var p = new(Window_frame_boundaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_window_frame_boundary
	return p
}

func (*Window_frame_boundaryContext) IsWindow_frame_boundaryContext() {}

func NewWindow_frame_boundaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_boundaryContext {
	var p = new(Window_frame_boundaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_window_frame_boundary

	return p
}

func (s *Window_frame_boundaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_boundaryContext) KW_UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNBOUNDED, 0)
}

func (s *Window_frame_boundaryContext) KW_PRECEDING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRECEDING, 0)
}

func (s *Window_frame_boundaryContext) KW_FOLLOWING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FOLLOWING, 0)
}

func (s *Window_frame_boundaryContext) KW_CURRENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT, 0)
}

func (s *Window_frame_boundaryContext) KW_ROW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROW, 0)
}

func (s *Window_frame_boundaryContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *Window_frame_boundaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_boundaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_boundaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWindow_frame_boundary(s)
	}
}

func (s *Window_frame_boundaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWindow_frame_boundary(s)
	}
}

func (p *HiveParser) Window_frame_boundary() (localctx IWindow_frame_boundaryContext) {
	localctx = NewWindow_frame_boundaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, HiveParserRULE_window_frame_boundary)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3228)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_UNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3222)
			p.Match(HiveParserKW_UNBOUNDED)
		}
		{
			p.SetState(3223)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_PRECEDING || _la == HiveParserKW_FOLLOWING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case HiveParserKW_CURRENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3224)
			p.Match(HiveParserKW_CURRENT)
		}
		{
			p.SetState(3225)
			p.Match(HiveParserKW_ROW)
		}

	case HiveParserNumber:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3226)
			p.Match(HiveParserNumber)
		}
		{
			p.SetState(3227)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_PRECEDING || _la == HiveParserKW_FOLLOWING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableAllColumnsContext is an interface to support dynamic dispatch.
type ITableAllColumnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableAllColumnsContext differentiates from other interfaces.
	IsTableAllColumnsContext()
}

type TableAllColumnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableAllColumnsContext() *TableAllColumnsContext {
	var p = new(TableAllColumnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableAllColumns
	return p
}

func (*TableAllColumnsContext) IsTableAllColumnsContext() {}

func NewTableAllColumnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableAllColumnsContext {
	var p = new(TableAllColumnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableAllColumns

	return p
}

func (s *TableAllColumnsContext) GetParser() antlr.Parser { return s.parser }

func (s *TableAllColumnsContext) STAR() antlr.TerminalNode {
	return s.GetToken(HiveParserSTAR, 0)
}

func (s *TableAllColumnsContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableAllColumnsContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *TableAllColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableAllColumnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableAllColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableAllColumns(s)
	}
}

func (s *TableAllColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableAllColumns(s)
	}
}

func (p *HiveParser) TableAllColumns() (localctx ITableAllColumnsContext) {
	localctx = NewTableAllColumnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, HiveParserRULE_tableAllColumns)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3235)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserSTAR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3230)
			p.Match(HiveParserSTAR)
		}

	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3231)
			p.TableName()
		}
		{
			p.SetState(3232)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(3233)
			p.Match(HiveParserSTAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableOrColumnContext is an interface to support dynamic dispatch.
type ITableOrColumnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableOrColumnContext differentiates from other interfaces.
	IsTableOrColumnContext()
}

type TableOrColumnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableOrColumnContext() *TableOrColumnContext {
	var p = new(TableOrColumnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableOrColumn
	return p
}

func (*TableOrColumnContext) IsTableOrColumnContext() {}

func NewTableOrColumnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableOrColumnContext {
	var p = new(TableOrColumnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableOrColumn

	return p
}

func (s *TableOrColumnContext) GetParser() antlr.Parser { return s.parser }

func (s *TableOrColumnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableOrColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOrColumnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableOrColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableOrColumn(s)
	}
}

func (s *TableOrColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableOrColumn(s)
	}
}

func (p *HiveParser) TableOrColumn() (localctx ITableOrColumnContext) {
	localctx = NewTableOrColumnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, HiveParserRULE_tableOrColumn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3237)
		p.Identifier()
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ExpressionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (p *HiveParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, HiveParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3239)
		p.expression(0)
	}
	p.SetState(3244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3240)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3241)
			p.expression(0)
		}

		p.SetState(3246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAliasListContext is an interface to support dynamic dispatch.
type IAliasListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasListContext differentiates from other interfaces.
	IsAliasListContext()
}

type AliasListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasListContext() *AliasListContext {
	var p = new(AliasListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_aliasList
	return p
}

func (*AliasListContext) IsAliasListContext() {}

func NewAliasListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasListContext {
	var p = new(AliasListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_aliasList

	return p
}

func (s *AliasListContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AliasListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AliasListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *AliasListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *AliasListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAliasList(s)
	}
}

func (s *AliasListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAliasList(s)
	}
}

func (p *HiveParser) AliasList() (localctx IAliasListContext) {
	localctx = NewAliasListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, HiveParserRULE_aliasList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3247)
		p.Identifier()
	}
	p.SetState(3252)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 380, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3248)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3249)
				p.Identifier()
			}

		}
		p.SetState(3254)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 380, p.GetParserRuleContext())
	}

	return localctx
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_fromClause
	return p
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *FromClauseContext) FromSource() IFromSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSourceContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFromClause(s)
	}
}

func (s *FromClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFromClause(s)
	}
}

func (p *HiveParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, HiveParserRULE_fromClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3255)
		p.Match(HiveParserKW_FROM)
	}
	{
		p.SetState(3256)
		p.FromSource()
	}

	return localctx
}

// IFromSourceContext is an interface to support dynamic dispatch.
type IFromSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromSourceContext differentiates from other interfaces.
	IsFromSourceContext()
}

type FromSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromSourceContext() *FromSourceContext {
	var p = new(FromSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_fromSource
	return p
}

func (*FromSourceContext) IsFromSourceContext() {}

func NewFromSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromSourceContext {
	var p = new(FromSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_fromSource

	return p
}

func (s *FromSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *FromSourceContext) UniqueJoinToken() IUniqueJoinTokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueJoinTokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueJoinTokenContext)
}

func (s *FromSourceContext) AllUniqueJoinSource() []IUniqueJoinSourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUniqueJoinSourceContext)(nil)).Elem())
	var tst = make([]IUniqueJoinSourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUniqueJoinSourceContext)
		}
	}

	return tst
}

func (s *FromSourceContext) UniqueJoinSource(i int) IUniqueJoinSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueJoinSourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUniqueJoinSourceContext)
}

func (s *FromSourceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *FromSourceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *FromSourceContext) JoinSource() IJoinSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinSourceContext)
}

func (s *FromSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFromSource(s)
	}
}

func (s *FromSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFromSource(s)
	}
}

func (p *HiveParser) FromSource() (localctx IFromSourceContext) {
	localctx = NewFromSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, HiveParserRULE_fromSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3267)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_UNIQUEJOIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3258)
			p.UniqueJoinToken()
		}
		{
			p.SetState(3259)
			p.UniqueJoinSource()
		}
		p.SetState(3262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == HiveParserCOMMA {
			{
				p.SetState(3260)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3261)
				p.UniqueJoinSource()
			}

			p.SetState(3264)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLE, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserLPAREN, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3266)
			p.JoinSource()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtomjoinSourceContext is an interface to support dynamic dispatch.
type IAtomjoinSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomjoinSourceContext differentiates from other interfaces.
	IsAtomjoinSourceContext()
}

type AtomjoinSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomjoinSourceContext() *AtomjoinSourceContext {
	var p = new(AtomjoinSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_atomjoinSource
	return p
}

func (*AtomjoinSourceContext) IsAtomjoinSourceContext() {}

func NewAtomjoinSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomjoinSourceContext {
	var p = new(AtomjoinSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_atomjoinSource

	return p
}

func (s *AtomjoinSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomjoinSourceContext) TableSource() ITableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceContext)
}

func (s *AtomjoinSourceContext) AllLateralView() []ILateralViewContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILateralViewContext)(nil)).Elem())
	var tst = make([]ILateralViewContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILateralViewContext)
		}
	}

	return tst
}

func (s *AtomjoinSourceContext) LateralView(i int) ILateralViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILateralViewContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILateralViewContext)
}

func (s *AtomjoinSourceContext) VirtualTableSource() IVirtualTableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtualTableSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtualTableSourceContext)
}

func (s *AtomjoinSourceContext) SubQuerySource() ISubQuerySourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubQuerySourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubQuerySourceContext)
}

func (s *AtomjoinSourceContext) PartitionedTableFunction() IPartitionedTableFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionedTableFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionedTableFunctionContext)
}

func (s *AtomjoinSourceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *AtomjoinSourceContext) JoinSource() IJoinSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinSourceContext)
}

func (s *AtomjoinSourceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *AtomjoinSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomjoinSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomjoinSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAtomjoinSource(s)
	}
}

func (s *AtomjoinSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAtomjoinSource(s)
	}
}

func (p *HiveParser) AtomjoinSource() (localctx IAtomjoinSourceContext) {
	localctx = NewAtomjoinSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, HiveParserRULE_atomjoinSource)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3301)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 387, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3269)
			p.TableSource()
		}
		p.SetState(3273)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 383, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3270)
					p.LateralView()
				}

			}
			p.SetState(3275)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 383, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3276)
			p.VirtualTableSource()
		}
		p.SetState(3280)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 384, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3277)
					p.LateralView()
				}

			}
			p.SetState(3282)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 384, p.GetParserRuleContext())
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3283)
			p.SubQuerySource()
		}
		p.SetState(3287)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3284)
					p.LateralView()
				}

			}
			p.SetState(3289)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext())
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3290)
			p.PartitionedTableFunction()
		}
		p.SetState(3294)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 386, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3291)
					p.LateralView()
				}

			}
			p.SetState(3296)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 386, p.GetParserRuleContext())
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3297)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3298)
			p.JoinSource()
		}
		{
			p.SetState(3299)
			p.Match(HiveParserRPAREN)
		}

	}

	return localctx
}

// IJoinSourceContext is an interface to support dynamic dispatch.
type IJoinSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinSourceContext differentiates from other interfaces.
	IsJoinSourceContext()
}

type JoinSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinSourceContext() *JoinSourceContext {
	var p = new(JoinSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_joinSource
	return p
}

func (*JoinSourceContext) IsJoinSourceContext() {}

func NewJoinSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinSourceContext {
	var p = new(JoinSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_joinSource

	return p
}

func (s *JoinSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinSourceContext) AtomjoinSource() IAtomjoinSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomjoinSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomjoinSourceContext)
}

func (s *JoinSourceContext) AllJoinToken() []IJoinTokenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinTokenContext)(nil)).Elem())
	var tst = make([]IJoinTokenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinTokenContext)
		}
	}

	return tst
}

func (s *JoinSourceContext) JoinToken(i int) IJoinTokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinTokenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinTokenContext)
}

func (s *JoinSourceContext) AllJoinSourcePart() []IJoinSourcePartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinSourcePartContext)(nil)).Elem())
	var tst = make([]IJoinSourcePartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinSourcePartContext)
		}
	}

	return tst
}

func (s *JoinSourceContext) JoinSourcePart(i int) IJoinSourcePartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinSourcePartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinSourcePartContext)
}

func (s *JoinSourceContext) AllKW_ON() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_ON)
}

func (s *JoinSourceContext) KW_ON(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, i)
}

func (s *JoinSourceContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *JoinSourceContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JoinSourceContext) AllKW_USING() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_USING)
}

func (s *JoinSourceContext) KW_USING(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USING, i)
}

func (s *JoinSourceContext) AllColumnParenthesesList() []IColumnParenthesesListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem())
	var tst = make([]IColumnParenthesesListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnParenthesesListContext)
		}
	}

	return tst
}

func (s *JoinSourceContext) ColumnParenthesesList(i int) IColumnParenthesesListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnParenthesesListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnParenthesesListContext)
}

func (s *JoinSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterJoinSource(s)
	}
}

func (s *JoinSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitJoinSource(s)
	}
}

func (p *HiveParser) JoinSource() (localctx IJoinSourceContext) {
	localctx = NewJoinSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, HiveParserRULE_joinSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3303)
		p.AtomjoinSource()
	}
	p.SetState(3314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-30)&-(0x1f+1)) == 0 && ((1<<uint((_la-30)))&((1<<(HiveParserKW_JOIN-30))|(1<<(HiveParserKW_LEFT-30))|(1<<(HiveParserKW_RIGHT-30))|(1<<(HiveParserKW_FULL-30)))) != 0) || _la == HiveParserKW_CROSS || _la == HiveParserKW_INNER || _la == HiveParserCOMMA {
		{
			p.SetState(3304)
			p.JoinToken()
		}
		{
			p.SetState(3305)
			p.JoinSourcePart()
		}
		p.SetState(3310)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_ON:
			{
				p.SetState(3306)
				p.Match(HiveParserKW_ON)
			}
			{
				p.SetState(3307)
				p.expression(0)
			}

		case HiveParserKW_USING:
			{
				p.SetState(3308)
				p.Match(HiveParserKW_USING)
			}
			{
				p.SetState(3309)
				p.ColumnParenthesesList()
			}

		case HiveParserEOF, HiveParserKW_ORDER, HiveParserKW_GROUP, HiveParserKW_HAVING, HiveParserKW_WHERE, HiveParserKW_SELECT, HiveParserKW_INSERT, HiveParserKW_JOIN, HiveParserKW_LEFT, HiveParserKW_RIGHT, HiveParserKW_FULL, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_UNION, HiveParserKW_EXCEPT, HiveParserKW_MAP, HiveParserKW_REDUCE, HiveParserKW_LIMIT, HiveParserKW_MINUS, HiveParserKW_INTERSECT, HiveParserKW_CROSS, HiveParserKW_WINDOW, HiveParserKW_INNER, HiveParserCOMMA, HiveParserRPAREN:

		default:
		}

		p.SetState(3316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IJoinSourcePartContext is an interface to support dynamic dispatch.
type IJoinSourcePartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinSourcePartContext differentiates from other interfaces.
	IsJoinSourcePartContext()
}

type JoinSourcePartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinSourcePartContext() *JoinSourcePartContext {
	var p = new(JoinSourcePartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_joinSourcePart
	return p
}

func (*JoinSourcePartContext) IsJoinSourcePartContext() {}

func NewJoinSourcePartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinSourcePartContext {
	var p = new(JoinSourcePartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_joinSourcePart

	return p
}

func (s *JoinSourcePartContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinSourcePartContext) TableSource() ITableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceContext)
}

func (s *JoinSourcePartContext) VirtualTableSource() IVirtualTableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtualTableSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtualTableSourceContext)
}

func (s *JoinSourcePartContext) SubQuerySource() ISubQuerySourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubQuerySourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubQuerySourceContext)
}

func (s *JoinSourcePartContext) PartitionedTableFunction() IPartitionedTableFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionedTableFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionedTableFunctionContext)
}

func (s *JoinSourcePartContext) AllLateralView() []ILateralViewContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILateralViewContext)(nil)).Elem())
	var tst = make([]ILateralViewContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILateralViewContext)
		}
	}

	return tst
}

func (s *JoinSourcePartContext) LateralView(i int) ILateralViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILateralViewContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILateralViewContext)
}

func (s *JoinSourcePartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinSourcePartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinSourcePartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterJoinSourcePart(s)
	}
}

func (s *JoinSourcePartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitJoinSourcePart(s)
	}
}

func (p *HiveParser) JoinSourcePart() (localctx IJoinSourcePartContext) {
	localctx = NewJoinSourcePartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, HiveParserRULE_joinSourcePart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 390, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3317)
			p.TableSource()
		}

	case 2:
		{
			p.SetState(3318)
			p.VirtualTableSource()
		}

	case 3:
		{
			p.SetState(3319)
			p.SubQuerySource()
		}

	case 4:
		{
			p.SetState(3320)
			p.PartitionedTableFunction()
		}

	}
	p.SetState(3326)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 391, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3323)
				p.LateralView()
			}

		}
		p.SetState(3328)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 391, p.GetParserRuleContext())
	}

	return localctx
}

// IUniqueJoinSourceContext is an interface to support dynamic dispatch.
type IUniqueJoinSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueJoinSourceContext differentiates from other interfaces.
	IsUniqueJoinSourceContext()
}

type UniqueJoinSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueJoinSourceContext() *UniqueJoinSourceContext {
	var p = new(UniqueJoinSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_uniqueJoinSource
	return p
}

func (*UniqueJoinSourceContext) IsUniqueJoinSourceContext() {}

func NewUniqueJoinSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueJoinSourceContext {
	var p = new(UniqueJoinSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_uniqueJoinSource

	return p
}

func (s *UniqueJoinSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueJoinSourceContext) UniqueJoinTableSource() IUniqueJoinTableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueJoinTableSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueJoinTableSourceContext)
}

func (s *UniqueJoinSourceContext) UniqueJoinExpr() IUniqueJoinExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueJoinExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueJoinExprContext)
}

func (s *UniqueJoinSourceContext) KW_PRESERVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRESERVE, 0)
}

func (s *UniqueJoinSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueJoinSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueJoinSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUniqueJoinSource(s)
	}
}

func (s *UniqueJoinSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUniqueJoinSource(s)
	}
}

func (p *HiveParser) UniqueJoinSource() (localctx IUniqueJoinSourceContext) {
	localctx = NewUniqueJoinSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, HiveParserRULE_uniqueJoinSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3330)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PRESERVE {
		{
			p.SetState(3329)
			p.Match(HiveParserKW_PRESERVE)
		}

	}
	{
		p.SetState(3332)
		p.UniqueJoinTableSource()
	}
	{
		p.SetState(3333)
		p.UniqueJoinExpr()
	}

	return localctx
}

// IUniqueJoinExprContext is an interface to support dynamic dispatch.
type IUniqueJoinExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueJoinExprContext differentiates from other interfaces.
	IsUniqueJoinExprContext()
}

type UniqueJoinExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueJoinExprContext() *UniqueJoinExprContext {
	var p = new(UniqueJoinExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_uniqueJoinExpr
	return p
}

func (*UniqueJoinExprContext) IsUniqueJoinExprContext() {}

func NewUniqueJoinExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueJoinExprContext {
	var p = new(UniqueJoinExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_uniqueJoinExpr

	return p
}

func (s *UniqueJoinExprContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueJoinExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *UniqueJoinExprContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *UniqueJoinExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *UniqueJoinExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueJoinExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueJoinExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUniqueJoinExpr(s)
	}
}

func (s *UniqueJoinExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUniqueJoinExpr(s)
	}
}

func (p *HiveParser) UniqueJoinExpr() (localctx IUniqueJoinExprContext) {
	localctx = NewUniqueJoinExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, HiveParserRULE_uniqueJoinExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3335)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3336)
		p.ExpressionList()
	}
	{
		p.SetState(3337)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IUniqueJoinTokenContext is an interface to support dynamic dispatch.
type IUniqueJoinTokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueJoinTokenContext differentiates from other interfaces.
	IsUniqueJoinTokenContext()
}

type UniqueJoinTokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueJoinTokenContext() *UniqueJoinTokenContext {
	var p = new(UniqueJoinTokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_uniqueJoinToken
	return p
}

func (*UniqueJoinTokenContext) IsUniqueJoinTokenContext() {}

func NewUniqueJoinTokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueJoinTokenContext {
	var p = new(UniqueJoinTokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_uniqueJoinToken

	return p
}

func (s *UniqueJoinTokenContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueJoinTokenContext) KW_UNIQUEJOIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNIQUEJOIN, 0)
}

func (s *UniqueJoinTokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueJoinTokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueJoinTokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUniqueJoinToken(s)
	}
}

func (s *UniqueJoinTokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUniqueJoinToken(s)
	}
}

func (p *HiveParser) UniqueJoinToken() (localctx IUniqueJoinTokenContext) {
	localctx = NewUniqueJoinTokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, HiveParserRULE_uniqueJoinToken)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3339)
		p.Match(HiveParserKW_UNIQUEJOIN)
	}

	return localctx
}

// IJoinTokenContext is an interface to support dynamic dispatch.
type IJoinTokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinTokenContext differentiates from other interfaces.
	IsJoinTokenContext()
}

type JoinTokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinTokenContext() *JoinTokenContext {
	var p = new(JoinTokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_joinToken
	return p
}

func (*JoinTokenContext) IsJoinTokenContext() {}

func NewJoinTokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinTokenContext {
	var p = new(JoinTokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_joinToken

	return p
}

func (s *JoinTokenContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinTokenContext) KW_JOIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_JOIN, 0)
}

func (s *JoinTokenContext) KW_INNER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INNER, 0)
}

func (s *JoinTokenContext) COMMA() antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, 0)
}

func (s *JoinTokenContext) KW_CROSS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CROSS, 0)
}

func (s *JoinTokenContext) KW_LEFT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LEFT, 0)
}

func (s *JoinTokenContext) KW_OUTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTER, 0)
}

func (s *JoinTokenContext) KW_RIGHT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RIGHT, 0)
}

func (s *JoinTokenContext) KW_FULL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FULL, 0)
}

func (s *JoinTokenContext) KW_SEMI() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SEMI, 0)
}

func (s *JoinTokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinTokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinTokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterJoinToken(s)
	}
}

func (s *JoinTokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitJoinToken(s)
	}
}

func (p *HiveParser) JoinToken() (localctx IJoinTokenContext) {
	localctx = NewJoinTokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, HiveParserRULE_joinToken)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3365)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3341)
			p.Match(HiveParserKW_JOIN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3342)
			p.Match(HiveParserKW_INNER)
		}
		{
			p.SetState(3343)
			p.Match(HiveParserKW_JOIN)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3344)
			p.Match(HiveParserCOMMA)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3345)
			p.Match(HiveParserKW_CROSS)
		}
		{
			p.SetState(3346)
			p.Match(HiveParserKW_JOIN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3347)
			p.Match(HiveParserKW_LEFT)
		}
		p.SetState(3349)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_OUTER {
			{
				p.SetState(3348)
				p.Match(HiveParserKW_OUTER)
			}

		}
		{
			p.SetState(3351)
			p.Match(HiveParserKW_JOIN)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3352)
			p.Match(HiveParserKW_RIGHT)
		}
		p.SetState(3354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_OUTER {
			{
				p.SetState(3353)
				p.Match(HiveParserKW_OUTER)
			}

		}
		{
			p.SetState(3356)
			p.Match(HiveParserKW_JOIN)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3357)
			p.Match(HiveParserKW_FULL)
		}
		p.SetState(3359)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_OUTER {
			{
				p.SetState(3358)
				p.Match(HiveParserKW_OUTER)
			}

		}
		{
			p.SetState(3361)
			p.Match(HiveParserKW_JOIN)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3362)
			p.Match(HiveParserKW_LEFT)
		}
		{
			p.SetState(3363)
			p.Match(HiveParserKW_SEMI)
		}
		{
			p.SetState(3364)
			p.Match(HiveParserKW_JOIN)
		}

	}

	return localctx
}

// ILateralViewContext is an interface to support dynamic dispatch.
type ILateralViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLateralViewContext differentiates from other interfaces.
	IsLateralViewContext()
}

type LateralViewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLateralViewContext() *LateralViewContext {
	var p = new(LateralViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_lateralView
	return p
}

func (*LateralViewContext) IsLateralViewContext() {}

func NewLateralViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LateralViewContext {
	var p = new(LateralViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_lateralView

	return p
}

func (s *LateralViewContext) GetParser() antlr.Parser { return s.parser }

func (s *LateralViewContext) KW_LATERAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LATERAL, 0)
}

func (s *LateralViewContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *LateralViewContext) KW_OUTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTER, 0)
}

func (s *LateralViewContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *LateralViewContext) TableAlias() ITableAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableAliasContext)
}

func (s *LateralViewContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *LateralViewContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *LateralViewContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LateralViewContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *LateralViewContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *LateralViewContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *LateralViewContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLPAREN)
}

func (s *LateralViewContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, i)
}

func (s *LateralViewContext) ValuesClause() IValuesClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValuesClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValuesClauseContext)
}

func (s *LateralViewContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRPAREN)
}

func (s *LateralViewContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, i)
}

func (s *LateralViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LateralViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LateralViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterLateralView(s)
	}
}

func (s *LateralViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitLateralView(s)
	}
}

func (p *HiveParser) LateralView() (localctx ILateralViewContext) {
	localctx = NewLateralViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, HiveParserRULE_lateralView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3426)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 406, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3367)
			p.Match(HiveParserKW_LATERAL)
		}
		{
			p.SetState(3368)
			p.Match(HiveParserKW_VIEW)
		}
		{
			p.SetState(3369)
			p.Match(HiveParserKW_OUTER)
		}
		{
			p.SetState(3370)
			p.Function()
		}
		{
			p.SetState(3371)
			p.TableAlias()
		}
		p.SetState(3381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(3372)
				p.Match(HiveParserKW_AS)
			}
			{
				p.SetState(3373)
				p.Identifier()
			}
			p.SetState(3378)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 397, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(3374)
						p.Match(HiveParserCOMMA)
					}
					{
						p.SetState(3375)
						p.Identifier()
					}

				}
				p.SetState(3380)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 397, p.GetParserRuleContext())
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserCOMMA {
			{
				p.SetState(3383)
				p.Match(HiveParserCOMMA)
			}

		}
		{
			p.SetState(3386)
			p.Match(HiveParserKW_LATERAL)
		}
		{
			p.SetState(3387)
			p.Match(HiveParserKW_VIEW)
		}
		{
			p.SetState(3388)
			p.Function()
		}
		{
			p.SetState(3389)
			p.TableAlias()
		}
		p.SetState(3399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(3390)
				p.Match(HiveParserKW_AS)
			}
			{
				p.SetState(3391)
				p.Identifier()
			}
			p.SetState(3396)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(3392)
						p.Match(HiveParserCOMMA)
					}
					{
						p.SetState(3393)
						p.Identifier()
					}

				}
				p.SetState(3398)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext())
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(3402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserCOMMA {
			{
				p.SetState(3401)
				p.Match(HiveParserCOMMA)
			}

		}
		{
			p.SetState(3404)
			p.Match(HiveParserKW_LATERAL)
		}
		{
			p.SetState(3405)
			p.Match(HiveParserKW_TABLE)
		}
		{
			p.SetState(3406)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3407)
			p.ValuesClause()
		}
		{
			p.SetState(3408)
			p.Match(HiveParserRPAREN)
		}
		p.SetState(3410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(3409)
				p.Match(HiveParserKW_AS)
			}

		}
		{
			p.SetState(3412)
			p.TableAlias()
		}
		p.SetState(3424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserLPAREN {
			{
				p.SetState(3413)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(3414)
				p.Identifier()
			}
			p.SetState(3419)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == HiveParserCOMMA {
				{
					p.SetState(3415)
					p.Match(HiveParserCOMMA)
				}
				{
					p.SetState(3416)
					p.Identifier()
				}

				p.SetState(3421)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(3422)
				p.Match(HiveParserRPAREN)
			}

		}

	}

	return localctx
}

// ITableAliasContext is an interface to support dynamic dispatch.
type ITableAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableAliasContext differentiates from other interfaces.
	IsTableAliasContext()
}

type TableAliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableAliasContext() *TableAliasContext {
	var p = new(TableAliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableAlias
	return p
}

func (*TableAliasContext) IsTableAliasContext() {}

func NewTableAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableAliasContext {
	var p = new(TableAliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableAlias

	return p
}

func (s *TableAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *TableAliasContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableAlias(s)
	}
}

func (s *TableAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableAlias(s)
	}
}

func (p *HiveParser) TableAlias() (localctx ITableAliasContext) {
	localctx = NewTableAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, HiveParserRULE_tableAlias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3428)
		p.Identifier()
	}

	return localctx
}

// ITableBucketSampleContext is an interface to support dynamic dispatch.
type ITableBucketSampleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableBucketSampleContext differentiates from other interfaces.
	IsTableBucketSampleContext()
}

type TableBucketSampleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableBucketSampleContext() *TableBucketSampleContext {
	var p = new(TableBucketSampleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableBucketSample
	return p
}

func (*TableBucketSampleContext) IsTableBucketSampleContext() {}

func NewTableBucketSampleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableBucketSampleContext {
	var p = new(TableBucketSampleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableBucketSample

	return p
}

func (s *TableBucketSampleContext) GetParser() antlr.Parser { return s.parser }

func (s *TableBucketSampleContext) KW_TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLESAMPLE, 0)
}

func (s *TableBucketSampleContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *TableBucketSampleContext) KW_BUCKET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BUCKET, 0)
}

func (s *TableBucketSampleContext) AllNumber() []antlr.TerminalNode {
	return s.GetTokens(HiveParserNumber)
}

func (s *TableBucketSampleContext) Number(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, i)
}

func (s *TableBucketSampleContext) KW_OUT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUT, 0)
}

func (s *TableBucketSampleContext) KW_OF() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OF, 0)
}

func (s *TableBucketSampleContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *TableBucketSampleContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *TableBucketSampleContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TableBucketSampleContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TableBucketSampleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *TableBucketSampleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *TableBucketSampleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableBucketSampleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableBucketSampleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableBucketSample(s)
	}
}

func (s *TableBucketSampleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableBucketSample(s)
	}
}

func (p *HiveParser) TableBucketSample() (localctx ITableBucketSampleContext) {
	localctx = NewTableBucketSampleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, HiveParserRULE_tableBucketSample)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3430)
		p.Match(HiveParserKW_TABLESAMPLE)
	}
	{
		p.SetState(3431)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3432)
		p.Match(HiveParserKW_BUCKET)
	}
	{
		p.SetState(3433)
		p.Match(HiveParserNumber)
	}
	{
		p.SetState(3434)
		p.Match(HiveParserKW_OUT)
	}
	{
		p.SetState(3435)
		p.Match(HiveParserKW_OF)
	}
	{
		p.SetState(3436)
		p.Match(HiveParserNumber)
	}
	p.SetState(3446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ON {
		{
			p.SetState(3437)
			p.Match(HiveParserKW_ON)
		}
		{
			p.SetState(3438)
			p.expression(0)
		}
		p.SetState(3443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(3439)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3440)
				p.expression(0)
			}

			p.SetState(3445)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3448)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ISplitSampleContext is an interface to support dynamic dispatch.
type ISplitSampleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSplitSampleContext differentiates from other interfaces.
	IsSplitSampleContext()
}

type SplitSampleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySplitSampleContext() *SplitSampleContext {
	var p = new(SplitSampleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_splitSample
	return p
}

func (*SplitSampleContext) IsSplitSampleContext() {}

func NewSplitSampleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SplitSampleContext {
	var p = new(SplitSampleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_splitSample

	return p
}

func (s *SplitSampleContext) GetParser() antlr.Parser { return s.parser }

func (s *SplitSampleContext) KW_TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLESAMPLE, 0)
}

func (s *SplitSampleContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *SplitSampleContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *SplitSampleContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *SplitSampleContext) KW_PERCENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PERCENT, 0)
}

func (s *SplitSampleContext) KW_ROWS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROWS, 0)
}

func (s *SplitSampleContext) ByteLengthLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserByteLengthLiteral, 0)
}

func (s *SplitSampleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SplitSampleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SplitSampleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSplitSample(s)
	}
}

func (s *SplitSampleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSplitSample(s)
	}
}

func (p *HiveParser) SplitSample() (localctx ISplitSampleContext) {
	localctx = NewSplitSampleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, HiveParserRULE_splitSample)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3459)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 409, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3450)
			p.Match(HiveParserKW_TABLESAMPLE)
		}
		{
			p.SetState(3451)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3452)
			p.Match(HiveParserNumber)
		}
		{
			p.SetState(3453)
			_la = p.GetTokenStream().LA(1)

			if !(_la == HiveParserKW_ROWS || _la == HiveParserKW_PERCENT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3454)
			p.Match(HiveParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3455)
			p.Match(HiveParserKW_TABLESAMPLE)
		}
		{
			p.SetState(3456)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3457)
			p.Match(HiveParserByteLengthLiteral)
		}
		{
			p.SetState(3458)
			p.Match(HiveParserRPAREN)
		}

	}

	return localctx
}

// ITableSampleContext is an interface to support dynamic dispatch.
type ITableSampleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSampleContext differentiates from other interfaces.
	IsTableSampleContext()
}

type TableSampleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSampleContext() *TableSampleContext {
	var p = new(TableSampleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableSample
	return p
}

func (*TableSampleContext) IsTableSampleContext() {}

func NewTableSampleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSampleContext {
	var p = new(TableSampleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableSample

	return p
}

func (s *TableSampleContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSampleContext) TableBucketSample() ITableBucketSampleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableBucketSampleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableBucketSampleContext)
}

func (s *TableSampleContext) SplitSample() ISplitSampleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISplitSampleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISplitSampleContext)
}

func (s *TableSampleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSampleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableSampleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableSample(s)
	}
}

func (s *TableSampleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableSample(s)
	}
}

func (p *HiveParser) TableSample() (localctx ITableSampleContext) {
	localctx = NewTableSampleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, HiveParserRULE_tableSample)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3463)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 410, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3461)
			p.TableBucketSample()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3462)
			p.SplitSample()
		}

	}

	return localctx
}

// ITableSourceContext is an interface to support dynamic dispatch.
type ITableSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourceContext differentiates from other interfaces.
	IsTableSourceContext()
}

type TableSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourceContext() *TableSourceContext {
	var p = new(TableSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableSource
	return p
}

func (*TableSourceContext) IsTableSourceContext() {}

func NewTableSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourceContext {
	var p = new(TableSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableSource

	return p
}

func (s *TableSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourceContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableSourceContext) TableProperties() ITablePropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablePropertiesContext)
}

func (s *TableSourceContext) TableSample() ITableSampleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSampleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSampleContext)
}

func (s *TableSourceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableSourceContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *TableSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableSource(s)
	}
}

func (s *TableSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableSource(s)
	}
}

func (p *HiveParser) TableSource() (localctx ITableSourceContext) {
	localctx = NewTableSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, HiveParserRULE_tableSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3465)
		p.TableName()
	}
	p.SetState(3467)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserLPAREN {
		{
			p.SetState(3466)
			p.TableProperties()
		}

	}
	p.SetState(3470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TABLESAMPLE {
		{
			p.SetState(3469)
			p.TableSample()
		}

	}
	p.SetState(3476)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext()) == 1 {
		p.SetState(3473)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(3472)
				p.Match(HiveParserKW_AS)
			}

		}
		{
			p.SetState(3475)
			p.Identifier()
		}

	}

	return localctx
}

// IUniqueJoinTableSourceContext is an interface to support dynamic dispatch.
type IUniqueJoinTableSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueJoinTableSourceContext differentiates from other interfaces.
	IsUniqueJoinTableSourceContext()
}

type UniqueJoinTableSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueJoinTableSourceContext() *UniqueJoinTableSourceContext {
	var p = new(UniqueJoinTableSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_uniqueJoinTableSource
	return p
}

func (*UniqueJoinTableSourceContext) IsUniqueJoinTableSourceContext() {}

func NewUniqueJoinTableSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueJoinTableSourceContext {
	var p = new(UniqueJoinTableSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_uniqueJoinTableSource

	return p
}

func (s *UniqueJoinTableSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueJoinTableSourceContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *UniqueJoinTableSourceContext) TableSample() ITableSampleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSampleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSampleContext)
}

func (s *UniqueJoinTableSourceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UniqueJoinTableSourceContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *UniqueJoinTableSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueJoinTableSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueJoinTableSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUniqueJoinTableSource(s)
	}
}

func (s *UniqueJoinTableSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUniqueJoinTableSource(s)
	}
}

func (p *HiveParser) UniqueJoinTableSource() (localctx IUniqueJoinTableSourceContext) {
	localctx = NewUniqueJoinTableSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, HiveParserRULE_uniqueJoinTableSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3478)
		p.TableName()
	}
	p.SetState(3480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TABLESAMPLE {
		{
			p.SetState(3479)
			p.TableSample()
		}

	}
	p.SetState(3486)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_AS)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0) || _la == HiveParserIdentifier {
		p.SetState(3483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_AS {
			{
				p.SetState(3482)
				p.Match(HiveParserKW_AS)
			}

		}
		{
			p.SetState(3485)
			p.Identifier()
		}

	}

	return localctx
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableName
	return p
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *TableNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *HiveParser) TableName() (localctx ITableNameContext) {
	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, HiveParserRULE_tableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3493)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 418, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3488)
			p.Identifier()
		}
		{
			p.SetState(3489)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(3490)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3492)
			p.Identifier()
		}

	}

	return localctx
}

// IViewNameContext is an interface to support dynamic dispatch.
type IViewNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsViewNameContext differentiates from other interfaces.
	IsViewNameContext()
}

type ViewNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyViewNameContext() *ViewNameContext {
	var p = new(ViewNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_viewName
	return p
}

func (*ViewNameContext) IsViewNameContext() {}

func NewViewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ViewNameContext {
	var p = new(ViewNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_viewName

	return p
}

func (s *ViewNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ViewNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ViewNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ViewNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *ViewNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ViewNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ViewNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterViewName(s)
	}
}

func (s *ViewNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitViewName(s)
	}
}

func (p *HiveParser) ViewName() (localctx IViewNameContext) {
	localctx = NewViewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, HiveParserRULE_viewName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3498)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3495)
			p.Identifier()
		}
		{
			p.SetState(3496)
			p.Match(HiveParserDOT)
		}

	}
	{
		p.SetState(3500)
		p.Identifier()
	}

	return localctx
}

// ISubQuerySourceContext is an interface to support dynamic dispatch.
type ISubQuerySourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubQuerySourceContext differentiates from other interfaces.
	IsSubQuerySourceContext()
}

type SubQuerySourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubQuerySourceContext() *SubQuerySourceContext {
	var p = new(SubQuerySourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_subQuerySource
	return p
}

func (*SubQuerySourceContext) IsSubQuerySourceContext() {}

func NewSubQuerySourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubQuerySourceContext {
	var p = new(SubQuerySourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_subQuerySource

	return p
}

func (s *SubQuerySourceContext) GetParser() antlr.Parser { return s.parser }

func (s *SubQuerySourceContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *SubQuerySourceContext) QueryStatementExpression() IQueryStatementExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryStatementExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryStatementExpressionContext)
}

func (s *SubQuerySourceContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *SubQuerySourceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SubQuerySourceContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *SubQuerySourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubQuerySourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubQuerySourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSubQuerySource(s)
	}
}

func (s *SubQuerySourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSubQuerySource(s)
	}
}

func (p *HiveParser) SubQuerySource() (localctx ISubQuerySourceContext) {
	localctx = NewSubQuerySourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, HiveParserRULE_subQuerySource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3502)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3503)
		p.QueryStatementExpression()
	}
	{
		p.SetState(3504)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(3506)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_AS {
		{
			p.SetState(3505)
			p.Match(HiveParserKW_AS)
		}

	}
	{
		p.SetState(3508)
		p.Identifier()
	}

	return localctx
}

// IPartitioningSpecContext is an interface to support dynamic dispatch.
type IPartitioningSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitioningSpecContext differentiates from other interfaces.
	IsPartitioningSpecContext()
}

type PartitioningSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitioningSpecContext() *PartitioningSpecContext {
	var p = new(PartitioningSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitioningSpec
	return p
}

func (*PartitioningSpecContext) IsPartitioningSpecContext() {}

func NewPartitioningSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitioningSpecContext {
	var p = new(PartitioningSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitioningSpec

	return p
}

func (s *PartitioningSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitioningSpecContext) PartitionByClause() IPartitionByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionByClauseContext)
}

func (s *PartitioningSpecContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *PartitioningSpecContext) DistributeByClause() IDistributeByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDistributeByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDistributeByClauseContext)
}

func (s *PartitioningSpecContext) SortByClause() ISortByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISortByClauseContext)
}

func (s *PartitioningSpecContext) ClusterByClause() IClusterByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusterByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusterByClauseContext)
}

func (s *PartitioningSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitioningSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitioningSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitioningSpec(s)
	}
}

func (s *PartitioningSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitioningSpec(s)
	}
}

func (p *HiveParser) PartitioningSpec() (localctx IPartitioningSpecContext) {
	localctx = NewPartitioningSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, HiveParserRULE_partitioningSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3521)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_PARTITION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3510)
			p.PartitionByClause()
		}
		p.SetState(3512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ORDER {
			{
				p.SetState(3511)
				p.OrderByClause()
			}

		}

	case HiveParserKW_ORDER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3514)
			p.OrderByClause()
		}

	case HiveParserKW_DISTRIBUTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3515)
			p.DistributeByClause()
		}
		p.SetState(3517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_SORT {
			{
				p.SetState(3516)
				p.SortByClause()
			}

		}

	case HiveParserKW_SORT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3519)
			p.SortByClause()
		}

	case HiveParserKW_CLUSTER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3520)
			p.ClusterByClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPartitionTableFunctionSourceContext is an interface to support dynamic dispatch.
type IPartitionTableFunctionSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionTableFunctionSourceContext differentiates from other interfaces.
	IsPartitionTableFunctionSourceContext()
}

type PartitionTableFunctionSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionTableFunctionSourceContext() *PartitionTableFunctionSourceContext {
	var p = new(PartitionTableFunctionSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitionTableFunctionSource
	return p
}

func (*PartitionTableFunctionSourceContext) IsPartitionTableFunctionSourceContext() {}

func NewPartitionTableFunctionSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionTableFunctionSourceContext {
	var p = new(PartitionTableFunctionSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitionTableFunctionSource

	return p
}

func (s *PartitionTableFunctionSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionTableFunctionSourceContext) SubQuerySource() ISubQuerySourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubQuerySourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubQuerySourceContext)
}

func (s *PartitionTableFunctionSourceContext) TableSource() ITableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceContext)
}

func (s *PartitionTableFunctionSourceContext) PartitionedTableFunction() IPartitionedTableFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionedTableFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionedTableFunctionContext)
}

func (s *PartitionTableFunctionSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionTableFunctionSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionTableFunctionSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitionTableFunctionSource(s)
	}
}

func (s *PartitionTableFunctionSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitionTableFunctionSource(s)
	}
}

func (p *HiveParser) PartitionTableFunctionSource() (localctx IPartitionTableFunctionSourceContext) {
	localctx = NewPartitionTableFunctionSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, HiveParserRULE_partitionTableFunctionSource)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3526)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3523)
			p.SubQuerySource()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3524)
			p.TableSource()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3525)
			p.PartitionedTableFunction()
		}

	}

	return localctx
}

// IPartitionedTableFunctionContext is an interface to support dynamic dispatch.
type IPartitionedTableFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionedTableFunctionContext differentiates from other interfaces.
	IsPartitionedTableFunctionContext()
}

type PartitionedTableFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionedTableFunctionContext() *PartitionedTableFunctionContext {
	var p = new(PartitionedTableFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitionedTableFunction
	return p
}

func (*PartitionedTableFunctionContext) IsPartitionedTableFunctionContext() {}

func NewPartitionedTableFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionedTableFunctionContext {
	var p = new(PartitionedTableFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitionedTableFunction

	return p
}

func (s *PartitionedTableFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionedTableFunctionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *PartitionedTableFunctionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PartitionedTableFunctionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLPAREN)
}

func (s *PartitionedTableFunctionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, i)
}

func (s *PartitionedTableFunctionContext) KW_ON() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ON, 0)
}

func (s *PartitionedTableFunctionContext) PartitionTableFunctionSource() IPartitionTableFunctionSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionTableFunctionSourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionTableFunctionSourceContext)
}

func (s *PartitionedTableFunctionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRPAREN)
}

func (s *PartitionedTableFunctionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, i)
}

func (s *PartitionedTableFunctionContext) PartitioningSpec() IPartitioningSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitioningSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitioningSpecContext)
}

// func (s *PartitionedTableFunctionContext) AllIdentifier() []antlr.TerminalNode {
// 	return s.GetTokens(HiveParserIdentifier)
// }

// func (s *PartitionedTableFunctionContext) Identifier(i int) antlr.TerminalNode {
// 	return s.GetToken(HiveParserIdentifier, i)
// }

func (s *PartitionedTableFunctionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PartitionedTableFunctionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionedTableFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *PartitionedTableFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *PartitionedTableFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionedTableFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionedTableFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitionedTableFunction(s)
	}
}

func (s *PartitionedTableFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitionedTableFunction(s)
	}
}

func (p *HiveParser) PartitionedTableFunction() (localctx IPartitionedTableFunctionContext) {
	localctx = NewPartitionedTableFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, HiveParserRULE_partitionedTableFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3528)
		p.Identifier()
	}
	{
		p.SetState(3529)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3530)
		p.Match(HiveParserKW_ON)
	}
	{
		p.SetState(3531)
		p.PartitionTableFunctionSource()
	}
	p.SetState(3533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ORDER || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(HiveParserKW_PARTITION-35))|(1<<(HiveParserKW_CLUSTER-35))|(1<<(HiveParserKW_DISTRIBUTE-35))|(1<<(HiveParserKW_SORT-35)))) != 0) {
		{
			p.SetState(3532)
			p.PartitioningSpec()
		}

	}
	p.SetState(3550)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserIdentifier {
		{
			p.SetState(3535)
			p.Match(HiveParserIdentifier)
		}
		{
			p.SetState(3536)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3537)
			p.expression(0)
		}
		{
			p.SetState(3538)
			p.Match(HiveParserRPAREN)
		}
		p.SetState(3547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(3539)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3540)
				p.Match(HiveParserIdentifier)
			}
			{
				p.SetState(3541)
				p.Match(HiveParserLPAREN)
			}
			{
				p.SetState(3542)
				p.expression(0)
			}
			{
				p.SetState(3543)
				p.Match(HiveParserRPAREN)
			}

			p.SetState(3549)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3552)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(3554)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3553)
			p.Identifier()
		}

	}

	return localctx
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_whereClause
	return p
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) KW_WHERE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHERE, 0)
}

func (s *WhereClauseContext) SearchCondition() ISearchConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearchConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearchConditionContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (p *HiveParser) WhereClause() (localctx IWhereClauseContext) {
	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, HiveParserRULE_whereClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3556)
		p.Match(HiveParserKW_WHERE)
	}
	{
		p.SetState(3557)
		p.SearchCondition()
	}

	return localctx
}

// ISearchConditionContext is an interface to support dynamic dispatch.
type ISearchConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearchConditionContext differentiates from other interfaces.
	IsSearchConditionContext()
}

type SearchConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearchConditionContext() *SearchConditionContext {
	var p = new(SearchConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_searchCondition
	return p
}

func (*SearchConditionContext) IsSearchConditionContext() {}

func NewSearchConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SearchConditionContext {
	var p = new(SearchConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_searchCondition

	return p
}

func (s *SearchConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *SearchConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SearchConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SearchConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SearchConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSearchCondition(s)
	}
}

func (s *SearchConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSearchCondition(s)
	}
}

func (p *HiveParser) SearchCondition() (localctx ISearchConditionContext) {
	localctx = NewSearchConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, HiveParserRULE_searchCondition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3559)
		p.expression(0)
	}

	return localctx
}

// IValuesClauseContext is an interface to support dynamic dispatch.
type IValuesClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValuesClauseContext differentiates from other interfaces.
	IsValuesClauseContext()
}

type ValuesClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValuesClauseContext() *ValuesClauseContext {
	var p = new(ValuesClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_valuesClause
	return p
}

func (*ValuesClauseContext) IsValuesClauseContext() {}

func NewValuesClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValuesClauseContext {
	var p = new(ValuesClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_valuesClause

	return p
}

func (s *ValuesClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ValuesClauseContext) KW_VALUES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALUES, 0)
}

func (s *ValuesClauseContext) ValuesTableConstructor() IValuesTableConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValuesTableConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValuesTableConstructorContext)
}

func (s *ValuesClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValuesClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterValuesClause(s)
	}
}

func (s *ValuesClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitValuesClause(s)
	}
}

func (p *HiveParser) ValuesClause() (localctx IValuesClauseContext) {
	localctx = NewValuesClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, HiveParserRULE_valuesClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3561)
		p.Match(HiveParserKW_VALUES)
	}
	{
		p.SetState(3562)
		p.ValuesTableConstructor()
	}

	return localctx
}

// IValuesTableConstructorContext is an interface to support dynamic dispatch.
type IValuesTableConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValuesTableConstructorContext differentiates from other interfaces.
	IsValuesTableConstructorContext()
}

type ValuesTableConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValuesTableConstructorContext() *ValuesTableConstructorContext {
	var p = new(ValuesTableConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_valuesTableConstructor
	return p
}

func (*ValuesTableConstructorContext) IsValuesTableConstructorContext() {}

func NewValuesTableConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValuesTableConstructorContext {
	var p = new(ValuesTableConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_valuesTableConstructor

	return p
}

func (s *ValuesTableConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *ValuesTableConstructorContext) AllValueRowConstructor() []IValueRowConstructorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueRowConstructorContext)(nil)).Elem())
	var tst = make([]IValueRowConstructorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueRowConstructorContext)
		}
	}

	return tst
}

func (s *ValuesTableConstructorContext) ValueRowConstructor(i int) IValueRowConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueRowConstructorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueRowConstructorContext)
}

func (s *ValuesTableConstructorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ValuesTableConstructorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ValuesTableConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesTableConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValuesTableConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterValuesTableConstructor(s)
	}
}

func (s *ValuesTableConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitValuesTableConstructor(s)
	}
}

func (p *HiveParser) ValuesTableConstructor() (localctx IValuesTableConstructorContext) {
	localctx = NewValuesTableConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, HiveParserRULE_valuesTableConstructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3564)
		p.ValueRowConstructor()
	}
	p.SetState(3569)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3565)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3566)
			p.ValueRowConstructor()
		}

		p.SetState(3571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IValueRowConstructorContext is an interface to support dynamic dispatch.
type IValueRowConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueRowConstructorContext differentiates from other interfaces.
	IsValueRowConstructorContext()
}

type ValueRowConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueRowConstructorContext() *ValueRowConstructorContext {
	var p = new(ValueRowConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_valueRowConstructor
	return p
}

func (*ValueRowConstructorContext) IsValueRowConstructorContext() {}

func NewValueRowConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueRowConstructorContext {
	var p = new(ValueRowConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_valueRowConstructor

	return p
}

func (s *ValueRowConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueRowConstructorContext) ExpressionsInParenthesis() IExpressionsInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsInParenthesisContext)
}

func (s *ValueRowConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueRowConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueRowConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterValueRowConstructor(s)
	}
}

func (s *ValueRowConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitValueRowConstructor(s)
	}
}

func (p *HiveParser) ValueRowConstructor() (localctx IValueRowConstructorContext) {
	localctx = NewValueRowConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, HiveParserRULE_valueRowConstructor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3572)
		p.ExpressionsInParenthesis()
	}

	return localctx
}

// IVirtualTableSourceContext is an interface to support dynamic dispatch.
type IVirtualTableSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVirtualTableSourceContext differentiates from other interfaces.
	IsVirtualTableSourceContext()
}

type VirtualTableSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtualTableSourceContext() *VirtualTableSourceContext {
	var p = new(VirtualTableSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_virtualTableSource
	return p
}

func (*VirtualTableSourceContext) IsVirtualTableSourceContext() {}

func NewVirtualTableSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualTableSourceContext {
	var p = new(VirtualTableSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_virtualTableSource

	return p
}

func (s *VirtualTableSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualTableSourceContext) KW_TABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLE, 0)
}

func (s *VirtualTableSourceContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLPAREN)
}

func (s *VirtualTableSourceContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, i)
}

func (s *VirtualTableSourceContext) ValuesClause() IValuesClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValuesClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValuesClauseContext)
}

func (s *VirtualTableSourceContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRPAREN)
}

func (s *VirtualTableSourceContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, i)
}

func (s *VirtualTableSourceContext) TableAlias() ITableAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableAliasContext)
}

func (s *VirtualTableSourceContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *VirtualTableSourceContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *VirtualTableSourceContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VirtualTableSourceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *VirtualTableSourceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *VirtualTableSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualTableSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualTableSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterVirtualTableSource(s)
	}
}

func (s *VirtualTableSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitVirtualTableSource(s)
	}
}

func (p *HiveParser) VirtualTableSource() (localctx IVirtualTableSourceContext) {
	localctx = NewVirtualTableSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, HiveParserRULE_virtualTableSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3574)
		p.Match(HiveParserKW_TABLE)
	}
	{
		p.SetState(3575)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3576)
		p.ValuesClause()
	}
	{
		p.SetState(3577)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(3579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_AS {
		{
			p.SetState(3578)
			p.Match(HiveParserKW_AS)
		}

	}
	{
		p.SetState(3581)
		p.TableAlias()
	}
	p.SetState(3591)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserLPAREN {
		{
			p.SetState(3582)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3583)
			p.Identifier()
		}
		p.SetState(3588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(3584)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3585)
				p.Identifier()
			}

			p.SetState(3590)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3593)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_groupByClause
	return p
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) KW_GROUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUP, 0)
}

func (s *GroupByClauseContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *GroupByClauseContext) Groupby_expression() IGroupby_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupby_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupby_expressionContext)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGroupByClause(s)
	}
}

func (s *GroupByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGroupByClause(s)
	}
}

func (p *HiveParser) GroupByClause() (localctx IGroupByClauseContext) {
	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, HiveParserRULE_groupByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3595)
		p.Match(HiveParserKW_GROUP)
	}
	{
		p.SetState(3596)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(3597)
		p.Groupby_expression()
	}

	return localctx
}

// IGroupby_expressionContext is an interface to support dynamic dispatch.
type IGroupby_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupby_expressionContext differentiates from other interfaces.
	IsGroupby_expressionContext()
}

type Groupby_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupby_expressionContext() *Groupby_expressionContext {
	var p = new(Groupby_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_groupby_expression
	return p
}

func (*Groupby_expressionContext) IsGroupby_expressionContext() {}

func NewGroupby_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Groupby_expressionContext {
	var p = new(Groupby_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_groupby_expression

	return p
}

func (s *Groupby_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Groupby_expressionContext) RollupStandard() IRollupStandardContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollupStandardContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollupStandardContext)
}

func (s *Groupby_expressionContext) RollupOldSyntax() IRollupOldSyntaxContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollupOldSyntaxContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollupOldSyntaxContext)
}

func (s *Groupby_expressionContext) GroupByEmpty() IGroupByEmptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByEmptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByEmptyContext)
}

func (s *Groupby_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Groupby_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Groupby_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGroupby_expression(s)
	}
}

func (s *Groupby_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGroupby_expression(s)
	}
}

func (p *HiveParser) Groupby_expression() (localctx IGroupby_expressionContext) {
	localctx = NewGroupby_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, HiveParserRULE_groupby_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 433, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3599)
			p.RollupStandard()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3600)
			p.RollupOldSyntax()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3601)
			p.GroupByEmpty()
		}

	}

	return localctx
}

// IGroupByEmptyContext is an interface to support dynamic dispatch.
type IGroupByEmptyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByEmptyContext differentiates from other interfaces.
	IsGroupByEmptyContext()
}

type GroupByEmptyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByEmptyContext() *GroupByEmptyContext {
	var p = new(GroupByEmptyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_groupByEmpty
	return p
}

func (*GroupByEmptyContext) IsGroupByEmptyContext() {}

func NewGroupByEmptyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByEmptyContext {
	var p = new(GroupByEmptyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_groupByEmpty

	return p
}

func (s *GroupByEmptyContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByEmptyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *GroupByEmptyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *GroupByEmptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByEmptyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByEmptyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGroupByEmpty(s)
	}
}

func (s *GroupByEmptyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGroupByEmpty(s)
	}
}

func (p *HiveParser) GroupByEmpty() (localctx IGroupByEmptyContext) {
	localctx = NewGroupByEmptyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, HiveParserRULE_groupByEmpty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3604)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3605)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IRollupStandardContext is an interface to support dynamic dispatch.
type IRollupStandardContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollupStandardContext differentiates from other interfaces.
	IsRollupStandardContext()
}

type RollupStandardContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollupStandardContext() *RollupStandardContext {
	var p = new(RollupStandardContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rollupStandard
	return p
}

func (*RollupStandardContext) IsRollupStandardContext() {}

func NewRollupStandardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollupStandardContext {
	var p = new(RollupStandardContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rollupStandard

	return p
}

func (s *RollupStandardContext) GetParser() antlr.Parser { return s.parser }

func (s *RollupStandardContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *RollupStandardContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *RollupStandardContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RollupStandardContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *RollupStandardContext) KW_ROLLUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLLUP, 0)
}

func (s *RollupStandardContext) KW_CUBE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CUBE, 0)
}

func (s *RollupStandardContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *RollupStandardContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *RollupStandardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollupStandardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollupStandardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRollupStandard(s)
	}
}

func (s *RollupStandardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRollupStandard(s)
	}
}

func (p *HiveParser) RollupStandard() (localctx IRollupStandardContext) {
	localctx = NewRollupStandardContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, HiveParserRULE_rollupStandard)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3607)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_ROLLUP || _la == HiveParserKW_CUBE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3608)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3609)
		p.expression(0)
	}
	p.SetState(3614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3610)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3611)
			p.expression(0)
		}

		p.SetState(3616)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3617)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IRollupOldSyntaxContext is an interface to support dynamic dispatch.
type IRollupOldSyntaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollupOldSyntaxContext differentiates from other interfaces.
	IsRollupOldSyntaxContext()
}

type RollupOldSyntaxContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollupOldSyntaxContext() *RollupOldSyntaxContext {
	var p = new(RollupOldSyntaxContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rollupOldSyntax
	return p
}

func (*RollupOldSyntaxContext) IsRollupOldSyntaxContext() {}

func NewRollupOldSyntaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollupOldSyntaxContext {
	var p = new(RollupOldSyntaxContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rollupOldSyntax

	return p
}

func (s *RollupOldSyntaxContext) GetParser() antlr.Parser { return s.parser }

func (s *RollupOldSyntaxContext) ExpressionsNotInParenthesis() IExpressionsNotInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsNotInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsNotInParenthesisContext)
}

func (s *RollupOldSyntaxContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *RollupOldSyntaxContext) KW_ROLLUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLLUP, 0)
}

func (s *RollupOldSyntaxContext) KW_CUBE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CUBE, 0)
}

func (s *RollupOldSyntaxContext) KW_GROUPING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUPING, 0)
}

func (s *RollupOldSyntaxContext) KW_SETS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SETS, 0)
}

func (s *RollupOldSyntaxContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *RollupOldSyntaxContext) AllGroupingSetExpression() []IGroupingSetExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupingSetExpressionContext)(nil)).Elem())
	var tst = make([]IGroupingSetExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupingSetExpressionContext)
		}
	}

	return tst
}

func (s *RollupOldSyntaxContext) GroupingSetExpression(i int) IGroupingSetExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingSetExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupingSetExpressionContext)
}

func (s *RollupOldSyntaxContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *RollupOldSyntaxContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *RollupOldSyntaxContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *RollupOldSyntaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollupOldSyntaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollupOldSyntaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRollupOldSyntax(s)
	}
}

func (s *RollupOldSyntaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRollupOldSyntax(s)
	}
}

func (p *HiveParser) RollupOldSyntax() (localctx IRollupOldSyntaxContext) {
	localctx = NewRollupOldSyntaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, HiveParserRULE_rollupOldSyntax)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3619)
		p.ExpressionsNotInParenthesis()
	}
	p.SetState(3624)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 435, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3620)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(3621)
			p.Match(HiveParserKW_ROLLUP)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 435, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3622)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(3623)
			p.Match(HiveParserKW_CUBE)
		}

	}
	p.SetState(3639)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_GROUPING {
		{
			p.SetState(3626)
			p.Match(HiveParserKW_GROUPING)
		}
		{
			p.SetState(3627)
			p.Match(HiveParserKW_SETS)
		}
		{
			p.SetState(3628)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3629)
			p.GroupingSetExpression()
		}
		p.SetState(3634)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == HiveParserCOMMA {
			{
				p.SetState(3630)
				p.Match(HiveParserCOMMA)
			}
			{
				p.SetState(3631)
				p.GroupingSetExpression()
			}

			p.SetState(3636)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3637)
			p.Match(HiveParserRPAREN)
		}

	}

	return localctx
}

// IGroupingSetExpressionContext is an interface to support dynamic dispatch.
type IGroupingSetExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingSetExpressionContext differentiates from other interfaces.
	IsGroupingSetExpressionContext()
}

type GroupingSetExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingSetExpressionContext() *GroupingSetExpressionContext {
	var p = new(GroupingSetExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_groupingSetExpression
	return p
}

func (*GroupingSetExpressionContext) IsGroupingSetExpressionContext() {}

func NewGroupingSetExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingSetExpressionContext {
	var p = new(GroupingSetExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_groupingSetExpression

	return p
}

func (s *GroupingSetExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingSetExpressionContext) GroupingSetExpressionMultiple() IGroupingSetExpressionMultipleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingSetExpressionMultipleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupingSetExpressionMultipleContext)
}

func (s *GroupingSetExpressionContext) GroupingExpressionSingle() IGroupingExpressionSingleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingExpressionSingleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupingExpressionSingleContext)
}

func (s *GroupingSetExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingSetExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingSetExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGroupingSetExpression(s)
	}
}

func (s *GroupingSetExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGroupingSetExpression(s)
	}
}

func (p *HiveParser) GroupingSetExpression() (localctx IGroupingSetExpressionContext) {
	localctx = NewGroupingSetExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, HiveParserRULE_groupingSetExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3643)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3641)
			p.GroupingSetExpressionMultiple()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3642)
			p.GroupingExpressionSingle()
		}

	}

	return localctx
}

// IGroupingSetExpressionMultipleContext is an interface to support dynamic dispatch.
type IGroupingSetExpressionMultipleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingSetExpressionMultipleContext differentiates from other interfaces.
	IsGroupingSetExpressionMultipleContext()
}

type GroupingSetExpressionMultipleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingSetExpressionMultipleContext() *GroupingSetExpressionMultipleContext {
	var p = new(GroupingSetExpressionMultipleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_groupingSetExpressionMultiple
	return p
}

func (*GroupingSetExpressionMultipleContext) IsGroupingSetExpressionMultipleContext() {}

func NewGroupingSetExpressionMultipleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingSetExpressionMultipleContext {
	var p = new(GroupingSetExpressionMultipleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_groupingSetExpressionMultiple

	return p
}

func (s *GroupingSetExpressionMultipleContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingSetExpressionMultipleContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *GroupingSetExpressionMultipleContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *GroupingSetExpressionMultipleContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *GroupingSetExpressionMultipleContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GroupingSetExpressionMultipleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *GroupingSetExpressionMultipleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *GroupingSetExpressionMultipleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingSetExpressionMultipleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingSetExpressionMultipleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGroupingSetExpressionMultiple(s)
	}
}

func (s *GroupingSetExpressionMultipleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGroupingSetExpressionMultiple(s)
	}
}

func (p *HiveParser) GroupingSetExpressionMultiple() (localctx IGroupingSetExpressionMultipleContext) {
	localctx = NewGroupingSetExpressionMultipleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, HiveParserRULE_groupingSetExpressionMultiple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3645)
		p.Match(HiveParserLPAREN)
	}
	p.SetState(3647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_TRUE)|(1<<HiveParserKW_FALSE)|(1<<HiveParserKW_NOT)|(1<<HiveParserKW_IF)|(1<<HiveParserKW_EXISTS)|(1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36))|(1<<(HiveParserKW_NULL-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_BOOLEAN-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_SMALLINT-68))|(1<<(HiveParserKW_INT-68))|(1<<(HiveParserKW_BIGINT-68))|(1<<(HiveParserKW_FLOAT-68))|(1<<(HiveParserKW_DOUBLE-68))|(1<<(HiveParserKW_DATE-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_TIMESTAMP-68))|(1<<(HiveParserKW_TIMESTAMPLOCALTZ-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_INTERVAL-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_ARRAY-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_MAP-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-133)&-(0x1f+1)) == 0 && ((1<<uint((_la-133)))&((1<<(HiveParserKW_CAST-133))|(1<<(HiveParserKW_ADD-133))|(1<<(HiveParserKW_REPLACE-133))|(1<<(HiveParserKW_TEMPORARY-133))|(1<<(HiveParserKW_FILE-133))|(1<<(HiveParserKW_JAR-133))|(1<<(HiveParserKW_EXPLAIN-133))|(1<<(HiveParserKW_FORMATTED-133))|(1<<(HiveParserKW_DEPENDENCY-133))|(1<<(HiveParserKW_LOGICAL-133))|(1<<(HiveParserKW_SERDE-133))|(1<<(HiveParserKW_DEFERRED-133))|(1<<(HiveParserKW_SERDEPROPERTIES-133))|(1<<(HiveParserKW_DBPROPERTIES-133))|(1<<(HiveParserKW_LIMIT-133))|(1<<(HiveParserKW_OFFSET-133))|(1<<(HiveParserKW_UNSET-133))|(1<<(HiveParserKW_TBLPROPERTIES-133))|(1<<(HiveParserKW_IDXPROPERTIES-133))|(1<<(HiveParserKW_VALUE_TYPE-133))|(1<<(HiveParserKW_ELEM_TYPE-133))|(1<<(HiveParserKW_DEFINED-133))|(1<<(HiveParserKW_CASE-133)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_BINARY-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(HiveParserKW_CURRENT_DATE-237))|(1<<(HiveParserKW_CURRENT_TIMESTAMP-237))|(1<<(HiveParserKW_GROUPING-237))|(1<<(HiveParserKW_SETS-237))|(1<<(HiveParserKW_NOSCAN-237))|(1<<(HiveParserKW_ROLE-237))|(1<<(HiveParserKW_ROLES-237))|(1<<(HiveParserKW_URI-237))|(1<<(HiveParserKW_SERVER-237))|(1<<(HiveParserKW_ADMIN-237))|(1<<(HiveParserKW_OWNER-237))|(1<<(HiveParserKW_PRINCIPALS-237))|(1<<(HiveParserKW_COMPACT-237))|(1<<(HiveParserKW_COMPACTIONS-237))|(1<<(HiveParserKW_TRANSACTIONS-237))|(1<<(HiveParserKW_REWRITE-237))|(1<<(HiveParserKW_REOPTIMIZATION-237))|(1<<(HiveParserKW_RELOAD-237))|(1<<(HiveParserKW_YEAR-237))|(1<<(HiveParserKW_QUERY-237))|(1<<(HiveParserKW_QUARTER-237))|(1<<(HiveParserKW_MONTH-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(HiveParserKW_WEEK-269))|(1<<(HiveParserKW_DAY-269))|(1<<(HiveParserKW_DOW-269))|(1<<(HiveParserKW_HOUR-269))|(1<<(HiveParserKW_MINUTE-269))|(1<<(HiveParserKW_SECOND-269))|(1<<(HiveParserKW_TRANSACTION-269))|(1<<(HiveParserKW_WORK-269))|(1<<(HiveParserKW_WRITE-269))|(1<<(HiveParserKW_ISOLATION-269))|(1<<(HiveParserKW_LEVEL-269))|(1<<(HiveParserKW_SNAPSHOT-269))|(1<<(HiveParserKW_AUTOCOMMIT-269))|(1<<(HiveParserKW_CACHE-269))|(1<<(HiveParserKW_ENFORCED-269))|(1<<(HiveParserKW_VALIDATE-269))|(1<<(HiveParserKW_NOVALIDATE-269))|(1<<(HiveParserKW_RELY-269))|(1<<(HiveParserKW_NORELY-269))|(1<<(HiveParserKW_KEY-269))|(1<<(HiveParserKW_ABORT-269))|(1<<(HiveParserKW_EXTRACT-269))|(1<<(HiveParserKW_FLOOR-269)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(HiveParserKW_MATCHED-302))|(1<<(HiveParserKW_REPL-302))|(1<<(HiveParserKW_DUMP-302))|(1<<(HiveParserKW_STATUS-302))|(1<<(HiveParserKW_VECTORIZATION-302))|(1<<(HiveParserKW_SUMMARY-302))|(1<<(HiveParserKW_OPERATOR-302))|(1<<(HiveParserKW_EXPRESSION-302))|(1<<(HiveParserKW_DETAIL-302))|(1<<(HiveParserKW_WAIT-302))|(1<<(HiveParserKW_RESOURCE-302))|(1<<(HiveParserKW_PLAN-302))|(1<<(HiveParserKW_QUERY_PARALLELISM-302))|(1<<(HiveParserKW_PLANS-302))|(1<<(HiveParserKW_ACTIVATE-302))|(1<<(HiveParserKW_DEFAULT-302))|(1<<(HiveParserKW_CHECK-302))|(1<<(HiveParserKW_POOL-302))|(1<<(HiveParserKW_MOVE-302))|(1<<(HiveParserKW_DO-302))|(1<<(HiveParserKW_ALLOC_FRACTION-302))|(1<<(HiveParserKW_SCHEDULING_POLICY-302))|(1<<(HiveParserKW_PATH-302))|(1<<(HiveParserKW_MAPPING-302))|(1<<(HiveParserKW_WORKLOAD-302))|(1<<(HiveParserKW_MANAGEMENT-302))|(1<<(HiveParserKW_ACTIVE-302))|(1<<(HiveParserKW_UNMANAGED-302)))) != 0) || (((_la-336)&-(0x1f+1)) == 0 && ((1<<uint((_la-336)))&((1<<(HiveParserLPAREN-336))|(1<<(HiveParserPLUS-336))|(1<<(HiveParserMINUS-336))|(1<<(HiveParserTILDE-336))|(1<<(HiveParserStringLiteral-336))|(1<<(HiveParserIntegralLiteral-336))|(1<<(HiveParserNumberLiteral-336))|(1<<(HiveParserNumber-336)))) != 0) || _la == HiveParserIdentifier || _la == HiveParserCharSetName {
		{
			p.SetState(3646)
			p.expression(0)
		}

	}
	p.SetState(3653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3649)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3650)
			p.expression(0)
		}

		p.SetState(3655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3656)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IGroupingExpressionSingleContext is an interface to support dynamic dispatch.
type IGroupingExpressionSingleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingExpressionSingleContext differentiates from other interfaces.
	IsGroupingExpressionSingleContext()
}

type GroupingExpressionSingleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingExpressionSingleContext() *GroupingExpressionSingleContext {
	var p = new(GroupingExpressionSingleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_groupingExpressionSingle
	return p
}

func (*GroupingExpressionSingleContext) IsGroupingExpressionSingleContext() {}

func NewGroupingExpressionSingleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingExpressionSingleContext {
	var p = new(GroupingExpressionSingleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_groupingExpressionSingle

	return p
}

func (s *GroupingExpressionSingleContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingExpressionSingleContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GroupingExpressionSingleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingExpressionSingleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingExpressionSingleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGroupingExpressionSingle(s)
	}
}

func (s *GroupingExpressionSingleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGroupingExpressionSingle(s)
	}
}

func (p *HiveParser) GroupingExpressionSingle() (localctx IGroupingExpressionSingleContext) {
	localctx = NewGroupingExpressionSingleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, HiveParserRULE_groupingExpressionSingle)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3658)
		p.expression(0)
	}

	return localctx
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_havingClause
	return p
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) KW_HAVING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_HAVING, 0)
}

func (s *HavingClauseContext) HavingCondition() IHavingConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingConditionContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterHavingClause(s)
	}
}

func (s *HavingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitHavingClause(s)
	}
}

func (p *HiveParser) HavingClause() (localctx IHavingClauseContext) {
	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, HiveParserRULE_havingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3660)
		p.Match(HiveParserKW_HAVING)
	}
	{
		p.SetState(3661)
		p.HavingCondition()
	}

	return localctx
}

// IHavingConditionContext is an interface to support dynamic dispatch.
type IHavingConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHavingConditionContext differentiates from other interfaces.
	IsHavingConditionContext()
}

type HavingConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHavingConditionContext() *HavingConditionContext {
	var p = new(HavingConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_havingCondition
	return p
}

func (*HavingConditionContext) IsHavingConditionContext() {}

func NewHavingConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingConditionContext {
	var p = new(HavingConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_havingCondition

	return p
}

func (s *HavingConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HavingConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterHavingCondition(s)
	}
}

func (s *HavingConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitHavingCondition(s)
	}
}

func (p *HiveParser) HavingCondition() (localctx IHavingConditionContext) {
	localctx = NewHavingConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, HiveParserRULE_havingCondition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3663)
		p.expression(0)
	}

	return localctx
}

// IExpressionsInParenthesisContext is an interface to support dynamic dispatch.
type IExpressionsInParenthesisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsInParenthesisContext differentiates from other interfaces.
	IsExpressionsInParenthesisContext()
}

type ExpressionsInParenthesisContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsInParenthesisContext() *ExpressionsInParenthesisContext {
	var p = new(ExpressionsInParenthesisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_expressionsInParenthesis
	return p
}

func (*ExpressionsInParenthesisContext) IsExpressionsInParenthesisContext() {}

func NewExpressionsInParenthesisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsInParenthesisContext {
	var p = new(ExpressionsInParenthesisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_expressionsInParenthesis

	return p
}

func (s *ExpressionsInParenthesisContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsInParenthesisContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ExpressionsInParenthesisContext) ExpressionsNotInParenthesis() IExpressionsNotInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsNotInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsNotInParenthesisContext)
}

func (s *ExpressionsInParenthesisContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ExpressionsInParenthesisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsInParenthesisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsInParenthesisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExpressionsInParenthesis(s)
	}
}

func (s *ExpressionsInParenthesisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExpressionsInParenthesis(s)
	}
}

func (p *HiveParser) ExpressionsInParenthesis() (localctx IExpressionsInParenthesisContext) {
	localctx = NewExpressionsInParenthesisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, HiveParserRULE_expressionsInParenthesis)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3665)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3666)
		p.ExpressionsNotInParenthesis()
	}
	{
		p.SetState(3667)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IExpressionsNotInParenthesisContext is an interface to support dynamic dispatch.
type IExpressionsNotInParenthesisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsNotInParenthesisContext differentiates from other interfaces.
	IsExpressionsNotInParenthesisContext()
}

type ExpressionsNotInParenthesisContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsNotInParenthesisContext() *ExpressionsNotInParenthesisContext {
	var p = new(ExpressionsNotInParenthesisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_expressionsNotInParenthesis
	return p
}

func (*ExpressionsNotInParenthesisContext) IsExpressionsNotInParenthesisContext() {}

func NewExpressionsNotInParenthesisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsNotInParenthesisContext {
	var p = new(ExpressionsNotInParenthesisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_expressionsNotInParenthesis

	return p
}

func (s *ExpressionsNotInParenthesisContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsNotInParenthesisContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionsNotInParenthesisContext) ExpressionPart() IExpressionPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionPartContext)
}

func (s *ExpressionsNotInParenthesisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsNotInParenthesisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsNotInParenthesisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExpressionsNotInParenthesis(s)
	}
}

func (s *ExpressionsNotInParenthesisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExpressionsNotInParenthesis(s)
	}
}

func (p *HiveParser) ExpressionsNotInParenthesis() (localctx IExpressionsNotInParenthesisContext) {
	localctx = NewExpressionsNotInParenthesisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, HiveParserRULE_expressionsNotInParenthesis)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3669)
		p.expression(0)
	}
	p.SetState(3671)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserCOMMA {
		{
			p.SetState(3670)
			p.ExpressionPart()
		}

	}

	return localctx
}

// IExpressionPartContext is an interface to support dynamic dispatch.
type IExpressionPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionPartContext differentiates from other interfaces.
	IsExpressionPartContext()
}

type ExpressionPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionPartContext() *ExpressionPartContext {
	var p = new(ExpressionPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_expressionPart
	return p
}

func (*ExpressionPartContext) IsExpressionPartContext() {}

func NewExpressionPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionPartContext {
	var p = new(ExpressionPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_expressionPart

	return p
}

func (s *ExpressionPartContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionPartContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ExpressionPartContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ExpressionPartContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionPartContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExpressionPart(s)
	}
}

func (s *ExpressionPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExpressionPart(s)
	}
}

func (p *HiveParser) ExpressionPart() (localctx IExpressionPartContext) {
	localctx = NewExpressionPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, HiveParserRULE_expressionPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserCOMMA {
		{
			p.SetState(3673)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3674)
			p.expression(0)
		}

		p.SetState(3677)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExpressionsContext is an interface to support dynamic dispatch.
type IExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsContext differentiates from other interfaces.
	IsExpressionsContext()
}

type ExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsContext() *ExpressionsContext {
	var p = new(ExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_expressions
	return p
}

func (*ExpressionsContext) IsExpressionsContext() {}

func NewExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsContext {
	var p = new(ExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_expressions

	return p
}

func (s *ExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsContext) ExpressionsInParenthesis() IExpressionsInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsInParenthesisContext)
}

func (s *ExpressionsContext) ExpressionsNotInParenthesis() IExpressionsNotInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsNotInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsNotInParenthesisContext)
}

func (s *ExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExpressions(s)
	}
}

func (s *ExpressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExpressions(s)
	}
}

func (p *HiveParser) Expressions() (localctx IExpressionsContext) {
	localctx = NewExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, HiveParserRULE_expressions)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3681)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 443, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3679)
			p.ExpressionsInParenthesis()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3680)
			p.ExpressionsNotInParenthesis()
		}

	}

	return localctx
}

// IColumnRefOrderInParenthesisContext is an interface to support dynamic dispatch.
type IColumnRefOrderInParenthesisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnRefOrderInParenthesisContext differentiates from other interfaces.
	IsColumnRefOrderInParenthesisContext()
}

type ColumnRefOrderInParenthesisContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnRefOrderInParenthesisContext() *ColumnRefOrderInParenthesisContext {
	var p = new(ColumnRefOrderInParenthesisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnRefOrderInParenthesis
	return p
}

func (*ColumnRefOrderInParenthesisContext) IsColumnRefOrderInParenthesisContext() {}

func NewColumnRefOrderInParenthesisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnRefOrderInParenthesisContext {
	var p = new(ColumnRefOrderInParenthesisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnRefOrderInParenthesis

	return p
}

func (s *ColumnRefOrderInParenthesisContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnRefOrderInParenthesisContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ColumnRefOrderInParenthesisContext) AllColumnRefOrder() []IColumnRefOrderContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnRefOrderContext)(nil)).Elem())
	var tst = make([]IColumnRefOrderContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnRefOrderContext)
		}
	}

	return tst
}

func (s *ColumnRefOrderInParenthesisContext) ColumnRefOrder(i int) IColumnRefOrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefOrderContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnRefOrderContext)
}

func (s *ColumnRefOrderInParenthesisContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ColumnRefOrderInParenthesisContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnRefOrderInParenthesisContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnRefOrderInParenthesisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnRefOrderInParenthesisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnRefOrderInParenthesisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnRefOrderInParenthesis(s)
	}
}

func (s *ColumnRefOrderInParenthesisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnRefOrderInParenthesis(s)
	}
}

func (p *HiveParser) ColumnRefOrderInParenthesis() (localctx IColumnRefOrderInParenthesisContext) {
	localctx = NewColumnRefOrderInParenthesisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, HiveParserRULE_columnRefOrderInParenthesis)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3683)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3684)
		p.ColumnRefOrder()
	}
	p.SetState(3689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3685)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3686)
			p.ColumnRefOrder()
		}

		p.SetState(3691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3692)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IColumnRefOrderNotInParenthesisContext is an interface to support dynamic dispatch.
type IColumnRefOrderNotInParenthesisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnRefOrderNotInParenthesisContext differentiates from other interfaces.
	IsColumnRefOrderNotInParenthesisContext()
}

type ColumnRefOrderNotInParenthesisContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnRefOrderNotInParenthesisContext() *ColumnRefOrderNotInParenthesisContext {
	var p = new(ColumnRefOrderNotInParenthesisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_columnRefOrderNotInParenthesis
	return p
}

func (*ColumnRefOrderNotInParenthesisContext) IsColumnRefOrderNotInParenthesisContext() {}

func NewColumnRefOrderNotInParenthesisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnRefOrderNotInParenthesisContext {
	var p = new(ColumnRefOrderNotInParenthesisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_columnRefOrderNotInParenthesis

	return p
}

func (s *ColumnRefOrderNotInParenthesisContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnRefOrderNotInParenthesisContext) AllColumnRefOrder() []IColumnRefOrderContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnRefOrderContext)(nil)).Elem())
	var tst = make([]IColumnRefOrderContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnRefOrderContext)
		}
	}

	return tst
}

func (s *ColumnRefOrderNotInParenthesisContext) ColumnRefOrder(i int) IColumnRefOrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefOrderContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnRefOrderContext)
}

func (s *ColumnRefOrderNotInParenthesisContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *ColumnRefOrderNotInParenthesisContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *ColumnRefOrderNotInParenthesisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnRefOrderNotInParenthesisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnRefOrderNotInParenthesisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterColumnRefOrderNotInParenthesis(s)
	}
}

func (s *ColumnRefOrderNotInParenthesisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitColumnRefOrderNotInParenthesis(s)
	}
}

func (p *HiveParser) ColumnRefOrderNotInParenthesis() (localctx IColumnRefOrderNotInParenthesisContext) {
	localctx = NewColumnRefOrderNotInParenthesisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, HiveParserRULE_columnRefOrderNotInParenthesis)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3694)
		p.ColumnRefOrder()
	}
	p.SetState(3699)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3695)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3696)
			p.ColumnRefOrder()
		}

		p.SetState(3701)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_orderByClause
	return p
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) KW_ORDER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ORDER, 0)
}

func (s *OrderByClauseContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *OrderByClauseContext) AllColumnRefOrder() []IColumnRefOrderContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnRefOrderContext)(nil)).Elem())
	var tst = make([]IColumnRefOrderContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnRefOrderContext)
		}
	}

	return tst
}

func (s *OrderByClauseContext) ColumnRefOrder(i int) IColumnRefOrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefOrderContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnRefOrderContext)
}

func (s *OrderByClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *OrderByClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (p *HiveParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, HiveParserRULE_orderByClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3702)
		p.Match(HiveParserKW_ORDER)
	}
	{
		p.SetState(3703)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(3704)
		p.ColumnRefOrder()
	}
	p.SetState(3709)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(3705)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(3706)
			p.ColumnRefOrder()
		}

		p.SetState(3711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClusterByClauseContext is an interface to support dynamic dispatch.
type IClusterByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClusterByClauseContext differentiates from other interfaces.
	IsClusterByClauseContext()
}

type ClusterByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClusterByClauseContext() *ClusterByClauseContext {
	var p = new(ClusterByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_clusterByClause
	return p
}

func (*ClusterByClauseContext) IsClusterByClauseContext() {}

func NewClusterByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClusterByClauseContext {
	var p = new(ClusterByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_clusterByClause

	return p
}

func (s *ClusterByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ClusterByClauseContext) KW_CLUSTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CLUSTER, 0)
}

func (s *ClusterByClauseContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *ClusterByClauseContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *ClusterByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClusterByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClusterByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterClusterByClause(s)
	}
}

func (s *ClusterByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitClusterByClause(s)
	}
}

func (p *HiveParser) ClusterByClause() (localctx IClusterByClauseContext) {
	localctx = NewClusterByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, HiveParserRULE_clusterByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3712)
		p.Match(HiveParserKW_CLUSTER)
	}
	{
		p.SetState(3713)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(3714)
		p.Expressions()
	}

	return localctx
}

// IPartitionByClauseContext is an interface to support dynamic dispatch.
type IPartitionByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionByClauseContext differentiates from other interfaces.
	IsPartitionByClauseContext()
}

type PartitionByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionByClauseContext() *PartitionByClauseContext {
	var p = new(PartitionByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitionByClause
	return p
}

func (*PartitionByClauseContext) IsPartitionByClauseContext() {}

func NewPartitionByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionByClauseContext {
	var p = new(PartitionByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitionByClause

	return p
}

func (s *PartitionByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionByClauseContext) KW_PARTITION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITION, 0)
}

func (s *PartitionByClauseContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *PartitionByClauseContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *PartitionByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitionByClause(s)
	}
}

func (s *PartitionByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitionByClause(s)
	}
}

func (p *HiveParser) PartitionByClause() (localctx IPartitionByClauseContext) {
	localctx = NewPartitionByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, HiveParserRULE_partitionByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3716)
		p.Match(HiveParserKW_PARTITION)
	}
	{
		p.SetState(3717)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(3718)
		p.Expressions()
	}

	return localctx
}

// IDistributeByClauseContext is an interface to support dynamic dispatch.
type IDistributeByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDistributeByClauseContext differentiates from other interfaces.
	IsDistributeByClauseContext()
}

type DistributeByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDistributeByClauseContext() *DistributeByClauseContext {
	var p = new(DistributeByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_distributeByClause
	return p
}

func (*DistributeByClauseContext) IsDistributeByClauseContext() {}

func NewDistributeByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistributeByClauseContext {
	var p = new(DistributeByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_distributeByClause

	return p
}

func (s *DistributeByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DistributeByClauseContext) KW_DISTRIBUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTRIBUTE, 0)
}

func (s *DistributeByClauseContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *DistributeByClauseContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *DistributeByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistributeByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistributeByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDistributeByClause(s)
	}
}

func (s *DistributeByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDistributeByClause(s)
	}
}

func (p *HiveParser) DistributeByClause() (localctx IDistributeByClauseContext) {
	localctx = NewDistributeByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, HiveParserRULE_distributeByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3720)
		p.Match(HiveParserKW_DISTRIBUTE)
	}
	{
		p.SetState(3721)
		p.Match(HiveParserKW_BY)
	}
	{
		p.SetState(3722)
		p.Expressions()
	}

	return localctx
}

// ISortByClauseContext is an interface to support dynamic dispatch.
type ISortByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSortByClauseContext differentiates from other interfaces.
	IsSortByClauseContext()
}

type SortByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySortByClauseContext() *SortByClauseContext {
	var p = new(SortByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_sortByClause
	return p
}

func (*SortByClauseContext) IsSortByClauseContext() {}

func NewSortByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SortByClauseContext {
	var p = new(SortByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_sortByClause

	return p
}

func (s *SortByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SortByClauseContext) KW_SORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SORT, 0)
}

func (s *SortByClauseContext) KW_BY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BY, 0)
}

func (s *SortByClauseContext) ColumnRefOrderInParenthesis() IColumnRefOrderInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefOrderInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefOrderInParenthesisContext)
}

func (s *SortByClauseContext) ColumnRefOrderNotInParenthesis() IColumnRefOrderNotInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefOrderNotInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefOrderNotInParenthesisContext)
}

func (s *SortByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SortByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SortByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSortByClause(s)
	}
}

func (s *SortByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSortByClause(s)
	}
}

func (p *HiveParser) SortByClause() (localctx ISortByClauseContext) {
	localctx = NewSortByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, HiveParserRULE_sortByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3724)
		p.Match(HiveParserKW_SORT)
	}
	{
		p.SetState(3725)
		p.Match(HiveParserKW_BY)
	}
	p.SetState(3728)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 447, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3726)
			p.ColumnRefOrderInParenthesis()
		}

	case 2:
		{
			p.SetState(3727)
			p.ColumnRefOrderNotInParenthesis()
		}

	}

	return localctx
}

// IFunctionContext is an interface to support dynamic dispatch.
type IFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionContext differentiates from other interfaces.
	IsFunctionContext()
}

type FunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionContext() *FunctionContext {
	var p = new(FunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_function
	return p
}

func (*FunctionContext) IsFunctionContext() {}

func NewFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionContext {
	var p = new(FunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_function

	return p
}

func (s *FunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *FunctionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *FunctionContext) STAR() antlr.TerminalNode {
	return s.GetToken(HiveParserSTAR, 0)
}

func (s *FunctionContext) KW_OVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OVER, 0)
}

func (s *FunctionContext) Window_specification() IWindow_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_specificationContext)
}

func (s *FunctionContext) AllSelectExpression() []ISelectExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectExpressionContext)(nil)).Elem())
	var tst = make([]ISelectExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectExpressionContext)
		}
	}

	return tst
}

func (s *FunctionContext) SelectExpression(i int) ISelectExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectExpressionContext)
}

func (s *FunctionContext) KW_DISTINCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTINCT, 0)
}

func (s *FunctionContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *FunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *FunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *FunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFunction(s)
	}
}

func (s *FunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFunction(s)
	}
}

func (p *HiveParser) Function() (localctx IFunctionContext) {
	localctx = NewFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, HiveParserRULE_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3730)
		p.FunctionName()
	}
	{
		p.SetState(3731)
		p.Match(HiveParserLPAREN)
	}
	p.SetState(3746)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 451, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3732)
			p.Match(HiveParserSTAR)
		}

	case 2:
		p.SetState(3734)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_ALL || _la == HiveParserKW_DISTINCT {
			{
				p.SetState(3733)
				_la = p.GetTokenStream().LA(1)

				if !(_la == HiveParserKW_ALL || _la == HiveParserKW_DISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(3744)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_TRUE)|(1<<HiveParserKW_FALSE)|(1<<HiveParserKW_NOT)|(1<<HiveParserKW_IF)|(1<<HiveParserKW_EXISTS)|(1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36))|(1<<(HiveParserKW_NULL-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_BOOLEAN-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_SMALLINT-68))|(1<<(HiveParserKW_INT-68))|(1<<(HiveParserKW_BIGINT-68))|(1<<(HiveParserKW_FLOAT-68))|(1<<(HiveParserKW_DOUBLE-68))|(1<<(HiveParserKW_DATE-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_TIMESTAMP-68))|(1<<(HiveParserKW_TIMESTAMPLOCALTZ-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_INTERVAL-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_ARRAY-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_MAP-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-133)&-(0x1f+1)) == 0 && ((1<<uint((_la-133)))&((1<<(HiveParserKW_CAST-133))|(1<<(HiveParserKW_ADD-133))|(1<<(HiveParserKW_REPLACE-133))|(1<<(HiveParserKW_TEMPORARY-133))|(1<<(HiveParserKW_FILE-133))|(1<<(HiveParserKW_JAR-133))|(1<<(HiveParserKW_EXPLAIN-133))|(1<<(HiveParserKW_FORMATTED-133))|(1<<(HiveParserKW_DEPENDENCY-133))|(1<<(HiveParserKW_LOGICAL-133))|(1<<(HiveParserKW_SERDE-133))|(1<<(HiveParserKW_DEFERRED-133))|(1<<(HiveParserKW_SERDEPROPERTIES-133))|(1<<(HiveParserKW_DBPROPERTIES-133))|(1<<(HiveParserKW_LIMIT-133))|(1<<(HiveParserKW_OFFSET-133))|(1<<(HiveParserKW_UNSET-133))|(1<<(HiveParserKW_TBLPROPERTIES-133))|(1<<(HiveParserKW_IDXPROPERTIES-133))|(1<<(HiveParserKW_VALUE_TYPE-133))|(1<<(HiveParserKW_ELEM_TYPE-133))|(1<<(HiveParserKW_DEFINED-133))|(1<<(HiveParserKW_CASE-133)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_BINARY-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(HiveParserKW_CURRENT_DATE-237))|(1<<(HiveParserKW_CURRENT_TIMESTAMP-237))|(1<<(HiveParserKW_GROUPING-237))|(1<<(HiveParserKW_SETS-237))|(1<<(HiveParserKW_NOSCAN-237))|(1<<(HiveParserKW_ROLE-237))|(1<<(HiveParserKW_ROLES-237))|(1<<(HiveParserKW_URI-237))|(1<<(HiveParserKW_SERVER-237))|(1<<(HiveParserKW_ADMIN-237))|(1<<(HiveParserKW_OWNER-237))|(1<<(HiveParserKW_PRINCIPALS-237))|(1<<(HiveParserKW_COMPACT-237))|(1<<(HiveParserKW_COMPACTIONS-237))|(1<<(HiveParserKW_TRANSACTIONS-237))|(1<<(HiveParserKW_REWRITE-237))|(1<<(HiveParserKW_REOPTIMIZATION-237))|(1<<(HiveParserKW_RELOAD-237))|(1<<(HiveParserKW_YEAR-237))|(1<<(HiveParserKW_QUERY-237))|(1<<(HiveParserKW_QUARTER-237))|(1<<(HiveParserKW_MONTH-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(HiveParserKW_WEEK-269))|(1<<(HiveParserKW_DAY-269))|(1<<(HiveParserKW_DOW-269))|(1<<(HiveParserKW_HOUR-269))|(1<<(HiveParserKW_MINUTE-269))|(1<<(HiveParserKW_SECOND-269))|(1<<(HiveParserKW_TRANSACTION-269))|(1<<(HiveParserKW_WORK-269))|(1<<(HiveParserKW_WRITE-269))|(1<<(HiveParserKW_ISOLATION-269))|(1<<(HiveParserKW_LEVEL-269))|(1<<(HiveParserKW_SNAPSHOT-269))|(1<<(HiveParserKW_AUTOCOMMIT-269))|(1<<(HiveParserKW_CACHE-269))|(1<<(HiveParserKW_ENFORCED-269))|(1<<(HiveParserKW_VALIDATE-269))|(1<<(HiveParserKW_NOVALIDATE-269))|(1<<(HiveParserKW_RELY-269))|(1<<(HiveParserKW_NORELY-269))|(1<<(HiveParserKW_KEY-269))|(1<<(HiveParserKW_ABORT-269))|(1<<(HiveParserKW_EXTRACT-269))|(1<<(HiveParserKW_FLOOR-269)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(HiveParserKW_MATCHED-302))|(1<<(HiveParserKW_REPL-302))|(1<<(HiveParserKW_DUMP-302))|(1<<(HiveParserKW_STATUS-302))|(1<<(HiveParserKW_VECTORIZATION-302))|(1<<(HiveParserKW_SUMMARY-302))|(1<<(HiveParserKW_OPERATOR-302))|(1<<(HiveParserKW_EXPRESSION-302))|(1<<(HiveParserKW_DETAIL-302))|(1<<(HiveParserKW_WAIT-302))|(1<<(HiveParserKW_RESOURCE-302))|(1<<(HiveParserKW_PLAN-302))|(1<<(HiveParserKW_QUERY_PARALLELISM-302))|(1<<(HiveParserKW_PLANS-302))|(1<<(HiveParserKW_ACTIVATE-302))|(1<<(HiveParserKW_DEFAULT-302))|(1<<(HiveParserKW_CHECK-302))|(1<<(HiveParserKW_POOL-302))|(1<<(HiveParserKW_MOVE-302))|(1<<(HiveParserKW_DO-302))|(1<<(HiveParserKW_ALLOC_FRACTION-302))|(1<<(HiveParserKW_SCHEDULING_POLICY-302))|(1<<(HiveParserKW_PATH-302))|(1<<(HiveParserKW_MAPPING-302))|(1<<(HiveParserKW_WORKLOAD-302))|(1<<(HiveParserKW_MANAGEMENT-302))|(1<<(HiveParserKW_ACTIVE-302))|(1<<(HiveParserKW_UNMANAGED-302)))) != 0) || (((_la-336)&-(0x1f+1)) == 0 && ((1<<uint((_la-336)))&((1<<(HiveParserLPAREN-336))|(1<<(HiveParserPLUS-336))|(1<<(HiveParserMINUS-336))|(1<<(HiveParserSTAR-336))|(1<<(HiveParserTILDE-336))|(1<<(HiveParserStringLiteral-336))|(1<<(HiveParserIntegralLiteral-336))|(1<<(HiveParserNumberLiteral-336))|(1<<(HiveParserNumber-336)))) != 0) || _la == HiveParserIdentifier || _la == HiveParserCharSetName {
			{
				p.SetState(3736)
				p.SelectExpression()
			}
			p.SetState(3741)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == HiveParserCOMMA {
				{
					p.SetState(3737)
					p.Match(HiveParserCOMMA)
				}
				{
					p.SetState(3738)
					p.SelectExpression()
				}

				p.SetState(3743)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}
	{
		p.SetState(3748)
		p.Match(HiveParserRPAREN)
	}
	p.SetState(3751)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 452, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3749)
			p.Match(HiveParserKW_OVER)
		}
		{
			p.SetState(3750)
			p.Window_specification()
		}

	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) FunctionIdentifier() IFunctionIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionIdentifierContext)
}

func (s *FunctionNameContext) Sql11ReservedKeywordsUsedAsFunctionName() ISql11ReservedKeywordsUsedAsFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql11ReservedKeywordsUsedAsFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql11ReservedKeywordsUsedAsFunctionNameContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFunctionName(s)
	}
}

func (s *FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFunctionName(s)
	}
}

func (p *HiveParser) FunctionName() (localctx IFunctionNameContext) {
	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, HiveParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3755)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3753)
			p.FunctionIdentifier()
		}

	case HiveParserKW_IF, HiveParserKW_BOOLEAN, HiveParserKW_SMALLINT, HiveParserKW_INT, HiveParserKW_BIGINT, HiveParserKW_FLOAT, HiveParserKW_DOUBLE, HiveParserKW_DATE, HiveParserKW_TIMESTAMP, HiveParserKW_ARRAY, HiveParserKW_MAP, HiveParserKW_BINARY, HiveParserKW_CURRENT_DATE, HiveParserKW_CURRENT_TIMESTAMP, HiveParserKW_GROUPING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3754)
			p.Sql11ReservedKeywordsUsedAsFunctionName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICastExpressionContext is an interface to support dynamic dispatch.
type ICastExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastExpressionContext differentiates from other interfaces.
	IsCastExpressionContext()
}

type CastExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastExpressionContext() *CastExpressionContext {
	var p = new(CastExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_castExpression
	return p
}

func (*CastExpressionContext) IsCastExpressionContext() {}

func NewCastExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastExpressionContext {
	var p = new(CastExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_castExpression

	return p
}

func (s *CastExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastExpressionContext) KW_CAST() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CAST, 0)
}

func (s *CastExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *CastExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CastExpressionContext) KW_AS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AS, 0)
}

func (s *CastExpressionContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *CastExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCastExpression(s)
	}
}

func (s *CastExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCastExpression(s)
	}
}

func (p *HiveParser) CastExpression() (localctx ICastExpressionContext) {
	localctx = NewCastExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, HiveParserRULE_castExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3757)
		p.Match(HiveParserKW_CAST)
	}
	{
		p.SetState(3758)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3759)
		p.expression(0)
	}
	{
		p.SetState(3760)
		p.Match(HiveParserKW_AS)
	}
	{
		p.SetState(3761)
		p.PrimitiveType()
	}
	{
		p.SetState(3762)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ICaseExpressionContext is an interface to support dynamic dispatch.
type ICaseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExpressionContext differentiates from other interfaces.
	IsCaseExpressionContext()
}

type CaseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExpressionContext() *CaseExpressionContext {
	var p = new(CaseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_caseExpression
	return p
}

func (*CaseExpressionContext) IsCaseExpressionContext() {}

func NewCaseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExpressionContext {
	var p = new(CaseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_caseExpression

	return p
}

func (s *CaseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExpressionContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CASE, 0)
}

func (s *CaseExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *CaseExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExpressionContext) KW_END() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_END, 0)
}

func (s *CaseExpressionContext) AllKW_WHEN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_WHEN)
}

func (s *CaseExpressionContext) KW_WHEN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, i)
}

func (s *CaseExpressionContext) AllKW_THEN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_THEN)
}

func (s *CaseExpressionContext) KW_THEN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_THEN, i)
}

func (s *CaseExpressionContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ELSE, 0)
}

func (s *CaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCaseExpression(s)
	}
}

func (s *CaseExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCaseExpression(s)
	}
}

func (p *HiveParser) CaseExpression() (localctx ICaseExpressionContext) {
	localctx = NewCaseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, HiveParserRULE_caseExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3764)
		p.Match(HiveParserKW_CASE)
	}
	{
		p.SetState(3765)
		p.expression(0)
	}
	p.SetState(3771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserKW_WHEN {
		{
			p.SetState(3766)
			p.Match(HiveParserKW_WHEN)
		}
		{
			p.SetState(3767)
			p.expression(0)
		}
		{
			p.SetState(3768)
			p.Match(HiveParserKW_THEN)
		}
		{
			p.SetState(3769)
			p.expression(0)
		}

		p.SetState(3773)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ELSE {
		{
			p.SetState(3775)
			p.Match(HiveParserKW_ELSE)
		}
		{
			p.SetState(3776)
			p.expression(0)
		}

	}
	{
		p.SetState(3779)
		p.Match(HiveParserKW_END)
	}

	return localctx
}

// IWhenExpressionContext is an interface to support dynamic dispatch.
type IWhenExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenExpressionContext differentiates from other interfaces.
	IsWhenExpressionContext()
}

type WhenExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenExpressionContext() *WhenExpressionContext {
	var p = new(WhenExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_whenExpression
	return p
}

func (*WhenExpressionContext) IsWhenExpressionContext() {}

func NewWhenExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenExpressionContext {
	var p = new(WhenExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_whenExpression

	return p
}

func (s *WhenExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenExpressionContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CASE, 0)
}

func (s *WhenExpressionContext) KW_END() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_END, 0)
}

func (s *WhenExpressionContext) AllKW_WHEN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_WHEN)
}

func (s *WhenExpressionContext) KW_WHEN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, i)
}

func (s *WhenExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *WhenExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenExpressionContext) AllKW_THEN() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_THEN)
}

func (s *WhenExpressionContext) KW_THEN(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_THEN, i)
}

func (s *WhenExpressionContext) KW_ELSE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ELSE, 0)
}

func (s *WhenExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWhenExpression(s)
	}
}

func (s *WhenExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWhenExpression(s)
	}
}

func (p *HiveParser) WhenExpression() (localctx IWhenExpressionContext) {
	localctx = NewWhenExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, HiveParserRULE_whenExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3781)
		p.Match(HiveParserKW_CASE)
	}
	p.SetState(3787)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == HiveParserKW_WHEN {
		{
			p.SetState(3782)
			p.Match(HiveParserKW_WHEN)
		}
		{
			p.SetState(3783)
			p.expression(0)
		}
		{
			p.SetState(3784)
			p.Match(HiveParserKW_THEN)
		}
		{
			p.SetState(3785)
			p.expression(0)
		}

		p.SetState(3789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_ELSE {
		{
			p.SetState(3791)
			p.Match(HiveParserKW_ELSE)
		}
		{
			p.SetState(3792)
			p.expression(0)
		}

	}
	{
		p.SetState(3795)
		p.Match(HiveParserKW_END)
	}

	return localctx
}

// IFloorExpressionContext is an interface to support dynamic dispatch.
type IFloorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFloorExpressionContext differentiates from other interfaces.
	IsFloorExpressionContext()
}

type FloorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloorExpressionContext() *FloorExpressionContext {
	var p = new(FloorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_floorExpression
	return p
}

func (*FloorExpressionContext) IsFloorExpressionContext() {}

func NewFloorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloorExpressionContext {
	var p = new(FloorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_floorExpression

	return p
}

func (s *FloorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FloorExpressionContext) KW_FLOOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FLOOR, 0)
}

func (s *FloorExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *FloorExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FloorExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *FloorExpressionContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *FloorExpressionContext) FloorDateQualifiers() IFloorDateQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFloorDateQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFloorDateQualifiersContext)
}

func (s *FloorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFloorExpression(s)
	}
}

func (s *FloorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFloorExpression(s)
	}
}

func (p *HiveParser) FloorExpression() (localctx IFloorExpressionContext) {
	localctx = NewFloorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, HiveParserRULE_floorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3797)
		p.Match(HiveParserKW_FLOOR)
	}
	{
		p.SetState(3798)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3799)
		p.expression(0)
	}
	p.SetState(3802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_TO {
		{
			p.SetState(3800)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(3801)
			p.FloorDateQualifiers()
		}

	}
	{
		p.SetState(3804)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IFloorDateQualifiersContext is an interface to support dynamic dispatch.
type IFloorDateQualifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFloorDateQualifiersContext differentiates from other interfaces.
	IsFloorDateQualifiersContext()
}

type FloorDateQualifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloorDateQualifiersContext() *FloorDateQualifiersContext {
	var p = new(FloorDateQualifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_floorDateQualifiers
	return p
}

func (*FloorDateQualifiersContext) IsFloorDateQualifiersContext() {}

func NewFloorDateQualifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloorDateQualifiersContext {
	var p = new(FloorDateQualifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_floorDateQualifiers

	return p
}

func (s *FloorDateQualifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *FloorDateQualifiersContext) KW_YEAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_YEAR, 0)
}

func (s *FloorDateQualifiersContext) KW_QUARTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUARTER, 0)
}

func (s *FloorDateQualifiersContext) KW_MONTH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MONTH, 0)
}

func (s *FloorDateQualifiersContext) KW_WEEK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WEEK, 0)
}

func (s *FloorDateQualifiersContext) KW_DAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DAY, 0)
}

func (s *FloorDateQualifiersContext) KW_HOUR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_HOUR, 0)
}

func (s *FloorDateQualifiersContext) KW_MINUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MINUTE, 0)
}

func (s *FloorDateQualifiersContext) KW_SECOND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SECOND, 0)
}

func (s *FloorDateQualifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloorDateQualifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloorDateQualifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFloorDateQualifiers(s)
	}
}

func (s *FloorDateQualifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFloorDateQualifiers(s)
	}
}

func (p *HiveParser) FloorDateQualifiers() (localctx IFloorDateQualifiersContext) {
	localctx = NewFloorDateQualifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, HiveParserRULE_floorDateQualifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3806)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-265)&-(0x1f+1)) == 0 && ((1<<uint((_la-265)))&((1<<(HiveParserKW_YEAR-265))|(1<<(HiveParserKW_QUARTER-265))|(1<<(HiveParserKW_MONTH-265))|(1<<(HiveParserKW_WEEK-265))|(1<<(HiveParserKW_DAY-265))|(1<<(HiveParserKW_HOUR-265))|(1<<(HiveParserKW_MINUTE-265))|(1<<(HiveParserKW_SECOND-265)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExtractExpressionContext is an interface to support dynamic dispatch.
type IExtractExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtractExpressionContext differentiates from other interfaces.
	IsExtractExpressionContext()
}

type ExtractExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtractExpressionContext() *ExtractExpressionContext {
	var p = new(ExtractExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_extractExpression
	return p
}

func (*ExtractExpressionContext) IsExtractExpressionContext() {}

func NewExtractExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtractExpressionContext {
	var p = new(ExtractExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_extractExpression

	return p
}

func (s *ExtractExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtractExpressionContext) KW_EXTRACT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXTRACT, 0)
}

func (s *ExtractExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ExtractExpressionContext) TimeQualifiers() ITimeQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeQualifiersContext)
}

func (s *ExtractExpressionContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *ExtractExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExtractExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ExtractExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtractExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExtractExpression(s)
	}
}

func (s *ExtractExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExtractExpression(s)
	}
}

func (p *HiveParser) ExtractExpression() (localctx IExtractExpressionContext) {
	localctx = NewExtractExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, HiveParserRULE_extractExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3808)
		p.Match(HiveParserKW_EXTRACT)
	}
	{
		p.SetState(3809)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(3810)
		p.TimeQualifiers()
	}
	{
		p.SetState(3811)
		p.Match(HiveParserKW_FROM)
	}
	{
		p.SetState(3812)
		p.expression(0)
	}
	{
		p.SetState(3813)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// ITimeQualifiersContext is an interface to support dynamic dispatch.
type ITimeQualifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimeQualifiersContext differentiates from other interfaces.
	IsTimeQualifiersContext()
}

type TimeQualifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeQualifiersContext() *TimeQualifiersContext {
	var p = new(TimeQualifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_timeQualifiers
	return p
}

func (*TimeQualifiersContext) IsTimeQualifiersContext() {}

func NewTimeQualifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeQualifiersContext {
	var p = new(TimeQualifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_timeQualifiers

	return p
}

func (s *TimeQualifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeQualifiersContext) KW_YEAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_YEAR, 0)
}

func (s *TimeQualifiersContext) KW_QUARTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUARTER, 0)
}

func (s *TimeQualifiersContext) KW_MONTH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MONTH, 0)
}

func (s *TimeQualifiersContext) KW_WEEK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WEEK, 0)
}

func (s *TimeQualifiersContext) KW_DAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DAY, 0)
}

func (s *TimeQualifiersContext) KW_DOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DOW, 0)
}

func (s *TimeQualifiersContext) KW_HOUR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_HOUR, 0)
}

func (s *TimeQualifiersContext) KW_MINUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MINUTE, 0)
}

func (s *TimeQualifiersContext) KW_SECOND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SECOND, 0)
}

func (s *TimeQualifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeQualifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimeQualifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTimeQualifiers(s)
	}
}

func (s *TimeQualifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTimeQualifiers(s)
	}
}

func (p *HiveParser) TimeQualifiers() (localctx ITimeQualifiersContext) {
	localctx = NewTimeQualifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, HiveParserRULE_timeQualifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3815)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-265)&-(0x1f+1)) == 0 && ((1<<uint((_la-265)))&((1<<(HiveParserKW_YEAR-265))|(1<<(HiveParserKW_QUARTER-265))|(1<<(HiveParserKW_MONTH-265))|(1<<(HiveParserKW_WEEK-265))|(1<<(HiveParserKW_DAY-265))|(1<<(HiveParserKW_DOW-265))|(1<<(HiveParserKW_HOUR-265))|(1<<(HiveParserKW_MINUTE-265))|(1<<(HiveParserKW_SECOND-265)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) IntervalLiteral() IIntervalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalLiteralContext)
}

func (s *ConstantContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *ConstantContext) DateLiteral() IDateLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDateLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDateLiteralContext)
}

func (s *ConstantContext) TimestampLiteral() ITimestampLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampLiteralContext)
}

func (s *ConstantContext) TimestampLocalTZLiteral() ITimestampLocalTZLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampLocalTZLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampLocalTZLiteralContext)
}

func (s *ConstantContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *ConstantContext) StringLiteralSequence() IStringLiteralSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralSequenceContext)
}

func (s *ConstantContext) IntegralLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserIntegralLiteral, 0)
}

func (s *ConstantContext) NumberLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserNumberLiteral, 0)
}

func (s *ConstantContext) CharSetStringLiteral() ICharSetStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetStringLiteralContext)
}

func (s *ConstantContext) BooleanValue() IBooleanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueContext)
}

func (s *ConstantContext) KW_NULL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NULL, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (p *HiveParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, HiveParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3829)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3817)
			p.IntervalLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3818)
			p.Match(HiveParserNumber)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3819)
			p.DateLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3820)
			p.TimestampLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3821)
			p.TimestampLocalTZLiteral()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3822)
			p.Match(HiveParserStringLiteral)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3823)
			p.StringLiteralSequence()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3824)
			p.Match(HiveParserIntegralLiteral)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3825)
			p.Match(HiveParserNumberLiteral)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3826)
			p.CharSetStringLiteral()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3827)
			p.BooleanValue()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3828)
			p.Match(HiveParserKW_NULL)
		}

	}

	return localctx
}

// IStringLiteralSequenceContext is an interface to support dynamic dispatch.
type IStringLiteralSequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralSequenceContext differentiates from other interfaces.
	IsStringLiteralSequenceContext()
}

type StringLiteralSequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralSequenceContext() *StringLiteralSequenceContext {
	var p = new(StringLiteralSequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_stringLiteralSequence
	return p
}

func (*StringLiteralSequenceContext) IsStringLiteralSequenceContext() {}

func NewStringLiteralSequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralSequenceContext {
	var p = new(StringLiteralSequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_stringLiteralSequence

	return p
}

func (s *StringLiteralSequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralSequenceContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(HiveParserStringLiteral)
}

func (s *StringLiteralSequenceContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, i)
}

func (s *StringLiteralSequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralSequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralSequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterStringLiteralSequence(s)
	}
}

func (s *StringLiteralSequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitStringLiteralSequence(s)
	}
}

func (p *HiveParser) StringLiteralSequence() (localctx IStringLiteralSequenceContext) {
	localctx = NewStringLiteralSequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, HiveParserRULE_stringLiteralSequence)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3831)
		p.Match(HiveParserStringLiteral)
	}
	p.SetState(3833)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(3832)
				p.Match(HiveParserStringLiteral)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3835)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 460, p.GetParserRuleContext())
	}

	return localctx
}

// ICharSetStringLiteralContext is an interface to support dynamic dispatch.
type ICharSetStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharSetStringLiteralContext differentiates from other interfaces.
	IsCharSetStringLiteralContext()
}

type CharSetStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharSetStringLiteralContext() *CharSetStringLiteralContext {
	var p = new(CharSetStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_charSetStringLiteral
	return p
}

func (*CharSetStringLiteralContext) IsCharSetStringLiteralContext() {}

func NewCharSetStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharSetStringLiteralContext {
	var p = new(CharSetStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_charSetStringLiteral

	return p
}

func (s *CharSetStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CharSetStringLiteralContext) CharSetName() antlr.TerminalNode {
	return s.GetToken(HiveParserCharSetName, 0)
}

func (s *CharSetStringLiteralContext) CharSetLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserCharSetLiteral, 0)
}

func (s *CharSetStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharSetStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharSetStringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCharSetStringLiteral(s)
	}
}

func (s *CharSetStringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCharSetStringLiteral(s)
	}
}

func (p *HiveParser) CharSetStringLiteral() (localctx ICharSetStringLiteralContext) {
	localctx = NewCharSetStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, HiveParserRULE_charSetStringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3837)
		p.Match(HiveParserCharSetName)
	}
	{
		p.SetState(3838)
		p.Match(HiveParserCharSetLiteral)
	}

	return localctx
}

// IDateLiteralContext is an interface to support dynamic dispatch.
type IDateLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDateLiteralContext differentiates from other interfaces.
	IsDateLiteralContext()
}

type DateLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDateLiteralContext() *DateLiteralContext {
	var p = new(DateLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dateLiteral
	return p
}

func (*DateLiteralContext) IsDateLiteralContext() {}

func NewDateLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateLiteralContext {
	var p = new(DateLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dateLiteral

	return p
}

func (s *DateLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *DateLiteralContext) KW_DATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATE, 0)
}

func (s *DateLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *DateLiteralContext) KW_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT_DATE, 0)
}

func (s *DateLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDateLiteral(s)
	}
}

func (s *DateLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDateLiteral(s)
	}
}

func (p *HiveParser) DateLiteral() (localctx IDateLiteralContext) {
	localctx = NewDateLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, HiveParserRULE_dateLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3843)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_DATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3840)
			p.Match(HiveParserKW_DATE)
		}
		{
			p.SetState(3841)
			p.Match(HiveParserStringLiteral)
		}

	case HiveParserKW_CURRENT_DATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3842)
			p.Match(HiveParserKW_CURRENT_DATE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimestampLiteralContext is an interface to support dynamic dispatch.
type ITimestampLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampLiteralContext differentiates from other interfaces.
	IsTimestampLiteralContext()
}

type TimestampLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampLiteralContext() *TimestampLiteralContext {
	var p = new(TimestampLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_timestampLiteral
	return p
}

func (*TimestampLiteralContext) IsTimestampLiteralContext() {}

func NewTimestampLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampLiteralContext {
	var p = new(TimestampLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_timestampLiteral

	return p
}

func (s *TimestampLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampLiteralContext) KW_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TIMESTAMP, 0)
}

func (s *TimestampLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TimestampLiteralContext) KW_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT_TIMESTAMP, 0)
}

func (s *TimestampLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTimestampLiteral(s)
	}
}

func (s *TimestampLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTimestampLiteral(s)
	}
}

func (p *HiveParser) TimestampLiteral() (localctx ITimestampLiteralContext) {
	localctx = NewTimestampLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, HiveParserRULE_timestampLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3848)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_TIMESTAMP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3845)
			p.Match(HiveParserKW_TIMESTAMP)
		}
		{
			p.SetState(3846)
			p.Match(HiveParserStringLiteral)
		}

	case HiveParserKW_CURRENT_TIMESTAMP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3847)
			p.Match(HiveParserKW_CURRENT_TIMESTAMP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimestampLocalTZLiteralContext is an interface to support dynamic dispatch.
type ITimestampLocalTZLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampLocalTZLiteralContext differentiates from other interfaces.
	IsTimestampLocalTZLiteralContext()
}

type TimestampLocalTZLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampLocalTZLiteralContext() *TimestampLocalTZLiteralContext {
	var p = new(TimestampLocalTZLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_timestampLocalTZLiteral
	return p
}

func (*TimestampLocalTZLiteralContext) IsTimestampLocalTZLiteralContext() {}

func NewTimestampLocalTZLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampLocalTZLiteralContext {
	var p = new(TimestampLocalTZLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_timestampLocalTZLiteral

	return p
}

func (s *TimestampLocalTZLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampLocalTZLiteralContext) KW_TIMESTAMPLOCALTZ() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TIMESTAMPLOCALTZ, 0)
}

func (s *TimestampLocalTZLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TimestampLocalTZLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampLocalTZLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampLocalTZLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTimestampLocalTZLiteral(s)
	}
}

func (s *TimestampLocalTZLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTimestampLocalTZLiteral(s)
	}
}

func (p *HiveParser) TimestampLocalTZLiteral() (localctx ITimestampLocalTZLiteralContext) {
	localctx = NewTimestampLocalTZLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, HiveParserRULE_timestampLocalTZLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3850)
		p.Match(HiveParserKW_TIMESTAMPLOCALTZ)
	}
	{
		p.SetState(3851)
		p.Match(HiveParserStringLiteral)
	}

	return localctx
}

// IIntervalValueContext is an interface to support dynamic dispatch.
type IIntervalValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalValueContext differentiates from other interfaces.
	IsIntervalValueContext()
}

type IntervalValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalValueContext() *IntervalValueContext {
	var p = new(IntervalValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_intervalValue
	return p
}

func (*IntervalValueContext) IsIntervalValueContext() {}

func NewIntervalValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalValueContext {
	var p = new(IntervalValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_intervalValue

	return p
}

func (s *IntervalValueContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalValueContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *IntervalValueContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *IntervalValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIntervalValue(s)
	}
}

func (s *IntervalValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIntervalValue(s)
	}
}

func (p *HiveParser) IntervalValue() (localctx IIntervalValueContext) {
	localctx = NewIntervalValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, HiveParserRULE_intervalValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3853)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserStringLiteral || _la == HiveParserNumber) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIntervalLiteralContext is an interface to support dynamic dispatch.
type IIntervalLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalLiteralContext differentiates from other interfaces.
	IsIntervalLiteralContext()
}

type IntervalLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalLiteralContext() *IntervalLiteralContext {
	var p = new(IntervalLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_intervalLiteral
	return p
}

func (*IntervalLiteralContext) IsIntervalLiteralContext() {}

func NewIntervalLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalLiteralContext {
	var p = new(IntervalLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_intervalLiteral

	return p
}

func (s *IntervalLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalLiteralContext) IntervalValue() IIntervalValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalValueContext)
}

func (s *IntervalLiteralContext) IntervalQualifiers() IIntervalQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalQualifiersContext)
}

func (s *IntervalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIntervalLiteral(s)
	}
}

func (s *IntervalLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIntervalLiteral(s)
	}
}

func (p *HiveParser) IntervalLiteral() (localctx IIntervalLiteralContext) {
	localctx = NewIntervalLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, HiveParserRULE_intervalLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3855)
		p.IntervalValue()
	}
	{
		p.SetState(3856)
		p.IntervalQualifiers()
	}

	return localctx
}

// IIntervalExpressionContext is an interface to support dynamic dispatch.
type IIntervalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalExpressionContext differentiates from other interfaces.
	IsIntervalExpressionContext()
}

type IntervalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalExpressionContext() *IntervalExpressionContext {
	var p = new(IntervalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_intervalExpression
	return p
}

func (*IntervalExpressionContext) IsIntervalExpressionContext() {}

func NewIntervalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalExpressionContext {
	var p = new(IntervalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_intervalExpression

	return p
}

func (s *IntervalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *IntervalExpressionContext) IntervalValue() IIntervalValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalValueContext)
}

func (s *IntervalExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *IntervalExpressionContext) IntervalQualifiers() IIntervalQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalQualifiersContext)
}

func (s *IntervalExpressionContext) KW_INTERVAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INTERVAL, 0)
}

func (s *IntervalExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIntervalExpression(s)
	}
}

func (s *IntervalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIntervalExpression(s)
	}
}

func (p *HiveParser) IntervalExpression() (localctx IIntervalExpressionContext) {
	localctx = NewIntervalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, HiveParserRULE_intervalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3873)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3858)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3859)
			p.IntervalValue()
		}
		{
			p.SetState(3860)
			p.Match(HiveParserRPAREN)
		}
		{
			p.SetState(3861)
			p.IntervalQualifiers()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3863)
			p.Match(HiveParserKW_INTERVAL)
		}
		{
			p.SetState(3864)
			p.IntervalValue()
		}
		{
			p.SetState(3865)
			p.IntervalQualifiers()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3867)
			p.Match(HiveParserKW_INTERVAL)
		}
		{
			p.SetState(3868)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3869)
			p.expression(0)
		}
		{
			p.SetState(3870)
			p.Match(HiveParserRPAREN)
		}
		{
			p.SetState(3871)
			p.IntervalQualifiers()
		}

	}

	return localctx
}

// IIntervalQualifiersContext is an interface to support dynamic dispatch.
type IIntervalQualifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalQualifiersContext differentiates from other interfaces.
	IsIntervalQualifiersContext()
}

type IntervalQualifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalQualifiersContext() *IntervalQualifiersContext {
	var p = new(IntervalQualifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_intervalQualifiers
	return p
}

func (*IntervalQualifiersContext) IsIntervalQualifiersContext() {}

func NewIntervalQualifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalQualifiersContext {
	var p = new(IntervalQualifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_intervalQualifiers

	return p
}

func (s *IntervalQualifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalQualifiersContext) KW_YEAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_YEAR, 0)
}

func (s *IntervalQualifiersContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *IntervalQualifiersContext) KW_MONTH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MONTH, 0)
}

func (s *IntervalQualifiersContext) KW_DAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DAY, 0)
}

func (s *IntervalQualifiersContext) KW_SECOND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SECOND, 0)
}

func (s *IntervalQualifiersContext) KW_HOUR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_HOUR, 0)
}

func (s *IntervalQualifiersContext) KW_MINUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MINUTE, 0)
}

func (s *IntervalQualifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalQualifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalQualifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIntervalQualifiers(s)
	}
}

func (s *IntervalQualifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIntervalQualifiers(s)
	}
}

func (p *HiveParser) IntervalQualifiers() (localctx IIntervalQualifiersContext) {
	localctx = NewIntervalQualifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, HiveParserRULE_intervalQualifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3887)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 464, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3875)
			p.Match(HiveParserKW_YEAR)
		}
		{
			p.SetState(3876)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(3877)
			p.Match(HiveParserKW_MONTH)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3878)
			p.Match(HiveParserKW_DAY)
		}
		{
			p.SetState(3879)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(3880)
			p.Match(HiveParserKW_SECOND)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3881)
			p.Match(HiveParserKW_YEAR)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3882)
			p.Match(HiveParserKW_MONTH)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3883)
			p.Match(HiveParserKW_DAY)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3884)
			p.Match(HiveParserKW_HOUR)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3885)
			p.Match(HiveParserKW_MINUTE)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3886)
			p.Match(HiveParserKW_SECOND)
		}

	}

	return localctx
}

// IAtomExpressionContext is an interface to support dynamic dispatch.
type IAtomExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomExpressionContext differentiates from other interfaces.
	IsAtomExpressionContext()
}

type AtomExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomExpressionContext() *AtomExpressionContext {
	var p = new(AtomExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_atomExpression
	return p
}

func (*AtomExpressionContext) IsAtomExpressionContext() {}

func NewAtomExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomExpressionContext {
	var p = new(AtomExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_atomExpression

	return p
}

func (s *AtomExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomExpressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *AtomExpressionContext) IntervalExpression() IIntervalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalExpressionContext)
}

func (s *AtomExpressionContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *AtomExpressionContext) ExtractExpression() IExtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtractExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtractExpressionContext)
}

func (s *AtomExpressionContext) FloorExpression() IFloorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFloorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFloorExpressionContext)
}

func (s *AtomExpressionContext) CaseExpression() ICaseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseExpressionContext)
}

func (s *AtomExpressionContext) WhenExpression() IWhenExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhenExpressionContext)
}

func (s *AtomExpressionContext) SubQueryExpression() ISubQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubQueryExpressionContext)
}

func (s *AtomExpressionContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *AtomExpressionContext) TableOrColumn() ITableOrColumnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrColumnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrColumnContext)
}

func (s *AtomExpressionContext) ExpressionsInParenthesis() IExpressionsInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsInParenthesisContext)
}

func (s *AtomExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAtomExpression(s)
	}
}

func (s *AtomExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAtomExpression(s)
	}
}

func (p *HiveParser) AtomExpression() (localctx IAtomExpressionContext) {
	localctx = NewAtomExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, HiveParserRULE_atomExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3900)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3889)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3890)
			p.IntervalExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3891)
			p.CastExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3892)
			p.ExtractExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3893)
			p.FloorExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3894)
			p.CaseExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3895)
			p.WhenExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3896)
			p.SubQueryExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3897)
			p.Function()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3898)
			p.TableOrColumn()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3899)
			p.ExpressionsInParenthesis()
		}

	}

	return localctx
}

// IPrecedenceUnaryOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceUnaryOperatorContext differentiates from other interfaces.
	IsPrecedenceUnaryOperatorContext()
}

type PrecedenceUnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceUnaryOperatorContext() *PrecedenceUnaryOperatorContext {
	var p = new(PrecedenceUnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceUnaryOperator
	return p
}

func (*PrecedenceUnaryOperatorContext) IsPrecedenceUnaryOperatorContext() {}

func NewPrecedenceUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceUnaryOperatorContext {
	var p = new(PrecedenceUnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceUnaryOperator

	return p
}

func (s *PrecedenceUnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceUnaryOperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(HiveParserPLUS, 0)
}

func (s *PrecedenceUnaryOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(HiveParserMINUS, 0)
}

func (s *PrecedenceUnaryOperatorContext) TILDE() antlr.TerminalNode {
	return s.GetToken(HiveParserTILDE, 0)
}

func (s *PrecedenceUnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceUnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceUnaryOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceUnaryOperator(s)
	}
}

func (s *PrecedenceUnaryOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceUnaryOperator(s)
	}
}

func (p *HiveParser) PrecedenceUnaryOperator() (localctx IPrecedenceUnaryOperatorContext) {
	localctx = NewPrecedenceUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, HiveParserRULE_precedenceUnaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3902)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-350)&-(0x1f+1)) == 0 && ((1<<uint((_la-350)))&((1<<(HiveParserPLUS-350))|(1<<(HiveParserMINUS-350))|(1<<(HiveParserTILDE-350)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIsConditionContext is an interface to support dynamic dispatch.
type IIsConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIsConditionContext differentiates from other interfaces.
	IsIsConditionContext()
}

type IsConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIsConditionContext() *IsConditionContext {
	var p = new(IsConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_isCondition
	return p
}

func (*IsConditionContext) IsIsConditionContext() {}

func NewIsConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IsConditionContext {
	var p = new(IsConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_isCondition

	return p
}

func (s *IsConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *IsConditionContext) KW_NULL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NULL, 0)
}

func (s *IsConditionContext) KW_TRUE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRUE, 0)
}

func (s *IsConditionContext) KW_FALSE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FALSE, 0)
}

func (s *IsConditionContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *IsConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IsConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIsCondition(s)
	}
}

func (s *IsConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIsCondition(s)
	}
}

func (p *HiveParser) IsCondition() (localctx IIsConditionContext) {
	localctx = NewIsConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, HiveParserRULE_isCondition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3913)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 466, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3904)
			p.Match(HiveParserKW_NULL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3905)
			p.Match(HiveParserKW_TRUE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3906)
			p.Match(HiveParserKW_FALSE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3907)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(3908)
			p.Match(HiveParserKW_NULL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3909)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(3910)
			p.Match(HiveParserKW_TRUE)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3911)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(3912)
			p.Match(HiveParserKW_FALSE)
		}

	}

	return localctx
}

// IPrecedenceBitwiseXorOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceBitwiseXorOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceBitwiseXorOperatorContext differentiates from other interfaces.
	IsPrecedenceBitwiseXorOperatorContext()
}

type PrecedenceBitwiseXorOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceBitwiseXorOperatorContext() *PrecedenceBitwiseXorOperatorContext {
	var p = new(PrecedenceBitwiseXorOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceBitwiseXorOperator
	return p
}

func (*PrecedenceBitwiseXorOperatorContext) IsPrecedenceBitwiseXorOperatorContext() {}

func NewPrecedenceBitwiseXorOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceBitwiseXorOperatorContext {
	var p = new(PrecedenceBitwiseXorOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceBitwiseXorOperator

	return p
}

func (s *PrecedenceBitwiseXorOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceBitwiseXorOperatorContext) BITWISEXOR() antlr.TerminalNode {
	return s.GetToken(HiveParserBITWISEXOR, 0)
}

func (s *PrecedenceBitwiseXorOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceBitwiseXorOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceBitwiseXorOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceBitwiseXorOperator(s)
	}
}

func (s *PrecedenceBitwiseXorOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceBitwiseXorOperator(s)
	}
}

func (p *HiveParser) PrecedenceBitwiseXorOperator() (localctx IPrecedenceBitwiseXorOperatorContext) {
	localctx = NewPrecedenceBitwiseXorOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, HiveParserRULE_precedenceBitwiseXorOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3915)
		p.Match(HiveParserBITWISEXOR)
	}

	return localctx
}

// IPrecedenceStarOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceStarOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceStarOperatorContext differentiates from other interfaces.
	IsPrecedenceStarOperatorContext()
}

type PrecedenceStarOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceStarOperatorContext() *PrecedenceStarOperatorContext {
	var p = new(PrecedenceStarOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceStarOperator
	return p
}

func (*PrecedenceStarOperatorContext) IsPrecedenceStarOperatorContext() {}

func NewPrecedenceStarOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceStarOperatorContext {
	var p = new(PrecedenceStarOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceStarOperator

	return p
}

func (s *PrecedenceStarOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceStarOperatorContext) STAR() antlr.TerminalNode {
	return s.GetToken(HiveParserSTAR, 0)
}

func (s *PrecedenceStarOperatorContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(HiveParserDIVIDE, 0)
}

func (s *PrecedenceStarOperatorContext) MOD() antlr.TerminalNode {
	return s.GetToken(HiveParserMOD, 0)
}

func (s *PrecedenceStarOperatorContext) DIV() antlr.TerminalNode {
	return s.GetToken(HiveParserDIV, 0)
}

func (s *PrecedenceStarOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceStarOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceStarOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceStarOperator(s)
	}
}

func (s *PrecedenceStarOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceStarOperator(s)
	}
}

func (p *HiveParser) PrecedenceStarOperator() (localctx IPrecedenceStarOperatorContext) {
	localctx = NewPrecedenceStarOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, HiveParserRULE_precedenceStarOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3917)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-349)&-(0x1f+1)) == 0 && ((1<<uint((_la-349)))&((1<<(HiveParserDIVIDE-349))|(1<<(HiveParserSTAR-349))|(1<<(HiveParserMOD-349))|(1<<(HiveParserDIV-349)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrecedencePlusOperatorContext is an interface to support dynamic dispatch.
type IPrecedencePlusOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedencePlusOperatorContext differentiates from other interfaces.
	IsPrecedencePlusOperatorContext()
}

type PrecedencePlusOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedencePlusOperatorContext() *PrecedencePlusOperatorContext {
	var p = new(PrecedencePlusOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedencePlusOperator
	return p
}

func (*PrecedencePlusOperatorContext) IsPrecedencePlusOperatorContext() {}

func NewPrecedencePlusOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedencePlusOperatorContext {
	var p = new(PrecedencePlusOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedencePlusOperator

	return p
}

func (s *PrecedencePlusOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedencePlusOperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(HiveParserPLUS, 0)
}

func (s *PrecedencePlusOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(HiveParserMINUS, 0)
}

func (s *PrecedencePlusOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedencePlusOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedencePlusOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedencePlusOperator(s)
	}
}

func (s *PrecedencePlusOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedencePlusOperator(s)
	}
}

func (p *HiveParser) PrecedencePlusOperator() (localctx IPrecedencePlusOperatorContext) {
	localctx = NewPrecedencePlusOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, HiveParserRULE_precedencePlusOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3919)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserPLUS || _la == HiveParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrecedenceConcatenateOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceConcatenateOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceConcatenateOperatorContext differentiates from other interfaces.
	IsPrecedenceConcatenateOperatorContext()
}

type PrecedenceConcatenateOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceConcatenateOperatorContext() *PrecedenceConcatenateOperatorContext {
	var p = new(PrecedenceConcatenateOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceConcatenateOperator
	return p
}

func (*PrecedenceConcatenateOperatorContext) IsPrecedenceConcatenateOperatorContext() {}

func NewPrecedenceConcatenateOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceConcatenateOperatorContext {
	var p = new(PrecedenceConcatenateOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceConcatenateOperator

	return p
}

func (s *PrecedenceConcatenateOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceConcatenateOperatorContext) CONCATENATE() antlr.TerminalNode {
	return s.GetToken(HiveParserCONCATENATE, 0)
}

func (s *PrecedenceConcatenateOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceConcatenateOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceConcatenateOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceConcatenateOperator(s)
	}
}

func (s *PrecedenceConcatenateOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceConcatenateOperator(s)
	}
}

func (p *HiveParser) PrecedenceConcatenateOperator() (localctx IPrecedenceConcatenateOperatorContext) {
	localctx = NewPrecedenceConcatenateOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, HiveParserRULE_precedenceConcatenateOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3921)
		p.Match(HiveParserCONCATENATE)
	}

	return localctx
}

// IPrecedenceAmpersandOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceAmpersandOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceAmpersandOperatorContext differentiates from other interfaces.
	IsPrecedenceAmpersandOperatorContext()
}

type PrecedenceAmpersandOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceAmpersandOperatorContext() *PrecedenceAmpersandOperatorContext {
	var p = new(PrecedenceAmpersandOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceAmpersandOperator
	return p
}

func (*PrecedenceAmpersandOperatorContext) IsPrecedenceAmpersandOperatorContext() {}

func NewPrecedenceAmpersandOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceAmpersandOperatorContext {
	var p = new(PrecedenceAmpersandOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceAmpersandOperator

	return p
}

func (s *PrecedenceAmpersandOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceAmpersandOperatorContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(HiveParserAMPERSAND, 0)
}

func (s *PrecedenceAmpersandOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceAmpersandOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceAmpersandOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceAmpersandOperator(s)
	}
}

func (s *PrecedenceAmpersandOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceAmpersandOperator(s)
	}
}

func (p *HiveParser) PrecedenceAmpersandOperator() (localctx IPrecedenceAmpersandOperatorContext) {
	localctx = NewPrecedenceAmpersandOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, HiveParserRULE_precedenceAmpersandOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3923)
		p.Match(HiveParserAMPERSAND)
	}

	return localctx
}

// IPrecedenceBitwiseOrOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceBitwiseOrOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceBitwiseOrOperatorContext differentiates from other interfaces.
	IsPrecedenceBitwiseOrOperatorContext()
}

type PrecedenceBitwiseOrOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceBitwiseOrOperatorContext() *PrecedenceBitwiseOrOperatorContext {
	var p = new(PrecedenceBitwiseOrOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceBitwiseOrOperator
	return p
}

func (*PrecedenceBitwiseOrOperatorContext) IsPrecedenceBitwiseOrOperatorContext() {}

func NewPrecedenceBitwiseOrOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceBitwiseOrOperatorContext {
	var p = new(PrecedenceBitwiseOrOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceBitwiseOrOperator

	return p
}

func (s *PrecedenceBitwiseOrOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceBitwiseOrOperatorContext) BITWISEOR() antlr.TerminalNode {
	return s.GetToken(HiveParserBITWISEOR, 0)
}

func (s *PrecedenceBitwiseOrOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceBitwiseOrOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceBitwiseOrOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceBitwiseOrOperator(s)
	}
}

func (s *PrecedenceBitwiseOrOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceBitwiseOrOperator(s)
	}
}

func (p *HiveParser) PrecedenceBitwiseOrOperator() (localctx IPrecedenceBitwiseOrOperatorContext) {
	localctx = NewPrecedenceBitwiseOrOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, HiveParserRULE_precedenceBitwiseOrOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3925)
		p.Match(HiveParserBITWISEOR)
	}

	return localctx
}

// IPrecedenceRegexpOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceRegexpOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceRegexpOperatorContext differentiates from other interfaces.
	IsPrecedenceRegexpOperatorContext()
}

type PrecedenceRegexpOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceRegexpOperatorContext() *PrecedenceRegexpOperatorContext {
	var p = new(PrecedenceRegexpOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceRegexpOperator
	return p
}

func (*PrecedenceRegexpOperatorContext) IsPrecedenceRegexpOperatorContext() {}

func NewPrecedenceRegexpOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceRegexpOperatorContext {
	var p = new(PrecedenceRegexpOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceRegexpOperator

	return p
}

func (s *PrecedenceRegexpOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceRegexpOperatorContext) KW_LIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIKE, 0)
}

func (s *PrecedenceRegexpOperatorContext) KW_RLIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RLIKE, 0)
}

func (s *PrecedenceRegexpOperatorContext) KW_REGEXP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REGEXP, 0)
}

func (s *PrecedenceRegexpOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceRegexpOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceRegexpOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceRegexpOperator(s)
	}
}

func (s *PrecedenceRegexpOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceRegexpOperator(s)
	}
}

func (p *HiveParser) PrecedenceRegexpOperator() (localctx IPrecedenceRegexpOperatorContext) {
	localctx = NewPrecedenceRegexpOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, HiveParserRULE_precedenceRegexpOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3927)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_LIKE || _la == HiveParserKW_RLIKE || _la == HiveParserKW_REGEXP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrecedenceSimilarOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceSimilarOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceSimilarOperatorContext differentiates from other interfaces.
	IsPrecedenceSimilarOperatorContext()
}

type PrecedenceSimilarOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceSimilarOperatorContext() *PrecedenceSimilarOperatorContext {
	var p = new(PrecedenceSimilarOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceSimilarOperator
	return p
}

func (*PrecedenceSimilarOperatorContext) IsPrecedenceSimilarOperatorContext() {}

func NewPrecedenceSimilarOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceSimilarOperatorContext {
	var p = new(PrecedenceSimilarOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceSimilarOperator

	return p
}

func (s *PrecedenceSimilarOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceSimilarOperatorContext) PrecedenceRegexpOperator() IPrecedenceRegexpOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceRegexpOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceRegexpOperatorContext)
}

func (s *PrecedenceSimilarOperatorContext) LESSTHANOREQUALTO() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHANOREQUALTO, 0)
}

func (s *PrecedenceSimilarOperatorContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *PrecedenceSimilarOperatorContext) GREATERTHANOREQUALTO() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHANOREQUALTO, 0)
}

func (s *PrecedenceSimilarOperatorContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *PrecedenceSimilarOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceSimilarOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceSimilarOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceSimilarOperator(s)
	}
}

func (s *PrecedenceSimilarOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceSimilarOperator(s)
	}
}

func (p *HiveParser) PrecedenceSimilarOperator() (localctx IPrecedenceSimilarOperatorContext) {
	localctx = NewPrecedenceSimilarOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, HiveParserRULE_precedenceSimilarOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3934)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_LIKE, HiveParserKW_RLIKE, HiveParserKW_REGEXP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3929)
			p.PrecedenceRegexpOperator()
		}

	case HiveParserLESSTHANOREQUALTO:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3930)
			p.Match(HiveParserLESSTHANOREQUALTO)
		}

	case HiveParserLESSTHAN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3931)
			p.Match(HiveParserLESSTHAN)
		}

	case HiveParserGREATERTHANOREQUALTO:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3932)
			p.Match(HiveParserGREATERTHANOREQUALTO)
		}

	case HiveParserGREATERTHAN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3933)
			p.Match(HiveParserGREATERTHAN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrecedenceDistinctOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceDistinctOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceDistinctOperatorContext differentiates from other interfaces.
	IsPrecedenceDistinctOperatorContext()
}

type PrecedenceDistinctOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceDistinctOperatorContext() *PrecedenceDistinctOperatorContext {
	var p = new(PrecedenceDistinctOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceDistinctOperator
	return p
}

func (*PrecedenceDistinctOperatorContext) IsPrecedenceDistinctOperatorContext() {}

func NewPrecedenceDistinctOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceDistinctOperatorContext {
	var p = new(PrecedenceDistinctOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceDistinctOperator

	return p
}

func (s *PrecedenceDistinctOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceDistinctOperatorContext) KW_IS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IS, 0)
}

func (s *PrecedenceDistinctOperatorContext) KW_DISTINCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTINCT, 0)
}

func (s *PrecedenceDistinctOperatorContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *PrecedenceDistinctOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceDistinctOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceDistinctOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceDistinctOperator(s)
	}
}

func (s *PrecedenceDistinctOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceDistinctOperator(s)
	}
}

func (p *HiveParser) PrecedenceDistinctOperator() (localctx IPrecedenceDistinctOperatorContext) {
	localctx = NewPrecedenceDistinctOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, HiveParserRULE_precedenceDistinctOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3936)
		p.Match(HiveParserKW_IS)
	}
	{
		p.SetState(3937)
		p.Match(HiveParserKW_DISTINCT)
	}
	{
		p.SetState(3938)
		p.Match(HiveParserKW_FROM)
	}

	return localctx
}

// IPrecedenceEqualOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceEqualOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceEqualOperatorContext differentiates from other interfaces.
	IsPrecedenceEqualOperatorContext()
}

type PrecedenceEqualOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceEqualOperatorContext() *PrecedenceEqualOperatorContext {
	var p = new(PrecedenceEqualOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceEqualOperator
	return p
}

func (*PrecedenceEqualOperatorContext) IsPrecedenceEqualOperatorContext() {}

func NewPrecedenceEqualOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceEqualOperatorContext {
	var p = new(PrecedenceEqualOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceEqualOperator

	return p
}

func (s *PrecedenceEqualOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceEqualOperatorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *PrecedenceEqualOperatorContext) EQUAL_NS() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL_NS, 0)
}

func (s *PrecedenceEqualOperatorContext) NOTEQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserNOTEQUAL, 0)
}

func (s *PrecedenceEqualOperatorContext) KW_IS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IS, 0)
}

func (s *PrecedenceEqualOperatorContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *PrecedenceEqualOperatorContext) KW_DISTINCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTINCT, 0)
}

func (s *PrecedenceEqualOperatorContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *PrecedenceEqualOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceEqualOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceEqualOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceEqualOperator(s)
	}
}

func (s *PrecedenceEqualOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceEqualOperator(s)
	}
}

func (p *HiveParser) PrecedenceEqualOperator() (localctx IPrecedenceEqualOperatorContext) {
	localctx = NewPrecedenceEqualOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, HiveParserRULE_precedenceEqualOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3947)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserEQUAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3940)
			p.Match(HiveParserEQUAL)
		}

	case HiveParserEQUAL_NS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3941)
			p.Match(HiveParserEQUAL_NS)
		}

	case HiveParserNOTEQUAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3942)
			p.Match(HiveParserNOTEQUAL)
		}

	case HiveParserKW_IS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3943)
			p.Match(HiveParserKW_IS)
		}
		{
			p.SetState(3944)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(3945)
			p.Match(HiveParserKW_DISTINCT)
		}
		{
			p.SetState(3946)
			p.Match(HiveParserKW_FROM)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrecedenceNotOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceNotOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceNotOperatorContext differentiates from other interfaces.
	IsPrecedenceNotOperatorContext()
}

type PrecedenceNotOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceNotOperatorContext() *PrecedenceNotOperatorContext {
	var p = new(PrecedenceNotOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceNotOperator
	return p
}

func (*PrecedenceNotOperatorContext) IsPrecedenceNotOperatorContext() {}

func NewPrecedenceNotOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceNotOperatorContext {
	var p = new(PrecedenceNotOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceNotOperator

	return p
}

func (s *PrecedenceNotOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceNotOperatorContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *PrecedenceNotOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceNotOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceNotOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceNotOperator(s)
	}
}

func (s *PrecedenceNotOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceNotOperator(s)
	}
}

func (p *HiveParser) PrecedenceNotOperator() (localctx IPrecedenceNotOperatorContext) {
	localctx = NewPrecedenceNotOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, HiveParserRULE_precedenceNotOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3949)
		p.Match(HiveParserKW_NOT)
	}

	return localctx
}

// IPrecedenceAndOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceAndOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceAndOperatorContext differentiates from other interfaces.
	IsPrecedenceAndOperatorContext()
}

type PrecedenceAndOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceAndOperatorContext() *PrecedenceAndOperatorContext {
	var p = new(PrecedenceAndOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceAndOperator
	return p
}

func (*PrecedenceAndOperatorContext) IsPrecedenceAndOperatorContext() {}

func NewPrecedenceAndOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceAndOperatorContext {
	var p = new(PrecedenceAndOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceAndOperator

	return p
}

func (s *PrecedenceAndOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceAndOperatorContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *PrecedenceAndOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceAndOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceAndOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceAndOperator(s)
	}
}

func (s *PrecedenceAndOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceAndOperator(s)
	}
}

func (p *HiveParser) PrecedenceAndOperator() (localctx IPrecedenceAndOperatorContext) {
	localctx = NewPrecedenceAndOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, HiveParserRULE_precedenceAndOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3951)
		p.Match(HiveParserKW_AND)
	}

	return localctx
}

// IPrecedenceOrOperatorContext is an interface to support dynamic dispatch.
type IPrecedenceOrOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceOrOperatorContext differentiates from other interfaces.
	IsPrecedenceOrOperatorContext()
}

type PrecedenceOrOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceOrOperatorContext() *PrecedenceOrOperatorContext {
	var p = new(PrecedenceOrOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceOrOperator
	return p
}

func (*PrecedenceOrOperatorContext) IsPrecedenceOrOperatorContext() {}

func NewPrecedenceOrOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceOrOperatorContext {
	var p = new(PrecedenceOrOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceOrOperator

	return p
}

func (s *PrecedenceOrOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceOrOperatorContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OR, 0)
}

func (s *PrecedenceOrOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceOrOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceOrOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceOrOperator(s)
	}
}

func (s *PrecedenceOrOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceOrOperator(s)
	}
}

func (p *HiveParser) PrecedenceOrOperator() (localctx IPrecedenceOrOperatorContext) {
	localctx = NewPrecedenceOrOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, HiveParserRULE_precedenceOrOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3953)
		p.Match(HiveParserKW_OR)
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) AtomExpression() IAtomExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomExpressionContext)
}

func (s *ExpressionContext) AllLSQUARE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserLSQUARE)
}

func (s *ExpressionContext) LSQUARE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserLSQUARE, i)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) AllRSQUARE() []antlr.TerminalNode {
	return s.GetTokens(HiveParserRSQUARE)
}

func (s *ExpressionContext) RSQUARE(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserRSQUARE, i)
}

func (s *ExpressionContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(HiveParserDOT)
}

func (s *ExpressionContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, i)
}

func (s *ExpressionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExpressionContext) PrecedenceUnaryOperator() IPrecedenceUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceUnaryOperatorContext)
}

func (s *ExpressionContext) KW_EXISTS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXISTS, 0)
}

func (s *ExpressionContext) SubQueryExpression() ISubQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubQueryExpressionContext)
}

func (s *ExpressionContext) PrecedenceNotOperator() IPrecedenceNotOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceNotOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceNotOperatorContext)
}

func (s *ExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *ExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *ExpressionContext) PrecedenceBitwiseXorOperator() IPrecedenceBitwiseXorOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceBitwiseXorOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceBitwiseXorOperatorContext)
}

func (s *ExpressionContext) PrecedenceStarOperator() IPrecedenceStarOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceStarOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceStarOperatorContext)
}

func (s *ExpressionContext) PrecedencePlusOperator() IPrecedencePlusOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedencePlusOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedencePlusOperatorContext)
}

func (s *ExpressionContext) PrecedenceConcatenateOperator() IPrecedenceConcatenateOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceConcatenateOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceConcatenateOperatorContext)
}

func (s *ExpressionContext) PrecedenceAmpersandOperator() IPrecedenceAmpersandOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceAmpersandOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceAmpersandOperatorContext)
}

func (s *ExpressionContext) PrecedenceBitwiseOrOperator() IPrecedenceBitwiseOrOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceBitwiseOrOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceBitwiseOrOperatorContext)
}

func (s *ExpressionContext) PrecedenceEqualOperator() IPrecedenceEqualOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceEqualOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceEqualOperatorContext)
}

func (s *ExpressionContext) PrecedenceDistinctOperator() IPrecedenceDistinctOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceDistinctOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceDistinctOperatorContext)
}

func (s *ExpressionContext) PrecedenceAndOperator() IPrecedenceAndOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceAndOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceAndOperatorContext)
}

func (s *ExpressionContext) PrecedenceOrOperator() IPrecedenceOrOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceOrOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceOrOperatorContext)
}

func (s *ExpressionContext) KW_IS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IS, 0)
}

func (s *ExpressionContext) IsCondition() IIsConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIsConditionContext)
}

func (s *ExpressionContext) PrecedenceSimilarExpressionPart() IPrecedenceSimilarExpressionPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceSimilarExpressionPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceSimilarExpressionPartContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *HiveParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *HiveParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 706
	p.EnterRecursionRule(localctx, 706, HiveParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3980)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 471, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3956)
			p.AtomExpression()
		}
		p.SetState(3965)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(3963)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case HiveParserLSQUARE:
					{
						p.SetState(3957)
						p.Match(HiveParserLSQUARE)
					}
					{
						p.SetState(3958)
						p.expression(0)
					}
					{
						p.SetState(3959)
						p.Match(HiveParserRSQUARE)
					}

				case HiveParserDOT:
					{
						p.SetState(3961)
						p.Match(HiveParserDOT)
					}
					{
						p.SetState(3962)
						p.Identifier()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(3967)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(3968)
			p.PrecedenceUnaryOperator()
		}
		{
			p.SetState(3969)
			p.expression(15)
		}

	case 3:
		{
			p.SetState(3971)
			p.Match(HiveParserKW_EXISTS)
		}
		{
			p.SetState(3972)
			p.SubQueryExpression()
		}

	case 4:
		{
			p.SetState(3973)
			p.PrecedenceNotOperator()
		}
		{
			p.SetState(3974)
			p.expression(4)
		}

	case 5:
		{
			p.SetState(3976)
			p.Match(HiveParserLPAREN)
		}
		{
			p.SetState(3977)
			p.expression(0)
		}
		{
			p.SetState(3978)
			p.Match(HiveParserRPAREN)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4028)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4026)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 473, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(3982)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(3983)
					p.PrecedenceBitwiseXorOperator()
				}
				{
					p.SetState(3984)
					p.expression(14)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(3986)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(3987)
					p.PrecedenceStarOperator()
				}
				{
					p.SetState(3988)
					p.expression(13)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(3990)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(3991)
					p.PrecedencePlusOperator()
				}
				{
					p.SetState(3992)
					p.expression(12)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(3994)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(3995)
					p.PrecedenceConcatenateOperator()
				}
				{
					p.SetState(3996)
					p.expression(11)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(3998)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(3999)
					p.PrecedenceAmpersandOperator()
				}
				{
					p.SetState(4000)
					p.expression(10)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(4002)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(4003)
					p.PrecedenceBitwiseOrOperator()
				}
				{
					p.SetState(4004)
					p.expression(9)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(4006)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(4009)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 472, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4007)
						p.PrecedenceEqualOperator()
					}

				case 2:
					{
						p.SetState(4008)
						p.PrecedenceDistinctOperator()
					}

				}
				{
					p.SetState(4011)
					p.expression(6)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(4013)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(4014)
					p.PrecedenceAndOperator()
				}
				{
					p.SetState(4015)
					p.expression(4)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(4017)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(4018)
					p.PrecedenceOrOperator()
				}
				{
					p.SetState(4019)
					p.expression(3)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(4021)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(4022)
					p.Match(HiveParserKW_IS)
				}
				{
					p.SetState(4023)
					p.IsCondition()
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, HiveParserRULE_expression)
				p.SetState(4024)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(4025)
					p.PrecedenceSimilarExpressionPart()
				}

			}

		}
		p.SetState(4030)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext())
	}

	return localctx
}

// ISubQueryExpressionContext is an interface to support dynamic dispatch.
type ISubQueryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubQueryExpressionContext differentiates from other interfaces.
	IsSubQueryExpressionContext()
}

type SubQueryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubQueryExpressionContext() *SubQueryExpressionContext {
	var p = new(SubQueryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_subQueryExpression
	return p
}

func (*SubQueryExpressionContext) IsSubQueryExpressionContext() {}

func NewSubQueryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubQueryExpressionContext {
	var p = new(SubQueryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_subQueryExpression

	return p
}

func (s *SubQueryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubQueryExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *SubQueryExpressionContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubQueryExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *SubQueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubQueryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubQueryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSubQueryExpression(s)
	}
}

func (s *SubQueryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSubQueryExpression(s)
	}
}

func (p *HiveParser) SubQueryExpression() (localctx ISubQueryExpressionContext) {
	localctx = NewSubQueryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, HiveParserRULE_subQueryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4031)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(4032)
		p.SelectStatement()
	}
	{
		p.SetState(4033)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IPrecedenceSimilarExpressionPartContext is an interface to support dynamic dispatch.
type IPrecedenceSimilarExpressionPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceSimilarExpressionPartContext differentiates from other interfaces.
	IsPrecedenceSimilarExpressionPartContext()
}

type PrecedenceSimilarExpressionPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceSimilarExpressionPartContext() *PrecedenceSimilarExpressionPartContext {
	var p = new(PrecedenceSimilarExpressionPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionPart
	return p
}

func (*PrecedenceSimilarExpressionPartContext) IsPrecedenceSimilarExpressionPartContext() {}

func NewPrecedenceSimilarExpressionPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceSimilarExpressionPartContext {
	var p = new(PrecedenceSimilarExpressionPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionPart

	return p
}

func (s *PrecedenceSimilarExpressionPartContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceSimilarExpressionPartContext) PrecedenceSimilarOperator() IPrecedenceSimilarOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceSimilarOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceSimilarOperatorContext)
}

func (s *PrecedenceSimilarExpressionPartContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrecedenceSimilarExpressionPartContext) PrecedenceSimilarExpressionAtom() IPrecedenceSimilarExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceSimilarExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceSimilarExpressionAtomContext)
}

func (s *PrecedenceSimilarExpressionPartContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *PrecedenceSimilarExpressionPartContext) PrecedenceSimilarExpressionPartNot() IPrecedenceSimilarExpressionPartNotContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceSimilarExpressionPartNotContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceSimilarExpressionPartNotContext)
}

func (s *PrecedenceSimilarExpressionPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceSimilarExpressionPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceSimilarExpressionPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceSimilarExpressionPart(s)
	}
}

func (s *PrecedenceSimilarExpressionPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceSimilarExpressionPart(s)
	}
}

func (p *HiveParser) PrecedenceSimilarExpressionPart() (localctx IPrecedenceSimilarExpressionPartContext) {
	localctx = NewPrecedenceSimilarExpressionPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, HiveParserRULE_precedenceSimilarExpressionPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4041)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 475, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4035)
			p.PrecedenceSimilarOperator()
		}
		{
			p.SetState(4036)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4038)
			p.PrecedenceSimilarExpressionAtom()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4039)
			p.Match(HiveParserKW_NOT)
		}
		{
			p.SetState(4040)
			p.PrecedenceSimilarExpressionPartNot()
		}

	}

	return localctx
}

// IPrecedenceSimilarExpressionAtomContext is an interface to support dynamic dispatch.
type IPrecedenceSimilarExpressionAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceSimilarExpressionAtomContext differentiates from other interfaces.
	IsPrecedenceSimilarExpressionAtomContext()
}

type PrecedenceSimilarExpressionAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceSimilarExpressionAtomContext() *PrecedenceSimilarExpressionAtomContext {
	var p = new(PrecedenceSimilarExpressionAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionAtom
	return p
}

func (*PrecedenceSimilarExpressionAtomContext) IsPrecedenceSimilarExpressionAtomContext() {}

func NewPrecedenceSimilarExpressionAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceSimilarExpressionAtomContext {
	var p = new(PrecedenceSimilarExpressionAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionAtom

	return p
}

func (s *PrecedenceSimilarExpressionAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceSimilarExpressionAtomContext) KW_IN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IN, 0)
}

func (s *PrecedenceSimilarExpressionAtomContext) PrecedenceSimilarExpressionIn() IPrecedenceSimilarExpressionInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceSimilarExpressionInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceSimilarExpressionInContext)
}

func (s *PrecedenceSimilarExpressionAtomContext) KW_BETWEEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BETWEEN, 0)
}

func (s *PrecedenceSimilarExpressionAtomContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PrecedenceSimilarExpressionAtomContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrecedenceSimilarExpressionAtomContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *PrecedenceSimilarExpressionAtomContext) KW_LIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIKE, 0)
}

func (s *PrecedenceSimilarExpressionAtomContext) KW_ANY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ANY, 0)
}

func (s *PrecedenceSimilarExpressionAtomContext) ExpressionsInParenthesis() IExpressionsInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsInParenthesisContext)
}

func (s *PrecedenceSimilarExpressionAtomContext) KW_ALL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALL, 0)
}

func (s *PrecedenceSimilarExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceSimilarExpressionAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceSimilarExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceSimilarExpressionAtom(s)
	}
}

func (s *PrecedenceSimilarExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceSimilarExpressionAtom(s)
	}
}

func (p *HiveParser) PrecedenceSimilarExpressionAtom() (localctx IPrecedenceSimilarExpressionAtomContext) {
	localctx = NewPrecedenceSimilarExpressionAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, HiveParserRULE_precedenceSimilarExpressionAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4056)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 476, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4043)
			p.Match(HiveParserKW_IN)
		}
		{
			p.SetState(4044)
			p.PrecedenceSimilarExpressionIn()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4045)
			p.Match(HiveParserKW_BETWEEN)
		}
		{
			p.SetState(4046)
			p.expression(0)
		}
		{
			p.SetState(4047)
			p.Match(HiveParserKW_AND)
		}
		{
			p.SetState(4048)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4050)
			p.Match(HiveParserKW_LIKE)
		}
		{
			p.SetState(4051)
			p.Match(HiveParserKW_ANY)
		}
		{
			p.SetState(4052)
			p.ExpressionsInParenthesis()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4053)
			p.Match(HiveParserKW_LIKE)
		}
		{
			p.SetState(4054)
			p.Match(HiveParserKW_ALL)
		}
		{
			p.SetState(4055)
			p.ExpressionsInParenthesis()
		}

	}

	return localctx
}

// IPrecedenceSimilarExpressionInContext is an interface to support dynamic dispatch.
type IPrecedenceSimilarExpressionInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceSimilarExpressionInContext differentiates from other interfaces.
	IsPrecedenceSimilarExpressionInContext()
}

type PrecedenceSimilarExpressionInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceSimilarExpressionInContext() *PrecedenceSimilarExpressionInContext {
	var p = new(PrecedenceSimilarExpressionInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionIn
	return p
}

func (*PrecedenceSimilarExpressionInContext) IsPrecedenceSimilarExpressionInContext() {}

func NewPrecedenceSimilarExpressionInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceSimilarExpressionInContext {
	var p = new(PrecedenceSimilarExpressionInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionIn

	return p
}

func (s *PrecedenceSimilarExpressionInContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceSimilarExpressionInContext) SubQueryExpression() ISubQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubQueryExpressionContext)
}

func (s *PrecedenceSimilarExpressionInContext) ExpressionsInParenthesis() IExpressionsInParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsInParenthesisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsInParenthesisContext)
}

func (s *PrecedenceSimilarExpressionInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceSimilarExpressionInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceSimilarExpressionInContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceSimilarExpressionIn(s)
	}
}

func (s *PrecedenceSimilarExpressionInContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceSimilarExpressionIn(s)
	}
}

func (p *HiveParser) PrecedenceSimilarExpressionIn() (localctx IPrecedenceSimilarExpressionInContext) {
	localctx = NewPrecedenceSimilarExpressionInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, HiveParserRULE_precedenceSimilarExpressionIn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4060)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4058)
			p.SubQueryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4059)
			p.ExpressionsInParenthesis()
		}

	}

	return localctx
}

// IPrecedenceSimilarExpressionPartNotContext is an interface to support dynamic dispatch.
type IPrecedenceSimilarExpressionPartNotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecedenceSimilarExpressionPartNotContext differentiates from other interfaces.
	IsPrecedenceSimilarExpressionPartNotContext()
}

type PrecedenceSimilarExpressionPartNotContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecedenceSimilarExpressionPartNotContext() *PrecedenceSimilarExpressionPartNotContext {
	var p = new(PrecedenceSimilarExpressionPartNotContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionPartNot
	return p
}

func (*PrecedenceSimilarExpressionPartNotContext) IsPrecedenceSimilarExpressionPartNotContext() {}

func NewPrecedenceSimilarExpressionPartNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecedenceSimilarExpressionPartNotContext {
	var p = new(PrecedenceSimilarExpressionPartNotContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_precedenceSimilarExpressionPartNot

	return p
}

func (s *PrecedenceSimilarExpressionPartNotContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecedenceSimilarExpressionPartNotContext) PrecedenceRegexpOperator() IPrecedenceRegexpOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceRegexpOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceRegexpOperatorContext)
}

func (s *PrecedenceSimilarExpressionPartNotContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrecedenceSimilarExpressionPartNotContext) PrecedenceSimilarExpressionAtom() IPrecedenceSimilarExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecedenceSimilarExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecedenceSimilarExpressionAtomContext)
}

func (s *PrecedenceSimilarExpressionPartNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecedenceSimilarExpressionPartNotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecedenceSimilarExpressionPartNotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrecedenceSimilarExpressionPartNot(s)
	}
}

func (s *PrecedenceSimilarExpressionPartNotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrecedenceSimilarExpressionPartNot(s)
	}
}

func (p *HiveParser) PrecedenceSimilarExpressionPartNot() (localctx IPrecedenceSimilarExpressionPartNotContext) {
	localctx = NewPrecedenceSimilarExpressionPartNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, HiveParserRULE_precedenceSimilarExpressionPartNot)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4066)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4062)
			p.PrecedenceRegexpOperator()
		}
		{
			p.SetState(4063)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4065)
			p.PrecedenceSimilarExpressionAtom()
		}

	}

	return localctx
}

// IBooleanValueContext is an interface to support dynamic dispatch.
type IBooleanValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanValueContext differentiates from other interfaces.
	IsBooleanValueContext()
}

type BooleanValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanValueContext() *BooleanValueContext {
	var p = new(BooleanValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_booleanValue
	return p
}

func (*BooleanValueContext) IsBooleanValueContext() {}

func NewBooleanValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanValueContext {
	var p = new(BooleanValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_booleanValue

	return p
}

func (s *BooleanValueContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanValueContext) KW_TRUE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRUE, 0)
}

func (s *BooleanValueContext) KW_FALSE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FALSE, 0)
}

func (s *BooleanValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterBooleanValue(s)
	}
}

func (s *BooleanValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitBooleanValue(s)
	}
}

func (p *HiveParser) BooleanValue() (localctx IBooleanValueContext) {
	localctx = NewBooleanValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, HiveParserRULE_booleanValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4068)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_TRUE || _la == HiveParserKW_FALSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBooleanValueTokContext is an interface to support dynamic dispatch.
type IBooleanValueTokContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanValueTokContext differentiates from other interfaces.
	IsBooleanValueTokContext()
}

type BooleanValueTokContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanValueTokContext() *BooleanValueTokContext {
	var p = new(BooleanValueTokContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_booleanValueTok
	return p
}

func (*BooleanValueTokContext) IsBooleanValueTokContext() {}

func NewBooleanValueTokContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanValueTokContext {
	var p = new(BooleanValueTokContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_booleanValueTok

	return p
}

func (s *BooleanValueTokContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanValueTokContext) KW_TRUE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRUE, 0)
}

func (s *BooleanValueTokContext) KW_FALSE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FALSE, 0)
}

func (s *BooleanValueTokContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanValueTokContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanValueTokContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterBooleanValueTok(s)
	}
}

func (s *BooleanValueTokContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitBooleanValueTok(s)
	}
}

func (p *HiveParser) BooleanValueTok() (localctx IBooleanValueTokContext) {
	localctx = NewBooleanValueTokContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, HiveParserRULE_booleanValueTok)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4070)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_TRUE || _la == HiveParserKW_FALSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITableOrPartitionContext is an interface to support dynamic dispatch.
type ITableOrPartitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableOrPartitionContext differentiates from other interfaces.
	IsTableOrPartitionContext()
}

type TableOrPartitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableOrPartitionContext() *TableOrPartitionContext {
	var p = new(TableOrPartitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_tableOrPartition
	return p
}

func (*TableOrPartitionContext) IsTableOrPartitionContext() {}

func NewTableOrPartitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableOrPartitionContext {
	var p = new(TableOrPartitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_tableOrPartition

	return p
}

func (s *TableOrPartitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TableOrPartitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableOrPartitionContext) PartitionSpec() IPartitionSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionSpecContext)
}

func (s *TableOrPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOrPartitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableOrPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTableOrPartition(s)
	}
}

func (s *TableOrPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTableOrPartition(s)
	}
}

func (p *HiveParser) TableOrPartition() (localctx ITableOrPartitionContext) {
	localctx = NewTableOrPartitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, HiveParserRULE_tableOrPartition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4072)
		p.TableName()
	}
	p.SetState(4074)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_PARTITION {
		{
			p.SetState(4073)
			p.PartitionSpec()
		}

	}

	return localctx
}

// IPartitionSpecContext is an interface to support dynamic dispatch.
type IPartitionSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionSpecContext differentiates from other interfaces.
	IsPartitionSpecContext()
}

type PartitionSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionSpecContext() *PartitionSpecContext {
	var p = new(PartitionSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitionSpec
	return p
}

func (*PartitionSpecContext) IsPartitionSpecContext() {}

func NewPartitionSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionSpecContext {
	var p = new(PartitionSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitionSpec

	return p
}

func (s *PartitionSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionSpecContext) KW_PARTITION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITION, 0)
}

func (s *PartitionSpecContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *PartitionSpecContext) AllPartitionVal() []IPartitionValContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionValContext)(nil)).Elem())
	var tst = make([]IPartitionValContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionValContext)
		}
	}

	return tst
}

func (s *PartitionSpecContext) PartitionVal(i int) IPartitionValContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionValContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionValContext)
}

func (s *PartitionSpecContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *PartitionSpecContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *PartitionSpecContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *PartitionSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitionSpec(s)
	}
}

func (s *PartitionSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitionSpec(s)
	}
}

func (p *HiveParser) PartitionSpec() (localctx IPartitionSpecContext) {
	localctx = NewPartitionSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, HiveParserRULE_partitionSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4076)
		p.Match(HiveParserKW_PARTITION)
	}
	{
		p.SetState(4077)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(4078)
		p.PartitionVal()
	}
	p.SetState(4083)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(4079)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(4080)
			p.PartitionVal()
		}

		p.SetState(4085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4086)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IPartitionValContext is an interface to support dynamic dispatch.
type IPartitionValContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionValContext differentiates from other interfaces.
	IsPartitionValContext()
}

type PartitionValContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionValContext() *PartitionValContext {
	var p = new(PartitionValContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_partitionVal
	return p
}

func (*PartitionValContext) IsPartitionValContext() {}

func NewPartitionValContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionValContext {
	var p = new(PartitionValContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_partitionVal

	return p
}

func (s *PartitionValContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionValContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PartitionValContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *PartitionValContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PartitionValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionValContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPartitionVal(s)
	}
}

func (s *PartitionValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPartitionVal(s)
	}
}

func (p *HiveParser) PartitionVal() (localctx IPartitionValContext) {
	localctx = NewPartitionValContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, HiveParserRULE_partitionVal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4088)
		p.Identifier()
	}
	p.SetState(4091)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserEQUAL {
		{
			p.SetState(4089)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4090)
			p.Constant()
		}

	}

	return localctx
}

// IDropPartitionSpecContext is an interface to support dynamic dispatch.
type IDropPartitionSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropPartitionSpecContext differentiates from other interfaces.
	IsDropPartitionSpecContext()
}

type DropPartitionSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropPartitionSpecContext() *DropPartitionSpecContext {
	var p = new(DropPartitionSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropPartitionSpec
	return p
}

func (*DropPartitionSpecContext) IsDropPartitionSpecContext() {}

func NewDropPartitionSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropPartitionSpecContext {
	var p = new(DropPartitionSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropPartitionSpec

	return p
}

func (s *DropPartitionSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *DropPartitionSpecContext) KW_PARTITION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITION, 0)
}

func (s *DropPartitionSpecContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserLPAREN, 0)
}

func (s *DropPartitionSpecContext) AllDropPartitionVal() []IDropPartitionValContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDropPartitionValContext)(nil)).Elem())
	var tst = make([]IDropPartitionValContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDropPartitionValContext)
		}
	}

	return tst
}

func (s *DropPartitionSpecContext) DropPartitionVal(i int) IDropPartitionValContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropPartitionValContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDropPartitionValContext)
}

func (s *DropPartitionSpecContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(HiveParserRPAREN, 0)
}

func (s *DropPartitionSpecContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *DropPartitionSpecContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *DropPartitionSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropPartitionSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropPartitionSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropPartitionSpec(s)
	}
}

func (s *DropPartitionSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropPartitionSpec(s)
	}
}

func (p *HiveParser) DropPartitionSpec() (localctx IDropPartitionSpecContext) {
	localctx = NewDropPartitionSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, HiveParserRULE_dropPartitionSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4093)
		p.Match(HiveParserKW_PARTITION)
	}
	{
		p.SetState(4094)
		p.Match(HiveParserLPAREN)
	}
	{
		p.SetState(4095)
		p.DropPartitionVal()
	}
	p.SetState(4100)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(4096)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(4097)
			p.DropPartitionVal()
		}

		p.SetState(4102)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4103)
		p.Match(HiveParserRPAREN)
	}

	return localctx
}

// IDropPartitionValContext is an interface to support dynamic dispatch.
type IDropPartitionValContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropPartitionValContext differentiates from other interfaces.
	IsDropPartitionValContext()
}

type DropPartitionValContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropPartitionValContext() *DropPartitionValContext {
	var p = new(DropPartitionValContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropPartitionVal
	return p
}

func (*DropPartitionValContext) IsDropPartitionValContext() {}

func NewDropPartitionValContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropPartitionValContext {
	var p = new(DropPartitionValContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropPartitionVal

	return p
}

func (s *DropPartitionValContext) GetParser() antlr.Parser { return s.parser }

func (s *DropPartitionValContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropPartitionValContext) DropPartitionOperator() IDropPartitionOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropPartitionOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropPartitionOperatorContext)
}

func (s *DropPartitionValContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *DropPartitionValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropPartitionValContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropPartitionValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropPartitionVal(s)
	}
}

func (s *DropPartitionValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropPartitionVal(s)
	}
}

func (p *HiveParser) DropPartitionVal() (localctx IDropPartitionValContext) {
	localctx = NewDropPartitionValContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, HiveParserRULE_dropPartitionVal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4105)
		p.Identifier()
	}
	{
		p.SetState(4106)
		p.DropPartitionOperator()
	}
	{
		p.SetState(4107)
		p.Constant()
	}

	return localctx
}

// IDropPartitionOperatorContext is an interface to support dynamic dispatch.
type IDropPartitionOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropPartitionOperatorContext differentiates from other interfaces.
	IsDropPartitionOperatorContext()
}

type DropPartitionOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropPartitionOperatorContext() *DropPartitionOperatorContext {
	var p = new(DropPartitionOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropPartitionOperator
	return p
}

func (*DropPartitionOperatorContext) IsDropPartitionOperatorContext() {}

func NewDropPartitionOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropPartitionOperatorContext {
	var p = new(DropPartitionOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropPartitionOperator

	return p
}

func (s *DropPartitionOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *DropPartitionOperatorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *DropPartitionOperatorContext) NOTEQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserNOTEQUAL, 0)
}

func (s *DropPartitionOperatorContext) LESSTHANOREQUALTO() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHANOREQUALTO, 0)
}

func (s *DropPartitionOperatorContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *DropPartitionOperatorContext) GREATERTHANOREQUALTO() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHANOREQUALTO, 0)
}

func (s *DropPartitionOperatorContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *DropPartitionOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropPartitionOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropPartitionOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropPartitionOperator(s)
	}
}

func (s *DropPartitionOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropPartitionOperator(s)
	}
}

func (p *HiveParser) DropPartitionOperator() (localctx IDropPartitionOperatorContext) {
	localctx = NewDropPartitionOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, HiveParserRULE_dropPartitionOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4109)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-342)&-(0x1f+1)) == 0 && ((1<<uint((_la-342)))&((1<<(HiveParserEQUAL-342))|(1<<(HiveParserNOTEQUAL-342))|(1<<(HiveParserLESSTHANOREQUALTO-342))|(1<<(HiveParserLESSTHAN-342))|(1<<(HiveParserGREATERTHANOREQUALTO-342))|(1<<(HiveParserGREATERTHAN-342)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISysFuncNamesContext is an interface to support dynamic dispatch.
type ISysFuncNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSysFuncNamesContext differentiates from other interfaces.
	IsSysFuncNamesContext()
}

type SysFuncNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySysFuncNamesContext() *SysFuncNamesContext {
	var p = new(SysFuncNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_sysFuncNames
	return p
}

func (*SysFuncNamesContext) IsSysFuncNamesContext() {}

func NewSysFuncNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SysFuncNamesContext {
	var p = new(SysFuncNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_sysFuncNames

	return p
}

func (s *SysFuncNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *SysFuncNamesContext) KW_AND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, 0)
}

func (s *SysFuncNamesContext) KW_OR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OR, 0)
}

func (s *SysFuncNamesContext) KW_NOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOT, 0)
}

func (s *SysFuncNamesContext) KW_LIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIKE, 0)
}

func (s *SysFuncNamesContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IF, 0)
}

func (s *SysFuncNamesContext) KW_CASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CASE, 0)
}

func (s *SysFuncNamesContext) KW_WHEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, 0)
}

func (s *SysFuncNamesContext) KW_FLOOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FLOOR, 0)
}

func (s *SysFuncNamesContext) KW_TINYINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TINYINT, 0)
}

func (s *SysFuncNamesContext) KW_SMALLINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SMALLINT, 0)
}

func (s *SysFuncNamesContext) KW_INT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INT, 0)
}

func (s *SysFuncNamesContext) KW_BIGINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BIGINT, 0)
}

func (s *SysFuncNamesContext) KW_FLOAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FLOAT, 0)
}

func (s *SysFuncNamesContext) KW_DOUBLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DOUBLE, 0)
}

func (s *SysFuncNamesContext) KW_BOOLEAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BOOLEAN, 0)
}

func (s *SysFuncNamesContext) KW_STRING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STRING, 0)
}

func (s *SysFuncNamesContext) KW_BINARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BINARY, 0)
}

func (s *SysFuncNamesContext) KW_ARRAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ARRAY, 0)
}

func (s *SysFuncNamesContext) KW_MAP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAP, 0)
}

func (s *SysFuncNamesContext) KW_STRUCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STRUCT, 0)
}

func (s *SysFuncNamesContext) KW_UNIONTYPE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNIONTYPE, 0)
}

func (s *SysFuncNamesContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *SysFuncNamesContext) EQUAL_NS() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL_NS, 0)
}

func (s *SysFuncNamesContext) NOTEQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserNOTEQUAL, 0)
}

func (s *SysFuncNamesContext) LESSTHANOREQUALTO() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHANOREQUALTO, 0)
}

func (s *SysFuncNamesContext) LESSTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserLESSTHAN, 0)
}

func (s *SysFuncNamesContext) GREATERTHANOREQUALTO() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHANOREQUALTO, 0)
}

func (s *SysFuncNamesContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *SysFuncNamesContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(HiveParserDIVIDE, 0)
}

func (s *SysFuncNamesContext) PLUS() antlr.TerminalNode {
	return s.GetToken(HiveParserPLUS, 0)
}

func (s *SysFuncNamesContext) MINUS() antlr.TerminalNode {
	return s.GetToken(HiveParserMINUS, 0)
}

func (s *SysFuncNamesContext) STAR() antlr.TerminalNode {
	return s.GetToken(HiveParserSTAR, 0)
}

func (s *SysFuncNamesContext) MOD() antlr.TerminalNode {
	return s.GetToken(HiveParserMOD, 0)
}

func (s *SysFuncNamesContext) DIV() antlr.TerminalNode {
	return s.GetToken(HiveParserDIV, 0)
}

func (s *SysFuncNamesContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(HiveParserAMPERSAND, 0)
}

func (s *SysFuncNamesContext) TILDE() antlr.TerminalNode {
	return s.GetToken(HiveParserTILDE, 0)
}

func (s *SysFuncNamesContext) BITWISEOR() antlr.TerminalNode {
	return s.GetToken(HiveParserBITWISEOR, 0)
}

func (s *SysFuncNamesContext) BITWISEXOR() antlr.TerminalNode {
	return s.GetToken(HiveParserBITWISEXOR, 0)
}

func (s *SysFuncNamesContext) KW_RLIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RLIKE, 0)
}

func (s *SysFuncNamesContext) KW_REGEXP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REGEXP, 0)
}

func (s *SysFuncNamesContext) KW_IN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IN, 0)
}

func (s *SysFuncNamesContext) KW_BETWEEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BETWEEN, 0)
}

func (s *SysFuncNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SysFuncNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SysFuncNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSysFuncNames(s)
	}
}

func (s *SysFuncNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSysFuncNames(s)
	}
}

func (p *HiveParser) SysFuncNames() (localctx ISysFuncNamesContext) {
	localctx = NewSysFuncNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, HiveParserRULE_sysFuncNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4111)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_AND)|(1<<HiveParserKW_OR)|(1<<HiveParserKW_NOT)|(1<<HiveParserKW_LIKE)|(1<<HiveParserKW_IF))) != 0) || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(HiveParserKW_BOOLEAN-77))|(1<<(HiveParserKW_TINYINT-77))|(1<<(HiveParserKW_SMALLINT-77))|(1<<(HiveParserKW_INT-77))|(1<<(HiveParserKW_BIGINT-77))|(1<<(HiveParserKW_FLOAT-77))|(1<<(HiveParserKW_DOUBLE-77))|(1<<(HiveParserKW_STRING-77))|(1<<(HiveParserKW_ARRAY-77))|(1<<(HiveParserKW_STRUCT-77))|(1<<(HiveParserKW_MAP-77))|(1<<(HiveParserKW_UNIONTYPE-77)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(HiveParserKW_RLIKE-136))|(1<<(HiveParserKW_REGEXP-136))|(1<<(HiveParserKW_CASE-136))|(1<<(HiveParserKW_WHEN-136)))) != 0) || (((_la-180)&-(0x1f+1)) == 0 && ((1<<uint((_la-180)))&((1<<(HiveParserKW_IN-180))|(1<<(HiveParserKW_BETWEEN-180))|(1<<(HiveParserKW_BINARY-180)))) != 0) || _la == HiveParserKW_FLOOR || (((_la-342)&-(0x1f+1)) == 0 && ((1<<uint((_la-342)))&((1<<(HiveParserEQUAL-342))|(1<<(HiveParserEQUAL_NS-342))|(1<<(HiveParserNOTEQUAL-342))|(1<<(HiveParserLESSTHANOREQUALTO-342))|(1<<(HiveParserLESSTHAN-342))|(1<<(HiveParserGREATERTHANOREQUALTO-342))|(1<<(HiveParserGREATERTHAN-342))|(1<<(HiveParserDIVIDE-342))|(1<<(HiveParserPLUS-342))|(1<<(HiveParserMINUS-342))|(1<<(HiveParserSTAR-342))|(1<<(HiveParserMOD-342))|(1<<(HiveParserDIV-342))|(1<<(HiveParserAMPERSAND-342))|(1<<(HiveParserTILDE-342))|(1<<(HiveParserBITWISEOR-342))|(1<<(HiveParserBITWISEXOR-342)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDescFuncNamesContext is an interface to support dynamic dispatch.
type IDescFuncNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescFuncNamesContext differentiates from other interfaces.
	IsDescFuncNamesContext()
}

type DescFuncNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescFuncNamesContext() *DescFuncNamesContext {
	var p = new(DescFuncNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_descFuncNames
	return p
}

func (*DescFuncNamesContext) IsDescFuncNamesContext() {}

func NewDescFuncNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescFuncNamesContext {
	var p = new(DescFuncNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_descFuncNames

	return p
}

func (s *DescFuncNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *DescFuncNamesContext) SysFuncNames() ISysFuncNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISysFuncNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISysFuncNamesContext)
}

func (s *DescFuncNamesContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *DescFuncNamesContext) FunctionIdentifier() IFunctionIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionIdentifierContext)
}

func (s *DescFuncNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescFuncNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescFuncNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDescFuncNames(s)
	}
}

func (s *DescFuncNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDescFuncNames(s)
	}
}

func (p *HiveParser) DescFuncNames() (localctx IDescFuncNamesContext) {
	localctx = NewDescFuncNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, HiveParserRULE_descFuncNames)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4116)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4113)
			p.SysFuncNames()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4114)
			p.Match(HiveParserStringLiteral)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4115)
			p.FunctionIdentifier()
		}

	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(HiveParserIdentifier, 0)
}

func (s *IdentifierContext) NonReserved() INonReservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonReservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonReservedContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *HiveParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, HiveParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4120)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4118)
			p.Match(HiveParserIdentifier)
		}

	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4119)
			p.NonReserved()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionIdentifierContext is an interface to support dynamic dispatch.
type IFunctionIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionIdentifierContext differentiates from other interfaces.
	IsFunctionIdentifierContext()
}

type FunctionIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionIdentifierContext() *FunctionIdentifierContext {
	var p = new(FunctionIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_functionIdentifier
	return p
}

func (*FunctionIdentifierContext) IsFunctionIdentifierContext() {}

func NewFunctionIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionIdentifierContext {
	var p = new(FunctionIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_functionIdentifier

	return p
}

func (s *FunctionIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionIdentifierContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *FunctionIdentifierContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *FunctionIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterFunctionIdentifier(s)
	}
}

func (s *FunctionIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitFunctionIdentifier(s)
	}
}

func (p *HiveParser) FunctionIdentifier() (localctx IFunctionIdentifierContext) {
	localctx = NewFunctionIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, HiveParserRULE_functionIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4127)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4122)
			p.Identifier()
		}
		{
			p.SetState(4123)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(4124)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4126)
			p.Identifier()
		}

	}

	return localctx
}

// IPrincipalIdentifierContext is an interface to support dynamic dispatch.
type IPrincipalIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrincipalIdentifierContext differentiates from other interfaces.
	IsPrincipalIdentifierContext()
}

type PrincipalIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrincipalIdentifierContext() *PrincipalIdentifierContext {
	var p = new(PrincipalIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_principalIdentifier
	return p
}

func (*PrincipalIdentifierContext) IsPrincipalIdentifierContext() {}

func NewPrincipalIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrincipalIdentifierContext {
	var p = new(PrincipalIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_principalIdentifier

	return p
}

func (s *PrincipalIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PrincipalIdentifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrincipalIdentifierContext) QuotedIdentifier() antlr.TerminalNode {
	return s.GetToken(HiveParserQuotedIdentifier, 0)
}

func (s *PrincipalIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrincipalIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrincipalIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPrincipalIdentifier(s)
	}
}

func (s *PrincipalIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPrincipalIdentifier(s)
	}
}

func (p *HiveParser) PrincipalIdentifier() (localctx IPrincipalIdentifierContext) {
	localctx = NewPrincipalIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, HiveParserRULE_principalIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4131)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ASC, HiveParserKW_DESC, HiveParserKW_NULLS, HiveParserKW_LAST, HiveParserKW_OVERWRITE, HiveParserKW_PARTITIONS, HiveParserKW_TABLES, HiveParserKW_COLUMNS, HiveParserKW_INDEX, HiveParserKW_INDEXES, HiveParserKW_REBUILD, HiveParserKW_FUNCTIONS, HiveParserKW_SHOW, HiveParserKW_MSCK, HiveParserKW_REPAIR, HiveParserKW_DIRECTORY, HiveParserKW_CLUSTER, HiveParserKW_DISTRIBUTE, HiveParserKW_SORT, HiveParserKW_LOAD, HiveParserKW_EXPORT, HiveParserKW_REPLICATION, HiveParserKW_METADATA, HiveParserKW_DATA, HiveParserKW_INPATH, HiveParserKW_CHANGE, HiveParserKW_FIRST, HiveParserKW_AFTER, HiveParserKW_RENAME, HiveParserKW_COMMENT, HiveParserKW_TINYINT, HiveParserKW_DATETIME, HiveParserKW_ZONE, HiveParserKW_STRING, HiveParserKW_STRUCT, HiveParserKW_UNIONTYPE, HiveParserKW_PARTITIONED, HiveParserKW_CLUSTERED, HiveParserKW_SORTED, HiveParserKW_BUCKETS, HiveParserKW_FORMAT, HiveParserKW_DELIMITED, HiveParserKW_FIELDS, HiveParserKW_TERMINATED, HiveParserKW_ESCAPED, HiveParserKW_COLLECTION, HiveParserKW_ITEMS, HiveParserKW_KEYS, HiveParserKW_KEY_TYPE, HiveParserKW_KILL, HiveParserKW_LINES, HiveParserKW_STORED, HiveParserKW_FILEFORMAT, HiveParserKW_INPUTFORMAT, HiveParserKW_OUTPUTFORMAT, HiveParserKW_INPUTDRIVER, HiveParserKW_OUTPUTDRIVER, HiveParserKW_ENABLE, HiveParserKW_DISABLE, HiveParserKW_LOCATION, HiveParserKW_BUCKET, HiveParserKW_ADD, HiveParserKW_REPLACE, HiveParserKW_TEMPORARY, HiveParserKW_FILE, HiveParserKW_JAR, HiveParserKW_EXPLAIN, HiveParserKW_FORMATTED, HiveParserKW_DEPENDENCY, HiveParserKW_LOGICAL, HiveParserKW_SERDE, HiveParserKW_DEFERRED, HiveParserKW_SERDEPROPERTIES, HiveParserKW_DBPROPERTIES, HiveParserKW_LIMIT, HiveParserKW_OFFSET, HiveParserKW_UNSET, HiveParserKW_TBLPROPERTIES, HiveParserKW_IDXPROPERTIES, HiveParserKW_VALUE_TYPE, HiveParserKW_ELEM_TYPE, HiveParserKW_DEFINED, HiveParserKW_MAPJOIN, HiveParserKW_STREAMTABLE, HiveParserKW_CLUSTERSTATUS, HiveParserKW_UTC, HiveParserKW_UTCTIMESTAMP, HiveParserKW_LONG, HiveParserKW_PLUS, HiveParserKW_VIEW, HiveParserKW_VIEWS, HiveParserKW_DATABASES, HiveParserKW_MATERIALIZED, HiveParserKW_SCHEMA, HiveParserKW_SCHEMAS, HiveParserKW_SSL, HiveParserKW_UNDO, HiveParserKW_LOCK, HiveParserKW_LOCKS, HiveParserKW_UNLOCK, HiveParserKW_SHARED, HiveParserKW_EXCLUSIVE, HiveParserKW_UNSIGNED, HiveParserKW_WHILE, HiveParserKW_READ, HiveParserKW_PURGE, HiveParserKW_ANALYZE, HiveParserKW_BEFORE, HiveParserKW_CONTINUE, HiveParserKW_RECORDREADER, HiveParserKW_RECORDWRITER, HiveParserKW_SEMI, HiveParserKW_TOUCH, HiveParserKW_ARCHIVE, HiveParserKW_UNARCHIVE, HiveParserKW_COMPUTE, HiveParserKW_STATISTICS, HiveParserKW_USE, HiveParserKW_OPTION, HiveParserKW_CONCATENATE, HiveParserKW_SHOW_DATABASE, HiveParserKW_RESTRICT, HiveParserKW_CASCADE, HiveParserKW_SKEWED, HiveParserKW_DIRECTORIES, HiveParserKW_SETS, HiveParserKW_NOSCAN, HiveParserKW_ROLE, HiveParserKW_ROLES, HiveParserKW_URI, HiveParserKW_SERVER, HiveParserKW_ADMIN, HiveParserKW_OWNER, HiveParserKW_PRINCIPALS, HiveParserKW_COMPACT, HiveParserKW_COMPACTIONS, HiveParserKW_TRANSACTIONS, HiveParserKW_REWRITE, HiveParserKW_REOPTIMIZATION, HiveParserKW_RELOAD, HiveParserKW_YEAR, HiveParserKW_QUERY, HiveParserKW_QUARTER, HiveParserKW_MONTH, HiveParserKW_WEEK, HiveParserKW_DAY, HiveParserKW_DOW, HiveParserKW_HOUR, HiveParserKW_MINUTE, HiveParserKW_SECOND, HiveParserKW_TRANSACTION, HiveParserKW_WORK, HiveParserKW_WRITE, HiveParserKW_ISOLATION, HiveParserKW_LEVEL, HiveParserKW_SNAPSHOT, HiveParserKW_AUTOCOMMIT, HiveParserKW_CACHE, HiveParserKW_ENFORCED, HiveParserKW_VALIDATE, HiveParserKW_NOVALIDATE, HiveParserKW_RELY, HiveParserKW_NORELY, HiveParserKW_KEY, HiveParserKW_ABORT, HiveParserKW_MATCHED, HiveParserKW_REPL, HiveParserKW_DUMP, HiveParserKW_STATUS, HiveParserKW_VECTORIZATION, HiveParserKW_SUMMARY, HiveParserKW_OPERATOR, HiveParserKW_EXPRESSION, HiveParserKW_DETAIL, HiveParserKW_WAIT, HiveParserKW_RESOURCE, HiveParserKW_PLAN, HiveParserKW_QUERY_PARALLELISM, HiveParserKW_PLANS, HiveParserKW_ACTIVATE, HiveParserKW_DEFAULT, HiveParserKW_CHECK, HiveParserKW_POOL, HiveParserKW_MOVE, HiveParserKW_DO, HiveParserKW_ALLOC_FRACTION, HiveParserKW_SCHEDULING_POLICY, HiveParserKW_PATH, HiveParserKW_MAPPING, HiveParserKW_WORKLOAD, HiveParserKW_MANAGEMENT, HiveParserKW_ACTIVE, HiveParserKW_UNMANAGED, HiveParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4129)
			p.Identifier()
		}

	case HiveParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4130)
			p.Match(HiveParserQuotedIdentifier)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonReservedContext is an interface to support dynamic dispatch.
type INonReservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonReservedContext differentiates from other interfaces.
	IsNonReservedContext()
}

type NonReservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonReservedContext() *NonReservedContext {
	var p = new(NonReservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_nonReserved
	return p
}

func (*NonReservedContext) IsNonReservedContext() {}

func NewNonReservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonReservedContext {
	var p = new(NonReservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_nonReserved

	return p
}

func (s *NonReservedContext) GetParser() antlr.Parser { return s.parser }

func (s *NonReservedContext) KW_ABORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ABORT, 0)
}

func (s *NonReservedContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *NonReservedContext) KW_ADMIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADMIN, 0)
}

func (s *NonReservedContext) KW_AFTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AFTER, 0)
}

func (s *NonReservedContext) KW_ANALYZE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ANALYZE, 0)
}

func (s *NonReservedContext) KW_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ARCHIVE, 0)
}

func (s *NonReservedContext) KW_ASC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ASC, 0)
}

func (s *NonReservedContext) KW_BEFORE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BEFORE, 0)
}

func (s *NonReservedContext) KW_BUCKET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BUCKET, 0)
}

func (s *NonReservedContext) KW_BUCKETS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BUCKETS, 0)
}

func (s *NonReservedContext) KW_CASCADE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CASCADE, 0)
}

func (s *NonReservedContext) KW_CHANGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CHANGE, 0)
}

func (s *NonReservedContext) KW_CHECK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CHECK, 0)
}

func (s *NonReservedContext) KW_CLUSTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CLUSTER, 0)
}

func (s *NonReservedContext) KW_CLUSTERED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CLUSTERED, 0)
}

func (s *NonReservedContext) KW_CLUSTERSTATUS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CLUSTERSTATUS, 0)
}

func (s *NonReservedContext) KW_COLLECTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLLECTION, 0)
}

func (s *NonReservedContext) KW_COLUMNS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COLUMNS, 0)
}

func (s *NonReservedContext) KW_COMMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMMENT, 0)
}

func (s *NonReservedContext) KW_COMPACT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMPACT, 0)
}

func (s *NonReservedContext) KW_COMPACTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMPACTIONS, 0)
}

func (s *NonReservedContext) KW_COMPUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_COMPUTE, 0)
}

func (s *NonReservedContext) KW_CONCATENATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONCATENATE, 0)
}

func (s *NonReservedContext) KW_CONTINUE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CONTINUE, 0)
}

func (s *NonReservedContext) KW_DATA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATA, 0)
}

func (s *NonReservedContext) KW_DAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DAY, 0)
}

func (s *NonReservedContext) KW_DATABASES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATABASES, 0)
}

func (s *NonReservedContext) KW_DATETIME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATETIME, 0)
}

func (s *NonReservedContext) KW_DBPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DBPROPERTIES, 0)
}

func (s *NonReservedContext) KW_DEFERRED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFERRED, 0)
}

func (s *NonReservedContext) KW_DEFINED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFINED, 0)
}

func (s *NonReservedContext) KW_DELIMITED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DELIMITED, 0)
}

func (s *NonReservedContext) KW_DEPENDENCY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEPENDENCY, 0)
}

func (s *NonReservedContext) KW_DESC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DESC, 0)
}

func (s *NonReservedContext) KW_DIRECTORIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DIRECTORIES, 0)
}

func (s *NonReservedContext) KW_DIRECTORY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DIRECTORY, 0)
}

func (s *NonReservedContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISABLE, 0)
}

func (s *NonReservedContext) KW_DISTRIBUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISTRIBUTE, 0)
}

func (s *NonReservedContext) KW_DOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DOW, 0)
}

func (s *NonReservedContext) KW_ELEM_TYPE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ELEM_TYPE, 0)
}

func (s *NonReservedContext) KW_ENABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ENABLE, 0)
}

func (s *NonReservedContext) KW_ENFORCED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ENFORCED, 0)
}

func (s *NonReservedContext) KW_ESCAPED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ESCAPED, 0)
}

func (s *NonReservedContext) KW_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXCLUSIVE, 0)
}

func (s *NonReservedContext) KW_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXPLAIN, 0)
}

func (s *NonReservedContext) KW_EXPORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXPORT, 0)
}

func (s *NonReservedContext) KW_FIELDS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FIELDS, 0)
}

func (s *NonReservedContext) KW_FILE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FILE, 0)
}

func (s *NonReservedContext) KW_FILEFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FILEFORMAT, 0)
}

func (s *NonReservedContext) KW_FIRST() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FIRST, 0)
}

func (s *NonReservedContext) KW_FORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FORMAT, 0)
}

func (s *NonReservedContext) KW_FORMATTED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FORMATTED, 0)
}

func (s *NonReservedContext) KW_FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FUNCTIONS, 0)
}

func (s *NonReservedContext) KW_HOUR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_HOUR, 0)
}

func (s *NonReservedContext) KW_IDXPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IDXPROPERTIES, 0)
}

func (s *NonReservedContext) KW_INDEX() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INDEX, 0)
}

func (s *NonReservedContext) KW_INDEXES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INDEXES, 0)
}

func (s *NonReservedContext) KW_INPATH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPATH, 0)
}

func (s *NonReservedContext) KW_INPUTDRIVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTDRIVER, 0)
}

func (s *NonReservedContext) KW_INPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INPUTFORMAT, 0)
}

func (s *NonReservedContext) KW_ITEMS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ITEMS, 0)
}

func (s *NonReservedContext) KW_JAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_JAR, 0)
}

func (s *NonReservedContext) KW_KILL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KILL, 0)
}

func (s *NonReservedContext) KW_KEYS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEYS, 0)
}

func (s *NonReservedContext) KW_KEY_TYPE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY_TYPE, 0)
}

func (s *NonReservedContext) KW_LAST() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LAST, 0)
}

func (s *NonReservedContext) KW_LIMIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIMIT, 0)
}

func (s *NonReservedContext) KW_OFFSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OFFSET, 0)
}

func (s *NonReservedContext) KW_LINES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LINES, 0)
}

func (s *NonReservedContext) KW_LOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOAD, 0)
}

func (s *NonReservedContext) KW_LOCATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCATION, 0)
}

func (s *NonReservedContext) KW_LOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCK, 0)
}

func (s *NonReservedContext) KW_LOCKS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOCKS, 0)
}

func (s *NonReservedContext) KW_LOGICAL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LOGICAL, 0)
}

func (s *NonReservedContext) KW_LONG() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LONG, 0)
}

func (s *NonReservedContext) KW_MAPJOIN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAPJOIN, 0)
}

func (s *NonReservedContext) KW_MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATERIALIZED, 0)
}

func (s *NonReservedContext) KW_METADATA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_METADATA, 0)
}

func (s *NonReservedContext) KW_MINUTE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MINUTE, 0)
}

func (s *NonReservedContext) KW_MONTH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MONTH, 0)
}

func (s *NonReservedContext) KW_MSCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MSCK, 0)
}

func (s *NonReservedContext) KW_NOSCAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOSCAN, 0)
}

func (s *NonReservedContext) KW_NULLS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NULLS, 0)
}

func (s *NonReservedContext) KW_OPTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPTION, 0)
}

func (s *NonReservedContext) KW_OUTPUTDRIVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTPUTDRIVER, 0)
}

func (s *NonReservedContext) KW_OUTPUTFORMAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OUTPUTFORMAT, 0)
}

func (s *NonReservedContext) KW_OVERWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OVERWRITE, 0)
}

func (s *NonReservedContext) KW_OWNER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OWNER, 0)
}

func (s *NonReservedContext) KW_PARTITIONED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITIONED, 0)
}

func (s *NonReservedContext) KW_PARTITIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PARTITIONS, 0)
}

func (s *NonReservedContext) KW_PLUS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLUS, 0)
}

func (s *NonReservedContext) KW_PRINCIPALS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PRINCIPALS, 0)
}

func (s *NonReservedContext) KW_PURGE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PURGE, 0)
}

func (s *NonReservedContext) KW_QUERY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUERY, 0)
}

func (s *NonReservedContext) KW_QUARTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUARTER, 0)
}

func (s *NonReservedContext) KW_READ() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_READ, 0)
}

func (s *NonReservedContext) KW_REBUILD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REBUILD, 0)
}

func (s *NonReservedContext) KW_RECORDREADER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RECORDREADER, 0)
}

func (s *NonReservedContext) KW_RECORDWRITER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RECORDWRITER, 0)
}

func (s *NonReservedContext) KW_RELOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RELOAD, 0)
}

func (s *NonReservedContext) KW_RENAME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RENAME, 0)
}

func (s *NonReservedContext) KW_REPAIR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPAIR, 0)
}

func (s *NonReservedContext) KW_REPLACE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLACE, 0)
}

func (s *NonReservedContext) KW_REPLICATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLICATION, 0)
}

func (s *NonReservedContext) KW_RESTRICT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESTRICT, 0)
}

func (s *NonReservedContext) KW_REWRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REWRITE, 0)
}

func (s *NonReservedContext) KW_ROLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLE, 0)
}

func (s *NonReservedContext) KW_ROLES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ROLES, 0)
}

func (s *NonReservedContext) KW_SCHEMA() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMA, 0)
}

func (s *NonReservedContext) KW_SCHEMAS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEMAS, 0)
}

func (s *NonReservedContext) KW_SECOND() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SECOND, 0)
}

func (s *NonReservedContext) KW_SEMI() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SEMI, 0)
}

func (s *NonReservedContext) KW_SERDE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDE, 0)
}

func (s *NonReservedContext) KW_SERDEPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERDEPROPERTIES, 0)
}

func (s *NonReservedContext) KW_SERVER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SERVER, 0)
}

func (s *NonReservedContext) KW_SETS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SETS, 0)
}

func (s *NonReservedContext) KW_SHARED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHARED, 0)
}

func (s *NonReservedContext) KW_SHOW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW, 0)
}

func (s *NonReservedContext) KW_SHOW_DATABASE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SHOW_DATABASE, 0)
}

func (s *NonReservedContext) KW_SKEWED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SKEWED, 0)
}

func (s *NonReservedContext) KW_SORT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SORT, 0)
}

func (s *NonReservedContext) KW_SORTED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SORTED, 0)
}

func (s *NonReservedContext) KW_SSL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SSL, 0)
}

func (s *NonReservedContext) KW_STATISTICS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATISTICS, 0)
}

func (s *NonReservedContext) KW_STORED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STORED, 0)
}

func (s *NonReservedContext) KW_STREAMTABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STREAMTABLE, 0)
}

func (s *NonReservedContext) KW_STRING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STRING, 0)
}

func (s *NonReservedContext) KW_STRUCT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STRUCT, 0)
}

func (s *NonReservedContext) KW_TABLES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TABLES, 0)
}

func (s *NonReservedContext) KW_TBLPROPERTIES() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TBLPROPERTIES, 0)
}

func (s *NonReservedContext) KW_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TEMPORARY, 0)
}

func (s *NonReservedContext) KW_TERMINATED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TERMINATED, 0)
}

func (s *NonReservedContext) KW_TINYINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TINYINT, 0)
}

func (s *NonReservedContext) KW_TOUCH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TOUCH, 0)
}

func (s *NonReservedContext) KW_TRANSACTIONS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRANSACTIONS, 0)
}

func (s *NonReservedContext) KW_UNARCHIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNARCHIVE, 0)
}

func (s *NonReservedContext) KW_UNDO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNDO, 0)
}

func (s *NonReservedContext) KW_UNIONTYPE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNIONTYPE, 0)
}

func (s *NonReservedContext) KW_UNLOCK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNLOCK, 0)
}

func (s *NonReservedContext) KW_UNSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNSET, 0)
}

func (s *NonReservedContext) KW_UNSIGNED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNSIGNED, 0)
}

func (s *NonReservedContext) KW_URI() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_URI, 0)
}

func (s *NonReservedContext) KW_USE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USE, 0)
}

func (s *NonReservedContext) KW_UTC() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UTC, 0)
}

func (s *NonReservedContext) KW_UTCTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UTCTIMESTAMP, 0)
}

func (s *NonReservedContext) KW_VALUE_TYPE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALUE_TYPE, 0)
}

func (s *NonReservedContext) KW_VIEW() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEW, 0)
}

func (s *NonReservedContext) KW_WEEK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WEEK, 0)
}

func (s *NonReservedContext) KW_WHILE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHILE, 0)
}

func (s *NonReservedContext) KW_YEAR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_YEAR, 0)
}

func (s *NonReservedContext) KW_WORK() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WORK, 0)
}

func (s *NonReservedContext) KW_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRANSACTION, 0)
}

func (s *NonReservedContext) KW_WRITE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WRITE, 0)
}

func (s *NonReservedContext) KW_ISOLATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ISOLATION, 0)
}

func (s *NonReservedContext) KW_LEVEL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LEVEL, 0)
}

func (s *NonReservedContext) KW_SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SNAPSHOT, 0)
}

func (s *NonReservedContext) KW_AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AUTOCOMMIT, 0)
}

func (s *NonReservedContext) KW_RELY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RELY, 0)
}

func (s *NonReservedContext) KW_NORELY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NORELY, 0)
}

func (s *NonReservedContext) KW_VALIDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALIDATE, 0)
}

func (s *NonReservedContext) KW_NOVALIDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_NOVALIDATE, 0)
}

func (s *NonReservedContext) KW_KEY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KEY, 0)
}

func (s *NonReservedContext) KW_MATCHED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MATCHED, 0)
}

func (s *NonReservedContext) KW_REPL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPL, 0)
}

func (s *NonReservedContext) KW_DUMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DUMP, 0)
}

func (s *NonReservedContext) KW_STATUS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_STATUS, 0)
}

func (s *NonReservedContext) KW_CACHE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CACHE, 0)
}

func (s *NonReservedContext) KW_VIEWS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VIEWS, 0)
}

func (s *NonReservedContext) KW_VECTORIZATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VECTORIZATION, 0)
}

func (s *NonReservedContext) KW_SUMMARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SUMMARY, 0)
}

func (s *NonReservedContext) KW_OPERATOR() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OPERATOR, 0)
}

func (s *NonReservedContext) KW_EXPRESSION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_EXPRESSION, 0)
}

func (s *NonReservedContext) KW_DETAIL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DETAIL, 0)
}

func (s *NonReservedContext) KW_WAIT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WAIT, 0)
}

func (s *NonReservedContext) KW_ZONE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ZONE, 0)
}

func (s *NonReservedContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFAULT, 0)
}

func (s *NonReservedContext) KW_REOPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REOPTIMIZATION, 0)
}

func (s *NonReservedContext) KW_RESOURCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESOURCE, 0)
}

func (s *NonReservedContext) KW_PLAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLAN, 0)
}

func (s *NonReservedContext) KW_PLANS() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLANS, 0)
}

func (s *NonReservedContext) KW_QUERY_PARALLELISM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUERY_PARALLELISM, 0)
}

func (s *NonReservedContext) KW_ACTIVATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ACTIVATE, 0)
}

func (s *NonReservedContext) KW_MOVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MOVE, 0)
}

func (s *NonReservedContext) KW_DO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DO, 0)
}

func (s *NonReservedContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *NonReservedContext) KW_ALLOC_FRACTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALLOC_FRACTION, 0)
}

func (s *NonReservedContext) KW_SCHEDULING_POLICY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEDULING_POLICY, 0)
}

func (s *NonReservedContext) KW_PATH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PATH, 0)
}

func (s *NonReservedContext) KW_MAPPING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAPPING, 0)
}

func (s *NonReservedContext) KW_WORKLOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WORKLOAD, 0)
}

func (s *NonReservedContext) KW_MANAGEMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MANAGEMENT, 0)
}

func (s *NonReservedContext) KW_ACTIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ACTIVE, 0)
}

func (s *NonReservedContext) KW_UNMANAGED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNMANAGED, 0)
}

func (s *NonReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonReservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonReservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterNonReserved(s)
	}
}

func (s *NonReservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitNonReserved(s)
	}
}

func (p *HiveParser) NonReserved() (localctx INonReservedContext) {
	localctx = NewNonReservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, HiveParserRULE_nonReserved)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4133)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<HiveParserKW_ASC)|(1<<HiveParserKW_DESC)|(1<<HiveParserKW_NULLS)|(1<<HiveParserKW_LAST)|(1<<HiveParserKW_OVERWRITE))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(HiveParserKW_PARTITIONS-36))|(1<<(HiveParserKW_TABLES-36))|(1<<(HiveParserKW_COLUMNS-36))|(1<<(HiveParserKW_INDEX-36))|(1<<(HiveParserKW_INDEXES-36))|(1<<(HiveParserKW_REBUILD-36))|(1<<(HiveParserKW_FUNCTIONS-36))|(1<<(HiveParserKW_SHOW-36))|(1<<(HiveParserKW_MSCK-36))|(1<<(HiveParserKW_REPAIR-36))|(1<<(HiveParserKW_DIRECTORY-36))|(1<<(HiveParserKW_CLUSTER-36))|(1<<(HiveParserKW_DISTRIBUTE-36))|(1<<(HiveParserKW_SORT-36))|(1<<(HiveParserKW_LOAD-36))|(1<<(HiveParserKW_EXPORT-36))|(1<<(HiveParserKW_REPLICATION-36))|(1<<(HiveParserKW_METADATA-36))|(1<<(HiveParserKW_DATA-36))|(1<<(HiveParserKW_INPATH-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(HiveParserKW_CHANGE-68))|(1<<(HiveParserKW_FIRST-68))|(1<<(HiveParserKW_AFTER-68))|(1<<(HiveParserKW_RENAME-68))|(1<<(HiveParserKW_COMMENT-68))|(1<<(HiveParserKW_TINYINT-68))|(1<<(HiveParserKW_DATETIME-68))|(1<<(HiveParserKW_ZONE-68))|(1<<(HiveParserKW_STRING-68))|(1<<(HiveParserKW_STRUCT-68))|(1<<(HiveParserKW_UNIONTYPE-68)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(HiveParserKW_PARTITIONED-101))|(1<<(HiveParserKW_CLUSTERED-101))|(1<<(HiveParserKW_SORTED-101))|(1<<(HiveParserKW_BUCKETS-101))|(1<<(HiveParserKW_FORMAT-101))|(1<<(HiveParserKW_DELIMITED-101))|(1<<(HiveParserKW_FIELDS-101))|(1<<(HiveParserKW_TERMINATED-101))|(1<<(HiveParserKW_ESCAPED-101))|(1<<(HiveParserKW_COLLECTION-101))|(1<<(HiveParserKW_ITEMS-101))|(1<<(HiveParserKW_KEYS-101))|(1<<(HiveParserKW_KEY_TYPE-101))|(1<<(HiveParserKW_KILL-101))|(1<<(HiveParserKW_LINES-101))|(1<<(HiveParserKW_STORED-101))|(1<<(HiveParserKW_FILEFORMAT-101))|(1<<(HiveParserKW_INPUTFORMAT-101))|(1<<(HiveParserKW_OUTPUTFORMAT-101))|(1<<(HiveParserKW_INPUTDRIVER-101))|(1<<(HiveParserKW_OUTPUTDRIVER-101))|(1<<(HiveParserKW_ENABLE-101))|(1<<(HiveParserKW_DISABLE-101))|(1<<(HiveParserKW_LOCATION-101))|(1<<(HiveParserKW_BUCKET-101)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(HiveParserKW_ADD-134))|(1<<(HiveParserKW_REPLACE-134))|(1<<(HiveParserKW_TEMPORARY-134))|(1<<(HiveParserKW_FILE-134))|(1<<(HiveParserKW_JAR-134))|(1<<(HiveParserKW_EXPLAIN-134))|(1<<(HiveParserKW_FORMATTED-134))|(1<<(HiveParserKW_DEPENDENCY-134))|(1<<(HiveParserKW_LOGICAL-134))|(1<<(HiveParserKW_SERDE-134))|(1<<(HiveParserKW_DEFERRED-134))|(1<<(HiveParserKW_SERDEPROPERTIES-134))|(1<<(HiveParserKW_DBPROPERTIES-134))|(1<<(HiveParserKW_LIMIT-134))|(1<<(HiveParserKW_OFFSET-134))|(1<<(HiveParserKW_UNSET-134))|(1<<(HiveParserKW_TBLPROPERTIES-134))|(1<<(HiveParserKW_IDXPROPERTIES-134))|(1<<(HiveParserKW_VALUE_TYPE-134))|(1<<(HiveParserKW_ELEM_TYPE-134))|(1<<(HiveParserKW_DEFINED-134)))) != 0) || (((_la-167)&-(0x1f+1)) == 0 && ((1<<uint((_la-167)))&((1<<(HiveParserKW_MAPJOIN-167))|(1<<(HiveParserKW_STREAMTABLE-167))|(1<<(HiveParserKW_CLUSTERSTATUS-167))|(1<<(HiveParserKW_UTC-167))|(1<<(HiveParserKW_UTCTIMESTAMP-167))|(1<<(HiveParserKW_LONG-167))|(1<<(HiveParserKW_PLUS-167))|(1<<(HiveParserKW_VIEW-167))|(1<<(HiveParserKW_VIEWS-167))|(1<<(HiveParserKW_DATABASES-167))|(1<<(HiveParserKW_MATERIALIZED-167))|(1<<(HiveParserKW_SCHEMA-167))|(1<<(HiveParserKW_SCHEMAS-167))|(1<<(HiveParserKW_SSL-167))|(1<<(HiveParserKW_UNDO-167))|(1<<(HiveParserKW_LOCK-167))|(1<<(HiveParserKW_LOCKS-167))|(1<<(HiveParserKW_UNLOCK-167))|(1<<(HiveParserKW_SHARED-167))|(1<<(HiveParserKW_EXCLUSIVE-167))|(1<<(HiveParserKW_UNSIGNED-167))|(1<<(HiveParserKW_WHILE-167))|(1<<(HiveParserKW_READ-167)))) != 0) || (((_la-200)&-(0x1f+1)) == 0 && ((1<<uint((_la-200)))&((1<<(HiveParserKW_PURGE-200))|(1<<(HiveParserKW_ANALYZE-200))|(1<<(HiveParserKW_BEFORE-200))|(1<<(HiveParserKW_CONTINUE-200))|(1<<(HiveParserKW_RECORDREADER-200))|(1<<(HiveParserKW_RECORDWRITER-200))|(1<<(HiveParserKW_SEMI-200))|(1<<(HiveParserKW_TOUCH-200))|(1<<(HiveParserKW_ARCHIVE-200))|(1<<(HiveParserKW_UNARCHIVE-200))|(1<<(HiveParserKW_COMPUTE-200))|(1<<(HiveParserKW_STATISTICS-200))|(1<<(HiveParserKW_USE-200))|(1<<(HiveParserKW_OPTION-200))|(1<<(HiveParserKW_CONCATENATE-200))|(1<<(HiveParserKW_SHOW_DATABASE-200))|(1<<(HiveParserKW_RESTRICT-200))|(1<<(HiveParserKW_CASCADE-200))|(1<<(HiveParserKW_SKEWED-200))|(1<<(HiveParserKW_DIRECTORIES-200)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(HiveParserKW_SETS-243))|(1<<(HiveParserKW_NOSCAN-243))|(1<<(HiveParserKW_ROLE-243))|(1<<(HiveParserKW_ROLES-243))|(1<<(HiveParserKW_URI-243))|(1<<(HiveParserKW_SERVER-243))|(1<<(HiveParserKW_ADMIN-243))|(1<<(HiveParserKW_OWNER-243))|(1<<(HiveParserKW_PRINCIPALS-243))|(1<<(HiveParserKW_COMPACT-243))|(1<<(HiveParserKW_COMPACTIONS-243))|(1<<(HiveParserKW_TRANSACTIONS-243))|(1<<(HiveParserKW_REWRITE-243))|(1<<(HiveParserKW_REOPTIMIZATION-243))|(1<<(HiveParserKW_RELOAD-243))|(1<<(HiveParserKW_YEAR-243))|(1<<(HiveParserKW_QUERY-243))|(1<<(HiveParserKW_QUARTER-243))|(1<<(HiveParserKW_MONTH-243))|(1<<(HiveParserKW_WEEK-243))|(1<<(HiveParserKW_DAY-243))|(1<<(HiveParserKW_DOW-243))|(1<<(HiveParserKW_HOUR-243))|(1<<(HiveParserKW_MINUTE-243))|(1<<(HiveParserKW_SECOND-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(HiveParserKW_TRANSACTION-276))|(1<<(HiveParserKW_WORK-276))|(1<<(HiveParserKW_WRITE-276))|(1<<(HiveParserKW_ISOLATION-276))|(1<<(HiveParserKW_LEVEL-276))|(1<<(HiveParserKW_SNAPSHOT-276))|(1<<(HiveParserKW_AUTOCOMMIT-276))|(1<<(HiveParserKW_CACHE-276))|(1<<(HiveParserKW_ENFORCED-276))|(1<<(HiveParserKW_VALIDATE-276))|(1<<(HiveParserKW_NOVALIDATE-276))|(1<<(HiveParserKW_RELY-276))|(1<<(HiveParserKW_NORELY-276))|(1<<(HiveParserKW_KEY-276))|(1<<(HiveParserKW_ABORT-276))|(1<<(HiveParserKW_MATCHED-276))|(1<<(HiveParserKW_REPL-276))|(1<<(HiveParserKW_DUMP-276))|(1<<(HiveParserKW_STATUS-276))|(1<<(HiveParserKW_VECTORIZATION-276))|(1<<(HiveParserKW_SUMMARY-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(HiveParserKW_OPERATOR-308))|(1<<(HiveParserKW_EXPRESSION-308))|(1<<(HiveParserKW_DETAIL-308))|(1<<(HiveParserKW_WAIT-308))|(1<<(HiveParserKW_RESOURCE-308))|(1<<(HiveParserKW_PLAN-308))|(1<<(HiveParserKW_QUERY_PARALLELISM-308))|(1<<(HiveParserKW_PLANS-308))|(1<<(HiveParserKW_ACTIVATE-308))|(1<<(HiveParserKW_DEFAULT-308))|(1<<(HiveParserKW_CHECK-308))|(1<<(HiveParserKW_POOL-308))|(1<<(HiveParserKW_MOVE-308))|(1<<(HiveParserKW_DO-308))|(1<<(HiveParserKW_ALLOC_FRACTION-308))|(1<<(HiveParserKW_SCHEDULING_POLICY-308))|(1<<(HiveParserKW_PATH-308))|(1<<(HiveParserKW_MAPPING-308))|(1<<(HiveParserKW_WORKLOAD-308))|(1<<(HiveParserKW_MANAGEMENT-308))|(1<<(HiveParserKW_ACTIVE-308))|(1<<(HiveParserKW_UNMANAGED-308)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISql11ReservedKeywordsUsedAsFunctionNameContext is an interface to support dynamic dispatch.
type ISql11ReservedKeywordsUsedAsFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql11ReservedKeywordsUsedAsFunctionNameContext differentiates from other interfaces.
	IsSql11ReservedKeywordsUsedAsFunctionNameContext()
}

type Sql11ReservedKeywordsUsedAsFunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql11ReservedKeywordsUsedAsFunctionNameContext() *Sql11ReservedKeywordsUsedAsFunctionNameContext {
	var p = new(Sql11ReservedKeywordsUsedAsFunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_sql11ReservedKeywordsUsedAsFunctionName
	return p
}

func (*Sql11ReservedKeywordsUsedAsFunctionNameContext) IsSql11ReservedKeywordsUsedAsFunctionNameContext() {
}

func NewSql11ReservedKeywordsUsedAsFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql11ReservedKeywordsUsedAsFunctionNameContext {
	var p = new(Sql11ReservedKeywordsUsedAsFunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_sql11ReservedKeywordsUsedAsFunctionName

	return p
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_IF() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IF, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_ARRAY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ARRAY, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_MAP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAP, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_BIGINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BIGINT, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_BINARY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BINARY, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_BOOLEAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_BOOLEAN, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT_DATE, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CURRENT_TIMESTAMP, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_DATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DATE, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_DOUBLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DOUBLE, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_FLOAT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FLOAT, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_GROUPING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUPING, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_INT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_INT, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_SMALLINT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SMALLINT, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) KW_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TIMESTAMP, 0)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterSql11ReservedKeywordsUsedAsFunctionName(s)
	}
}

func (s *Sql11ReservedKeywordsUsedAsFunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitSql11ReservedKeywordsUsedAsFunctionName(s)
	}
}

func (p *HiveParser) Sql11ReservedKeywordsUsedAsFunctionName() (localctx ISql11ReservedKeywordsUsedAsFunctionNameContext) {
	localctx = NewSql11ReservedKeywordsUsedAsFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, HiveParserRULE_sql11ReservedKeywordsUsedAsFunctionName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4135)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_IF || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(HiveParserKW_BOOLEAN-77))|(1<<(HiveParserKW_SMALLINT-77))|(1<<(HiveParserKW_INT-77))|(1<<(HiveParserKW_BIGINT-77))|(1<<(HiveParserKW_FLOAT-77))|(1<<(HiveParserKW_DOUBLE-77))|(1<<(HiveParserKW_DATE-77))|(1<<(HiveParserKW_TIMESTAMP-77))|(1<<(HiveParserKW_ARRAY-77))|(1<<(HiveParserKW_MAP-77)))) != 0) || _la == HiveParserKW_BINARY || _la == HiveParserKW_CURRENT_DATE || _la == HiveParserKW_CURRENT_TIMESTAMP || _la == HiveParserKW_GROUPING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IResourcePlanDdlStatementsContext is an interface to support dynamic dispatch.
type IResourcePlanDdlStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResourcePlanDdlStatementsContext differentiates from other interfaces.
	IsResourcePlanDdlStatementsContext()
}

type ResourcePlanDdlStatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourcePlanDdlStatementsContext() *ResourcePlanDdlStatementsContext {
	var p = new(ResourcePlanDdlStatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_resourcePlanDdlStatements
	return p
}

func (*ResourcePlanDdlStatementsContext) IsResourcePlanDdlStatementsContext() {}

func NewResourcePlanDdlStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourcePlanDdlStatementsContext {
	var p = new(ResourcePlanDdlStatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_resourcePlanDdlStatements

	return p
}

func (s *ResourcePlanDdlStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourcePlanDdlStatementsContext) CreateResourcePlanStatement() ICreateResourcePlanStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateResourcePlanStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateResourcePlanStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) AlterResourcePlanStatement() IAlterResourcePlanStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterResourcePlanStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterResourcePlanStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) DropResourcePlanStatement() IDropResourcePlanStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropResourcePlanStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropResourcePlanStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) GlobalWmStatement() IGlobalWmStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGlobalWmStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGlobalWmStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) ReplaceResourcePlanStatement() IReplaceResourcePlanStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceResourcePlanStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceResourcePlanStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) CreateTriggerStatement() ICreateTriggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTriggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTriggerStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) AlterTriggerStatement() IAlterTriggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTriggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTriggerStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) DropTriggerStatement() IDropTriggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTriggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTriggerStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) CreatePoolStatement() ICreatePoolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreatePoolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreatePoolStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) AlterPoolStatement() IAlterPoolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterPoolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterPoolStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) DropPoolStatement() IDropPoolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropPoolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropPoolStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) CreateMappingStatement() ICreateMappingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateMappingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateMappingStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) AlterMappingStatement() IAlterMappingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterMappingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterMappingStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) DropMappingStatement() IDropMappingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropMappingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropMappingStatementContext)
}

func (s *ResourcePlanDdlStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourcePlanDdlStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourcePlanDdlStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterResourcePlanDdlStatements(s)
	}
}

func (s *ResourcePlanDdlStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitResourcePlanDdlStatements(s)
	}
}

func (p *HiveParser) ResourcePlanDdlStatements() (localctx IResourcePlanDdlStatementsContext) {
	localctx = NewResourcePlanDdlStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, HiveParserRULE_resourcePlanDdlStatements)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 487, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4137)
			p.CreateResourcePlanStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4138)
			p.AlterResourcePlanStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4139)
			p.DropResourcePlanStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4140)
			p.GlobalWmStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4141)
			p.ReplaceResourcePlanStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4142)
			p.CreateTriggerStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4143)
			p.AlterTriggerStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4144)
			p.DropTriggerStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4145)
			p.CreatePoolStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4146)
			p.AlterPoolStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4147)
			p.DropPoolStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4148)
			p.CreateMappingStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4149)
			p.AlterMappingStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4150)
			p.DropMappingStatement()
		}

	}

	return localctx
}

// IRpAssignContext is an interface to support dynamic dispatch.
type IRpAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRpAssignContext differentiates from other interfaces.
	IsRpAssignContext()
}

type RpAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRpAssignContext() *RpAssignContext {
	var p = new(RpAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rpAssign
	return p
}

func (*RpAssignContext) IsRpAssignContext() {}

func NewRpAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RpAssignContext {
	var p = new(RpAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rpAssign

	return p
}

func (s *RpAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *RpAssignContext) KW_QUERY_PARALLELISM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUERY_PARALLELISM, 0)
}

func (s *RpAssignContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *RpAssignContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *RpAssignContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFAULT, 0)
}

func (s *RpAssignContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *RpAssignContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *RpAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RpAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RpAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRpAssign(s)
	}
}

func (s *RpAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRpAssign(s)
	}
}

func (p *HiveParser) RpAssign() (localctx IRpAssignContext) {
	localctx = NewRpAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, HiveParserRULE_rpAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4160)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_QUERY_PARALLELISM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4153)
			p.Match(HiveParserKW_QUERY_PARALLELISM)
		}
		{
			p.SetState(4154)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4155)
			p.Match(HiveParserNumber)
		}

	case HiveParserKW_DEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4156)
			p.Match(HiveParserKW_DEFAULT)
		}
		{
			p.SetState(4157)
			p.Match(HiveParserKW_POOL)
		}
		{
			p.SetState(4158)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4159)
			p.PoolPath()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRpAssignListContext is an interface to support dynamic dispatch.
type IRpAssignListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRpAssignListContext differentiates from other interfaces.
	IsRpAssignListContext()
}

type RpAssignListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRpAssignListContext() *RpAssignListContext {
	var p = new(RpAssignListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rpAssignList
	return p
}

func (*RpAssignListContext) IsRpAssignListContext() {}

func NewRpAssignListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RpAssignListContext {
	var p = new(RpAssignListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rpAssignList

	return p
}

func (s *RpAssignListContext) GetParser() antlr.Parser { return s.parser }

func (s *RpAssignListContext) AllRpAssign() []IRpAssignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRpAssignContext)(nil)).Elem())
	var tst = make([]IRpAssignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRpAssignContext)
		}
	}

	return tst
}

func (s *RpAssignListContext) RpAssign(i int) IRpAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRpAssignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRpAssignContext)
}

func (s *RpAssignListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *RpAssignListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *RpAssignListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RpAssignListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RpAssignListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRpAssignList(s)
	}
}

func (s *RpAssignListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRpAssignList(s)
	}
}

func (p *HiveParser) RpAssignList() (localctx IRpAssignListContext) {
	localctx = NewRpAssignListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, HiveParserRULE_rpAssignList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4162)
		p.RpAssign()
	}
	p.SetState(4167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(4163)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(4164)
			p.RpAssign()
		}

		p.SetState(4169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRpUnassignContext is an interface to support dynamic dispatch.
type IRpUnassignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRpUnassignContext differentiates from other interfaces.
	IsRpUnassignContext()
}

type RpUnassignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRpUnassignContext() *RpUnassignContext {
	var p = new(RpUnassignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rpUnassign
	return p
}

func (*RpUnassignContext) IsRpUnassignContext() {}

func NewRpUnassignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RpUnassignContext {
	var p = new(RpUnassignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rpUnassign

	return p
}

func (s *RpUnassignContext) GetParser() antlr.Parser { return s.parser }

func (s *RpUnassignContext) KW_QUERY_PARALLELISM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUERY_PARALLELISM, 0)
}

func (s *RpUnassignContext) KW_DEFAULT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DEFAULT, 0)
}

func (s *RpUnassignContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *RpUnassignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RpUnassignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RpUnassignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRpUnassign(s)
	}
}

func (s *RpUnassignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRpUnassign(s)
	}
}

func (p *HiveParser) RpUnassign() (localctx IRpUnassignContext) {
	localctx = NewRpUnassignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, HiveParserRULE_rpUnassign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4173)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_QUERY_PARALLELISM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4170)
			p.Match(HiveParserKW_QUERY_PARALLELISM)
		}

	case HiveParserKW_DEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4171)
			p.Match(HiveParserKW_DEFAULT)
		}
		{
			p.SetState(4172)
			p.Match(HiveParserKW_POOL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRpUnassignListContext is an interface to support dynamic dispatch.
type IRpUnassignListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRpUnassignListContext differentiates from other interfaces.
	IsRpUnassignListContext()
}

type RpUnassignListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRpUnassignListContext() *RpUnassignListContext {
	var p = new(RpUnassignListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_rpUnassignList
	return p
}

func (*RpUnassignListContext) IsRpUnassignListContext() {}

func NewRpUnassignListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RpUnassignListContext {
	var p = new(RpUnassignListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_rpUnassignList

	return p
}

func (s *RpUnassignListContext) GetParser() antlr.Parser { return s.parser }

func (s *RpUnassignListContext) AllRpUnassign() []IRpUnassignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRpUnassignContext)(nil)).Elem())
	var tst = make([]IRpUnassignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRpUnassignContext)
		}
	}

	return tst
}

func (s *RpUnassignListContext) RpUnassign(i int) IRpUnassignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRpUnassignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRpUnassignContext)
}

func (s *RpUnassignListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *RpUnassignListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *RpUnassignListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RpUnassignListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RpUnassignListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterRpUnassignList(s)
	}
}

func (s *RpUnassignListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitRpUnassignList(s)
	}
}

func (p *HiveParser) RpUnassignList() (localctx IRpUnassignListContext) {
	localctx = NewRpUnassignListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, HiveParserRULE_rpUnassignList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4175)
		p.RpUnassign()
	}
	p.SetState(4180)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(4176)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(4177)
			p.RpUnassign()
		}

		p.SetState(4182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateResourcePlanStatementContext is an interface to support dynamic dispatch.
type ICreateResourcePlanStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateResourcePlanStatementContext differentiates from other interfaces.
	IsCreateResourcePlanStatementContext()
}

type CreateResourcePlanStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateResourcePlanStatementContext() *CreateResourcePlanStatementContext {
	var p = new(CreateResourcePlanStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createResourcePlanStatement
	return p
}

func (*CreateResourcePlanStatementContext) IsCreateResourcePlanStatementContext() {}

func NewCreateResourcePlanStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateResourcePlanStatementContext {
	var p = new(CreateResourcePlanStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createResourcePlanStatement

	return p
}

func (s *CreateResourcePlanStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateResourcePlanStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateResourcePlanStatementContext) KW_RESOURCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESOURCE, 0)
}

func (s *CreateResourcePlanStatementContext) KW_PLAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLAN, 0)
}

func (s *CreateResourcePlanStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *CreateResourcePlanStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateResourcePlanStatementContext) KW_LIKE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_LIKE, 0)
}

func (s *CreateResourcePlanStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *CreateResourcePlanStatementContext) RpAssignList() IRpAssignListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRpAssignListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRpAssignListContext)
}

func (s *CreateResourcePlanStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateResourcePlanStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateResourcePlanStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateResourcePlanStatement(s)
	}
}

func (s *CreateResourcePlanStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateResourcePlanStatement(s)
	}
}

func (p *HiveParser) CreateResourcePlanStatement() (localctx ICreateResourcePlanStatementContext) {
	localctx = NewCreateResourcePlanStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, HiveParserRULE_createResourcePlanStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4183)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(4184)
		p.Match(HiveParserKW_RESOURCE)
	}
	{
		p.SetState(4185)
		p.Match(HiveParserKW_PLAN)
	}
	p.SetState(4195)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4186)
			p.Identifier()
		}
		{
			p.SetState(4187)
			p.Match(HiveParserKW_LIKE)
		}
		{
			p.SetState(4188)
			p.Identifier()
		}

	case 2:
		{
			p.SetState(4190)
			p.Identifier()
		}
		p.SetState(4193)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == HiveParserKW_WITH {
			{
				p.SetState(4191)
				p.Match(HiveParserKW_WITH)
			}
			{
				p.SetState(4192)
				p.RpAssignList()
			}

		}

	}

	return localctx
}

// IWithReplaceContext is an interface to support dynamic dispatch.
type IWithReplaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithReplaceContext differentiates from other interfaces.
	IsWithReplaceContext()
}

type WithReplaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithReplaceContext() *WithReplaceContext {
	var p = new(WithReplaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_withReplace
	return p
}

func (*WithReplaceContext) IsWithReplaceContext() {}

func NewWithReplaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithReplaceContext {
	var p = new(WithReplaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_withReplace

	return p
}

func (s *WithReplaceContext) GetParser() antlr.Parser { return s.parser }

func (s *WithReplaceContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *WithReplaceContext) KW_REPLACE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLACE, 0)
}

func (s *WithReplaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithReplaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithReplaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterWithReplace(s)
	}
}

func (s *WithReplaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitWithReplace(s)
	}
}

func (p *HiveParser) WithReplace() (localctx IWithReplaceContext) {
	localctx = NewWithReplaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, HiveParserRULE_withReplace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4197)
		p.Match(HiveParserKW_WITH)
	}
	{
		p.SetState(4198)
		p.Match(HiveParserKW_REPLACE)
	}

	return localctx
}

// IActivateContext is an interface to support dynamic dispatch.
type IActivateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsActivateContext differentiates from other interfaces.
	IsActivateContext()
}

type ActivateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActivateContext() *ActivateContext {
	var p = new(ActivateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_activate
	return p
}

func (*ActivateContext) IsActivateContext() {}

func NewActivateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActivateContext {
	var p = new(ActivateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_activate

	return p
}

func (s *ActivateContext) GetParser() antlr.Parser { return s.parser }

func (s *ActivateContext) KW_ACTIVATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ACTIVATE, 0)
}

func (s *ActivateContext) WithReplace() IWithReplaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithReplaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithReplaceContext)
}

func (s *ActivateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActivateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActivateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterActivate(s)
	}
}

func (s *ActivateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitActivate(s)
	}
}

func (p *HiveParser) Activate() (localctx IActivateContext) {
	localctx = NewActivateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, HiveParserRULE_activate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4200)
		p.Match(HiveParserKW_ACTIVATE)
	}
	p.SetState(4202)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(4201)
			p.WithReplace()
		}

	}

	return localctx
}

// IEnableContext is an interface to support dynamic dispatch.
type IEnableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnableContext differentiates from other interfaces.
	IsEnableContext()
}

type EnableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnableContext() *EnableContext {
	var p = new(EnableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_enable
	return p
}

func (*EnableContext) IsEnableContext() {}

func NewEnableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnableContext {
	var p = new(EnableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_enable

	return p
}

func (s *EnableContext) GetParser() antlr.Parser { return s.parser }

func (s *EnableContext) KW_ENABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ENABLE, 0)
}

func (s *EnableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterEnable(s)
	}
}

func (s *EnableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitEnable(s)
	}
}

func (p *HiveParser) Enable() (localctx IEnableContext) {
	localctx = NewEnableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, HiveParserRULE_enable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4204)
		p.Match(HiveParserKW_ENABLE)
	}

	return localctx
}

// IDisableContext is an interface to support dynamic dispatch.
type IDisableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDisableContext differentiates from other interfaces.
	IsDisableContext()
}

type DisableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDisableContext() *DisableContext {
	var p = new(DisableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_disable
	return p
}

func (*DisableContext) IsDisableContext() {}

func NewDisableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DisableContext {
	var p = new(DisableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_disable

	return p
}

func (s *DisableContext) GetParser() antlr.Parser { return s.parser }

func (s *DisableContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISABLE, 0)
}

func (s *DisableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DisableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DisableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDisable(s)
	}
}

func (s *DisableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDisable(s)
	}
}

func (p *HiveParser) Disable() (localctx IDisableContext) {
	localctx = NewDisableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, HiveParserRULE_disable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4206)
		p.Match(HiveParserKW_DISABLE)
	}

	return localctx
}

// IUnmanagedContext is an interface to support dynamic dispatch.
type IUnmanagedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnmanagedContext differentiates from other interfaces.
	IsUnmanagedContext()
}

type UnmanagedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnmanagedContext() *UnmanagedContext {
	var p = new(UnmanagedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_unmanaged
	return p
}

func (*UnmanagedContext) IsUnmanagedContext() {}

func NewUnmanagedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnmanagedContext {
	var p = new(UnmanagedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_unmanaged

	return p
}

func (s *UnmanagedContext) GetParser() antlr.Parser { return s.parser }

func (s *UnmanagedContext) KW_UNMANAGED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNMANAGED, 0)
}

func (s *UnmanagedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnmanagedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnmanagedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterUnmanaged(s)
	}
}

func (s *UnmanagedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitUnmanaged(s)
	}
}

func (p *HiveParser) Unmanaged() (localctx IUnmanagedContext) {
	localctx = NewUnmanagedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, HiveParserRULE_unmanaged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4208)
		p.Match(HiveParserKW_UNMANAGED)
	}

	return localctx
}

// IAlterResourcePlanStatementContext is an interface to support dynamic dispatch.
type IAlterResourcePlanStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterResourcePlanStatementContext differentiates from other interfaces.
	IsAlterResourcePlanStatementContext()
}

type AlterResourcePlanStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterResourcePlanStatementContext() *AlterResourcePlanStatementContext {
	var p = new(AlterResourcePlanStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterResourcePlanStatement
	return p
}

func (*AlterResourcePlanStatementContext) IsAlterResourcePlanStatementContext() {}

func NewAlterResourcePlanStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterResourcePlanStatementContext {
	var p = new(AlterResourcePlanStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterResourcePlanStatement

	return p
}

func (s *AlterResourcePlanStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterResourcePlanStatementContext) KW_ALTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALTER, 0)
}

func (s *AlterResourcePlanStatementContext) KW_RESOURCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESOURCE, 0)
}

func (s *AlterResourcePlanStatementContext) KW_PLAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLAN, 0)
}

func (s *AlterResourcePlanStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterResourcePlanStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterResourcePlanStatementContext) KW_VALIDATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_VALIDATE, 0)
}

func (s *AlterResourcePlanStatementContext) KW_DISABLE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DISABLE, 0)
}

func (s *AlterResourcePlanStatementContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterResourcePlanStatementContext) RpAssignList() IRpAssignListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRpAssignListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRpAssignListContext)
}

func (s *AlterResourcePlanStatementContext) KW_UNSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNSET, 0)
}

func (s *AlterResourcePlanStatementContext) RpUnassignList() IRpUnassignListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRpUnassignListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRpUnassignListContext)
}

func (s *AlterResourcePlanStatementContext) KW_RENAME() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RENAME, 0)
}

func (s *AlterResourcePlanStatementContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *AlterResourcePlanStatementContext) Activate() IActivateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IActivateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IActivateContext)
}

func (s *AlterResourcePlanStatementContext) Enable() IEnableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableContext)
}

func (s *AlterResourcePlanStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterResourcePlanStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterResourcePlanStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterResourcePlanStatement(s)
	}
}

func (s *AlterResourcePlanStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterResourcePlanStatement(s)
	}
}

func (p *HiveParser) AlterResourcePlanStatement() (localctx IAlterResourcePlanStatementContext) {
	localctx = NewAlterResourcePlanStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, HiveParserRULE_alterResourcePlanStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4210)
		p.Match(HiveParserKW_ALTER)
	}
	{
		p.SetState(4211)
		p.Match(HiveParserKW_RESOURCE)
	}
	{
		p.SetState(4212)
		p.Match(HiveParserKW_PLAN)
	}
	{
		p.SetState(4213)
		p.Identifier()
	}
	p.SetState(4233)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_VALIDATE:
		{
			p.SetState(4214)
			p.Match(HiveParserKW_VALIDATE)
		}

	case HiveParserKW_DISABLE:
		{
			p.SetState(4215)
			p.Match(HiveParserKW_DISABLE)
		}

	case HiveParserKW_SET:
		{
			p.SetState(4216)
			p.Match(HiveParserKW_SET)
		}
		{
			p.SetState(4217)
			p.RpAssignList()
		}

	case HiveParserKW_UNSET:
		{
			p.SetState(4218)
			p.Match(HiveParserKW_UNSET)
		}
		{
			p.SetState(4219)
			p.RpUnassignList()
		}

	case HiveParserKW_RENAME:
		{
			p.SetState(4220)
			p.Match(HiveParserKW_RENAME)
		}
		{
			p.SetState(4221)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(4222)
			p.Identifier()
		}

	case HiveParserKW_ENABLE, HiveParserKW_ACTIVATE:
		p.SetState(4231)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case HiveParserKW_ACTIVATE:
			{
				p.SetState(4223)
				p.Activate()
			}
			p.SetState(4225)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserKW_ENABLE {
				{
					p.SetState(4224)
					p.Enable()
				}

			}

		case HiveParserKW_ENABLE:
			{
				p.SetState(4227)
				p.Enable()
			}
			p.SetState(4229)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == HiveParserKW_ACTIVATE {
				{
					p.SetState(4228)
					p.Activate()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGlobalWmStatementContext is an interface to support dynamic dispatch.
type IGlobalWmStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobalWmStatementContext differentiates from other interfaces.
	IsGlobalWmStatementContext()
}

type GlobalWmStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobalWmStatementContext() *GlobalWmStatementContext {
	var p = new(GlobalWmStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_globalWmStatement
	return p
}

func (*GlobalWmStatementContext) IsGlobalWmStatementContext() {}

func NewGlobalWmStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GlobalWmStatementContext {
	var p = new(GlobalWmStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_globalWmStatement

	return p
}

func (s *GlobalWmStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GlobalWmStatementContext) KW_WORKLOAD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WORKLOAD, 0)
}

func (s *GlobalWmStatementContext) KW_MANAGEMENT() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MANAGEMENT, 0)
}

func (s *GlobalWmStatementContext) Enable() IEnableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableContext)
}

func (s *GlobalWmStatementContext) Disable() IDisableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDisableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDisableContext)
}

func (s *GlobalWmStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalWmStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GlobalWmStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterGlobalWmStatement(s)
	}
}

func (s *GlobalWmStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitGlobalWmStatement(s)
	}
}

func (p *HiveParser) GlobalWmStatement() (localctx IGlobalWmStatementContext) {
	localctx = NewGlobalWmStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, HiveParserRULE_globalWmStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4237)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ENABLE:
		{
			p.SetState(4235)
			p.Enable()
		}

	case HiveParserKW_DISABLE:
		{
			p.SetState(4236)
			p.Disable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(4239)
		p.Match(HiveParserKW_WORKLOAD)
	}
	{
		p.SetState(4240)
		p.Match(HiveParserKW_MANAGEMENT)
	}

	return localctx
}

// IReplaceResourcePlanStatementContext is an interface to support dynamic dispatch.
type IReplaceResourcePlanStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplaceResourcePlanStatementContext differentiates from other interfaces.
	IsReplaceResourcePlanStatementContext()
}

type ReplaceResourcePlanStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplaceResourcePlanStatementContext() *ReplaceResourcePlanStatementContext {
	var p = new(ReplaceResourcePlanStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_replaceResourcePlanStatement
	return p
}

func (*ReplaceResourcePlanStatementContext) IsReplaceResourcePlanStatementContext() {}

func NewReplaceResourcePlanStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceResourcePlanStatementContext {
	var p = new(ReplaceResourcePlanStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_replaceResourcePlanStatement

	return p
}

func (s *ReplaceResourcePlanStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceResourcePlanStatementContext) KW_REPLACE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_REPLACE, 0)
}

func (s *ReplaceResourcePlanStatementContext) KW_ACTIVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ACTIVE, 0)
}

func (s *ReplaceResourcePlanStatementContext) KW_RESOURCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESOURCE, 0)
}

func (s *ReplaceResourcePlanStatementContext) KW_PLAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLAN, 0)
}

func (s *ReplaceResourcePlanStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *ReplaceResourcePlanStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ReplaceResourcePlanStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ReplaceResourcePlanStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceResourcePlanStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceResourcePlanStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterReplaceResourcePlanStatement(s)
	}
}

func (s *ReplaceResourcePlanStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitReplaceResourcePlanStatement(s)
	}
}

func (p *HiveParser) ReplaceResourcePlanStatement() (localctx IReplaceResourcePlanStatementContext) {
	localctx = NewReplaceResourcePlanStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, HiveParserRULE_replaceResourcePlanStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4242)
		p.Match(HiveParserKW_REPLACE)
	}
	p.SetState(4254)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ACTIVE:
		{
			p.SetState(4243)
			p.Match(HiveParserKW_ACTIVE)
		}
		{
			p.SetState(4244)
			p.Match(HiveParserKW_RESOURCE)
		}
		{
			p.SetState(4245)
			p.Match(HiveParserKW_PLAN)
		}
		{
			p.SetState(4246)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(4247)
			p.Identifier()
		}

	case HiveParserKW_RESOURCE:
		{
			p.SetState(4248)
			p.Match(HiveParserKW_RESOURCE)
		}
		{
			p.SetState(4249)
			p.Match(HiveParserKW_PLAN)
		}
		{
			p.SetState(4250)
			p.Identifier()
		}
		{
			p.SetState(4251)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(4252)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDropResourcePlanStatementContext is an interface to support dynamic dispatch.
type IDropResourcePlanStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropResourcePlanStatementContext differentiates from other interfaces.
	IsDropResourcePlanStatementContext()
}

type DropResourcePlanStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropResourcePlanStatementContext() *DropResourcePlanStatementContext {
	var p = new(DropResourcePlanStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropResourcePlanStatement
	return p
}

func (*DropResourcePlanStatementContext) IsDropResourcePlanStatementContext() {}

func NewDropResourcePlanStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropResourcePlanStatementContext {
	var p = new(DropResourcePlanStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropResourcePlanStatement

	return p
}

func (s *DropResourcePlanStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropResourcePlanStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropResourcePlanStatementContext) KW_RESOURCE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_RESOURCE, 0)
}

func (s *DropResourcePlanStatementContext) KW_PLAN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PLAN, 0)
}

func (s *DropResourcePlanStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropResourcePlanStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropResourcePlanStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropResourcePlanStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropResourcePlanStatement(s)
	}
}

func (s *DropResourcePlanStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropResourcePlanStatement(s)
	}
}

func (p *HiveParser) DropResourcePlanStatement() (localctx IDropResourcePlanStatementContext) {
	localctx = NewDropResourcePlanStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, HiveParserRULE_dropResourcePlanStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4256)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(4257)
		p.Match(HiveParserKW_RESOURCE)
	}
	{
		p.SetState(4258)
		p.Match(HiveParserKW_PLAN)
	}
	{
		p.SetState(4259)
		p.Identifier()
	}

	return localctx
}

// IPoolPathContext is an interface to support dynamic dispatch.
type IPoolPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPoolPathContext differentiates from other interfaces.
	IsPoolPathContext()
}

type PoolPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPoolPathContext() *PoolPathContext {
	var p = new(PoolPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_poolPath
	return p
}

func (*PoolPathContext) IsPoolPathContext() {}

func NewPoolPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PoolPathContext {
	var p = new(PoolPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_poolPath

	return p
}

func (s *PoolPathContext) GetParser() antlr.Parser { return s.parser }

func (s *PoolPathContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *PoolPathContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PoolPathContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(HiveParserDOT)
}

func (s *PoolPathContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, i)
}

func (s *PoolPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PoolPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PoolPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPoolPath(s)
	}
}

func (s *PoolPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPoolPath(s)
	}
}

func (p *HiveParser) PoolPath() (localctx IPoolPathContext) {
	localctx = NewPoolPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, HiveParserRULE_poolPath)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4261)
		p.Identifier()
	}
	p.SetState(4266)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserDOT {
		{
			p.SetState(4262)
			p.Match(HiveParserDOT)
		}
		{
			p.SetState(4263)
			p.Identifier()
		}

		p.SetState(4268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITriggerExpressionContext is an interface to support dynamic dispatch.
type ITriggerExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerExpressionContext differentiates from other interfaces.
	IsTriggerExpressionContext()
}

type TriggerExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerExpressionContext() *TriggerExpressionContext {
	var p = new(TriggerExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerExpression
	return p
}

func (*TriggerExpressionContext) IsTriggerExpressionContext() {}

func NewTriggerExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerExpressionContext {
	var p = new(TriggerExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerExpression

	return p
}

func (s *TriggerExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerExpressionContext) TriggerAtomExpression() ITriggerAtomExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerAtomExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerAtomExpressionContext)
}

func (s *TriggerExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerExpression(s)
	}
}

func (s *TriggerExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerExpression(s)
	}
}

func (p *HiveParser) TriggerExpression() (localctx ITriggerExpressionContext) {
	localctx = NewTriggerExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, HiveParserRULE_triggerExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4269)
		p.TriggerAtomExpression()
	}

	return localctx
}

// ITriggerExpressionStandaloneContext is an interface to support dynamic dispatch.
type ITriggerExpressionStandaloneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerExpressionStandaloneContext differentiates from other interfaces.
	IsTriggerExpressionStandaloneContext()
}

type TriggerExpressionStandaloneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerExpressionStandaloneContext() *TriggerExpressionStandaloneContext {
	var p = new(TriggerExpressionStandaloneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerExpressionStandalone
	return p
}

func (*TriggerExpressionStandaloneContext) IsTriggerExpressionStandaloneContext() {}

func NewTriggerExpressionStandaloneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerExpressionStandaloneContext {
	var p = new(TriggerExpressionStandaloneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerExpressionStandalone

	return p
}

func (s *TriggerExpressionStandaloneContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerExpressionStandaloneContext) TriggerExpression() ITriggerExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerExpressionContext)
}

func (s *TriggerExpressionStandaloneContext) EOF() antlr.TerminalNode {
	return s.GetToken(HiveParserEOF, 0)
}

func (s *TriggerExpressionStandaloneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerExpressionStandaloneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerExpressionStandaloneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerExpressionStandalone(s)
	}
}

func (s *TriggerExpressionStandaloneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerExpressionStandalone(s)
	}
}

func (p *HiveParser) TriggerExpressionStandalone() (localctx ITriggerExpressionStandaloneContext) {
	localctx = NewTriggerExpressionStandaloneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, HiveParserRULE_triggerExpressionStandalone)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4271)
		p.TriggerExpression()
	}
	{
		p.SetState(4272)
		p.Match(HiveParserEOF)
	}

	return localctx
}

// ITriggerOrExpressionContext is an interface to support dynamic dispatch.
type ITriggerOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerOrExpressionContext differentiates from other interfaces.
	IsTriggerOrExpressionContext()
}

type TriggerOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerOrExpressionContext() *TriggerOrExpressionContext {
	var p = new(TriggerOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerOrExpression
	return p
}

func (*TriggerOrExpressionContext) IsTriggerOrExpressionContext() {}

func NewTriggerOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerOrExpressionContext {
	var p = new(TriggerOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerOrExpression

	return p
}

func (s *TriggerOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerOrExpressionContext) AllTriggerAndExpression() []ITriggerAndExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITriggerAndExpressionContext)(nil)).Elem())
	var tst = make([]ITriggerAndExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITriggerAndExpressionContext)
		}
	}

	return tst
}

func (s *TriggerOrExpressionContext) TriggerAndExpression(i int) ITriggerAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerAndExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITriggerAndExpressionContext)
}

func (s *TriggerOrExpressionContext) AllKW_OR() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_OR)
}

func (s *TriggerOrExpressionContext) KW_OR(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_OR, i)
}

func (s *TriggerOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerOrExpression(s)
	}
}

func (s *TriggerOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerOrExpression(s)
	}
}

func (p *HiveParser) TriggerOrExpression() (localctx ITriggerOrExpressionContext) {
	localctx = NewTriggerOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, HiveParserRULE_triggerOrExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4274)
		p.TriggerAndExpression()
	}
	p.SetState(4279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserKW_OR {
		{
			p.SetState(4275)
			p.Match(HiveParserKW_OR)
		}
		{
			p.SetState(4276)
			p.TriggerAndExpression()
		}

		p.SetState(4281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITriggerAndExpressionContext is an interface to support dynamic dispatch.
type ITriggerAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerAndExpressionContext differentiates from other interfaces.
	IsTriggerAndExpressionContext()
}

type TriggerAndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerAndExpressionContext() *TriggerAndExpressionContext {
	var p = new(TriggerAndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerAndExpression
	return p
}

func (*TriggerAndExpressionContext) IsTriggerAndExpressionContext() {}

func NewTriggerAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerAndExpressionContext {
	var p = new(TriggerAndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerAndExpression

	return p
}

func (s *TriggerAndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerAndExpressionContext) AllTriggerAtomExpression() []ITriggerAtomExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITriggerAtomExpressionContext)(nil)).Elem())
	var tst = make([]ITriggerAtomExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITriggerAtomExpressionContext)
		}
	}

	return tst
}

func (s *TriggerAndExpressionContext) TriggerAtomExpression(i int) ITriggerAtomExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerAtomExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITriggerAtomExpressionContext)
}

func (s *TriggerAndExpressionContext) AllKW_AND() []antlr.TerminalNode {
	return s.GetTokens(HiveParserKW_AND)
}

func (s *TriggerAndExpressionContext) KW_AND(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserKW_AND, i)
}

func (s *TriggerAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerAndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerAndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerAndExpression(s)
	}
}

func (s *TriggerAndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerAndExpression(s)
	}
}

func (p *HiveParser) TriggerAndExpression() (localctx ITriggerAndExpressionContext) {
	localctx = NewTriggerAndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, HiveParserRULE_triggerAndExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4282)
		p.TriggerAtomExpression()
	}
	p.SetState(4287)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserKW_AND {
		{
			p.SetState(4283)
			p.Match(HiveParserKW_AND)
		}
		{
			p.SetState(4284)
			p.TriggerAtomExpression()
		}

		p.SetState(4289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITriggerAtomExpressionContext is an interface to support dynamic dispatch.
type ITriggerAtomExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerAtomExpressionContext differentiates from other interfaces.
	IsTriggerAtomExpressionContext()
}

type TriggerAtomExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerAtomExpressionContext() *TriggerAtomExpressionContext {
	var p = new(TriggerAtomExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerAtomExpression
	return p
}

func (*TriggerAtomExpressionContext) IsTriggerAtomExpressionContext() {}

func NewTriggerAtomExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerAtomExpressionContext {
	var p = new(TriggerAtomExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerAtomExpression

	return p
}

func (s *TriggerAtomExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerAtomExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TriggerAtomExpressionContext) ComparisionOperator() IComparisionOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisionOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisionOperatorContext)
}

func (s *TriggerAtomExpressionContext) TriggerLiteral() ITriggerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerLiteralContext)
}

func (s *TriggerAtomExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerAtomExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerAtomExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerAtomExpression(s)
	}
}

func (s *TriggerAtomExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerAtomExpression(s)
	}
}

func (p *HiveParser) TriggerAtomExpression() (localctx ITriggerAtomExpressionContext) {
	localctx = NewTriggerAtomExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, HiveParserRULE_triggerAtomExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4290)
		p.Identifier()
	}
	{
		p.SetState(4291)
		p.ComparisionOperator()
	}
	{
		p.SetState(4292)
		p.TriggerLiteral()
	}

	return localctx
}

// ITriggerLiteralContext is an interface to support dynamic dispatch.
type ITriggerLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerLiteralContext differentiates from other interfaces.
	IsTriggerLiteralContext()
}

type TriggerLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerLiteralContext() *TriggerLiteralContext {
	var p = new(TriggerLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerLiteral
	return p
}

func (*TriggerLiteralContext) IsTriggerLiteralContext() {}

func NewTriggerLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerLiteralContext {
	var p = new(TriggerLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerLiteral

	return p
}

func (s *TriggerLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerLiteralContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *TriggerLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *TriggerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerLiteral(s)
	}
}

func (s *TriggerLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerLiteral(s)
	}
}

func (p *HiveParser) TriggerLiteral() (localctx ITriggerLiteralContext) {
	localctx = NewTriggerLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, HiveParserRULE_triggerLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4294)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserStringLiteral || _la == HiveParserNumber) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisionOperatorContext is an interface to support dynamic dispatch.
type IComparisionOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisionOperatorContext differentiates from other interfaces.
	IsComparisionOperatorContext()
}

type ComparisionOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisionOperatorContext() *ComparisionOperatorContext {
	var p = new(ComparisionOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_comparisionOperator
	return p
}

func (*ComparisionOperatorContext) IsComparisionOperatorContext() {}

func NewComparisionOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisionOperatorContext {
	var p = new(ComparisionOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_comparisionOperator

	return p
}

func (s *ComparisionOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisionOperatorContext) GREATERTHAN() antlr.TerminalNode {
	return s.GetToken(HiveParserGREATERTHAN, 0)
}

func (s *ComparisionOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisionOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisionOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterComparisionOperator(s)
	}
}

func (s *ComparisionOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitComparisionOperator(s)
	}
}

func (p *HiveParser) ComparisionOperator() (localctx IComparisionOperatorContext) {
	localctx = NewComparisionOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, HiveParserRULE_comparisionOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4296)
		p.Match(HiveParserGREATERTHAN)
	}

	return localctx
}

// ITriggerActionExpressionContext is an interface to support dynamic dispatch.
type ITriggerActionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerActionExpressionContext differentiates from other interfaces.
	IsTriggerActionExpressionContext()
}

type TriggerActionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerActionExpressionContext() *TriggerActionExpressionContext {
	var p = new(TriggerActionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerActionExpression
	return p
}

func (*TriggerActionExpressionContext) IsTriggerActionExpressionContext() {}

func NewTriggerActionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerActionExpressionContext {
	var p = new(TriggerActionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerActionExpression

	return p
}

func (s *TriggerActionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerActionExpressionContext) KW_KILL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_KILL, 0)
}

func (s *TriggerActionExpressionContext) KW_MOVE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MOVE, 0)
}

func (s *TriggerActionExpressionContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *TriggerActionExpressionContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *TriggerActionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerActionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerActionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerActionExpression(s)
	}
}

func (s *TriggerActionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerActionExpression(s)
	}
}

func (p *HiveParser) TriggerActionExpression() (localctx ITriggerActionExpressionContext) {
	localctx = NewTriggerActionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, HiveParserRULE_triggerActionExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4302)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_KILL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4298)
			p.Match(HiveParserKW_KILL)
		}

	case HiveParserKW_MOVE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4299)
			p.Match(HiveParserKW_MOVE)
		}
		{
			p.SetState(4300)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(4301)
			p.PoolPath()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITriggerActionExpressionStandaloneContext is an interface to support dynamic dispatch.
type ITriggerActionExpressionStandaloneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerActionExpressionStandaloneContext differentiates from other interfaces.
	IsTriggerActionExpressionStandaloneContext()
}

type TriggerActionExpressionStandaloneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerActionExpressionStandaloneContext() *TriggerActionExpressionStandaloneContext {
	var p = new(TriggerActionExpressionStandaloneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_triggerActionExpressionStandalone
	return p
}

func (*TriggerActionExpressionStandaloneContext) IsTriggerActionExpressionStandaloneContext() {}

func NewTriggerActionExpressionStandaloneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerActionExpressionStandaloneContext {
	var p = new(TriggerActionExpressionStandaloneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_triggerActionExpressionStandalone

	return p
}

func (s *TriggerActionExpressionStandaloneContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerActionExpressionStandaloneContext) TriggerActionExpression() ITriggerActionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerActionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerActionExpressionContext)
}

func (s *TriggerActionExpressionStandaloneContext) EOF() antlr.TerminalNode {
	return s.GetToken(HiveParserEOF, 0)
}

func (s *TriggerActionExpressionStandaloneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerActionExpressionStandaloneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerActionExpressionStandaloneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterTriggerActionExpressionStandalone(s)
	}
}

func (s *TriggerActionExpressionStandaloneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitTriggerActionExpressionStandalone(s)
	}
}

func (p *HiveParser) TriggerActionExpressionStandalone() (localctx ITriggerActionExpressionStandaloneContext) {
	localctx = NewTriggerActionExpressionStandaloneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, HiveParserRULE_triggerActionExpressionStandalone)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4304)
		p.TriggerActionExpression()
	}
	{
		p.SetState(4305)
		p.Match(HiveParserEOF)
	}

	return localctx
}

// ICreateTriggerStatementContext is an interface to support dynamic dispatch.
type ICreateTriggerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTriggerStatementContext differentiates from other interfaces.
	IsCreateTriggerStatementContext()
}

type CreateTriggerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTriggerStatementContext() *CreateTriggerStatementContext {
	var p = new(CreateTriggerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createTriggerStatement
	return p
}

func (*CreateTriggerStatementContext) IsCreateTriggerStatementContext() {}

func NewCreateTriggerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTriggerStatementContext {
	var p = new(CreateTriggerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createTriggerStatement

	return p
}

func (s *CreateTriggerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTriggerStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateTriggerStatementContext) KW_TRIGGER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRIGGER, 0)
}

func (s *CreateTriggerStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *CreateTriggerStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateTriggerStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *CreateTriggerStatementContext) KW_WHEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, 0)
}

func (s *CreateTriggerStatementContext) TriggerExpression() ITriggerExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerExpressionContext)
}

func (s *CreateTriggerStatementContext) KW_DO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DO, 0)
}

func (s *CreateTriggerStatementContext) TriggerActionExpression() ITriggerActionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerActionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerActionExpressionContext)
}

func (s *CreateTriggerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTriggerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTriggerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateTriggerStatement(s)
	}
}

func (s *CreateTriggerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateTriggerStatement(s)
	}
}

func (p *HiveParser) CreateTriggerStatement() (localctx ICreateTriggerStatementContext) {
	localctx = NewCreateTriggerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, HiveParserRULE_createTriggerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4307)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(4308)
		p.Match(HiveParserKW_TRIGGER)
	}
	{
		p.SetState(4309)
		p.Identifier()
	}
	{
		p.SetState(4310)
		p.Match(HiveParserDOT)
	}
	{
		p.SetState(4311)
		p.Identifier()
	}
	{
		p.SetState(4312)
		p.Match(HiveParserKW_WHEN)
	}
	{
		p.SetState(4313)
		p.TriggerExpression()
	}
	{
		p.SetState(4314)
		p.Match(HiveParserKW_DO)
	}
	{
		p.SetState(4315)
		p.TriggerActionExpression()
	}

	return localctx
}

// IAlterTriggerStatementContext is an interface to support dynamic dispatch.
type IAlterTriggerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTriggerStatementContext differentiates from other interfaces.
	IsAlterTriggerStatementContext()
}

type AlterTriggerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTriggerStatementContext() *AlterTriggerStatementContext {
	var p = new(AlterTriggerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterTriggerStatement
	return p
}

func (*AlterTriggerStatementContext) IsAlterTriggerStatementContext() {}

func NewAlterTriggerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTriggerStatementContext {
	var p = new(AlterTriggerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterTriggerStatement

	return p
}

func (s *AlterTriggerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTriggerStatementContext) KW_ALTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALTER, 0)
}

func (s *AlterTriggerStatementContext) KW_TRIGGER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRIGGER, 0)
}

func (s *AlterTriggerStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterTriggerStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterTriggerStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *AlterTriggerStatementContext) KW_WHEN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WHEN, 0)
}

func (s *AlterTriggerStatementContext) TriggerExpression() ITriggerExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerExpressionContext)
}

func (s *AlterTriggerStatementContext) KW_DO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DO, 0)
}

func (s *AlterTriggerStatementContext) TriggerActionExpression() ITriggerActionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerActionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerActionExpressionContext)
}

func (s *AlterTriggerStatementContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *AlterTriggerStatementContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *AlterTriggerStatementContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *AlterTriggerStatementContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *AlterTriggerStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *AlterTriggerStatementContext) KW_FROM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_FROM, 0)
}

func (s *AlterTriggerStatementContext) KW_UNMANAGED() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNMANAGED, 0)
}

func (s *AlterTriggerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTriggerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTriggerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterTriggerStatement(s)
	}
}

func (s *AlterTriggerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterTriggerStatement(s)
	}
}

func (p *HiveParser) AlterTriggerStatement() (localctx IAlterTriggerStatementContext) {
	localctx = NewAlterTriggerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, HiveParserRULE_alterTriggerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4317)
		p.Match(HiveParserKW_ALTER)
	}
	{
		p.SetState(4318)
		p.Match(HiveParserKW_TRIGGER)
	}
	{
		p.SetState(4319)
		p.Identifier()
	}
	{
		p.SetState(4320)
		p.Match(HiveParserDOT)
	}
	{
		p.SetState(4321)
		p.Identifier()
	}
	p.SetState(4341)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4322)
			p.Match(HiveParserKW_WHEN)
		}
		{
			p.SetState(4323)
			p.TriggerExpression()
		}
		{
			p.SetState(4324)
			p.Match(HiveParserKW_DO)
		}
		{
			p.SetState(4325)
			p.TriggerActionExpression()
		}

	case 2:
		{
			p.SetState(4327)
			p.Match(HiveParserKW_ADD)
		}
		{
			p.SetState(4328)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(4329)
			p.Match(HiveParserKW_POOL)
		}
		{
			p.SetState(4330)
			p.PoolPath()
		}

	case 3:
		{
			p.SetState(4331)
			p.Match(HiveParserKW_DROP)
		}
		{
			p.SetState(4332)
			p.Match(HiveParserKW_FROM)
		}
		{
			p.SetState(4333)
			p.Match(HiveParserKW_POOL)
		}
		{
			p.SetState(4334)
			p.PoolPath()
		}

	case 4:
		{
			p.SetState(4335)
			p.Match(HiveParserKW_ADD)
		}
		{
			p.SetState(4336)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(4337)
			p.Match(HiveParserKW_UNMANAGED)
		}

	case 5:
		{
			p.SetState(4338)
			p.Match(HiveParserKW_DROP)
		}
		{
			p.SetState(4339)
			p.Match(HiveParserKW_FROM)
		}
		{
			p.SetState(4340)
			p.Match(HiveParserKW_UNMANAGED)
		}

	}

	return localctx
}

// IDropTriggerStatementContext is an interface to support dynamic dispatch.
type IDropTriggerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTriggerStatementContext differentiates from other interfaces.
	IsDropTriggerStatementContext()
}

type DropTriggerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTriggerStatementContext() *DropTriggerStatementContext {
	var p = new(DropTriggerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropTriggerStatement
	return p
}

func (*DropTriggerStatementContext) IsDropTriggerStatementContext() {}

func NewDropTriggerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTriggerStatementContext {
	var p = new(DropTriggerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropTriggerStatement

	return p
}

func (s *DropTriggerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTriggerStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropTriggerStatementContext) KW_TRIGGER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRIGGER, 0)
}

func (s *DropTriggerStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *DropTriggerStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropTriggerStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *DropTriggerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTriggerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTriggerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropTriggerStatement(s)
	}
}

func (s *DropTriggerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropTriggerStatement(s)
	}
}

func (p *HiveParser) DropTriggerStatement() (localctx IDropTriggerStatementContext) {
	localctx = NewDropTriggerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, HiveParserRULE_dropTriggerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4343)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(4344)
		p.Match(HiveParserKW_TRIGGER)
	}
	{
		p.SetState(4345)
		p.Identifier()
	}
	{
		p.SetState(4346)
		p.Match(HiveParserDOT)
	}
	{
		p.SetState(4347)
		p.Identifier()
	}

	return localctx
}

// IPoolAssignContext is an interface to support dynamic dispatch.
type IPoolAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPoolAssignContext differentiates from other interfaces.
	IsPoolAssignContext()
}

type PoolAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPoolAssignContext() *PoolAssignContext {
	var p = new(PoolAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_poolAssign
	return p
}

func (*PoolAssignContext) IsPoolAssignContext() {}

func NewPoolAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PoolAssignContext {
	var p = new(PoolAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_poolAssign

	return p
}

func (s *PoolAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PoolAssignContext) KW_ALLOC_FRACTION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALLOC_FRACTION, 0)
}

func (s *PoolAssignContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(HiveParserEQUAL, 0)
}

func (s *PoolAssignContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *PoolAssignContext) KW_QUERY_PARALLELISM() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_QUERY_PARALLELISM, 0)
}

func (s *PoolAssignContext) KW_SCHEDULING_POLICY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEDULING_POLICY, 0)
}

func (s *PoolAssignContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *PoolAssignContext) KW_PATH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_PATH, 0)
}

func (s *PoolAssignContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *PoolAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PoolAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PoolAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPoolAssign(s)
	}
}

func (s *PoolAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPoolAssign(s)
	}
}

func (p *HiveParser) PoolAssign() (localctx IPoolAssignContext) {
	localctx = NewPoolAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, HiveParserRULE_poolAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4361)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_ALLOC_FRACTION:
		{
			p.SetState(4349)
			p.Match(HiveParserKW_ALLOC_FRACTION)
		}
		{
			p.SetState(4350)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4351)
			p.Match(HiveParserNumber)
		}

	case HiveParserKW_QUERY_PARALLELISM:
		{
			p.SetState(4352)
			p.Match(HiveParserKW_QUERY_PARALLELISM)
		}
		{
			p.SetState(4353)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4354)
			p.Match(HiveParserNumber)
		}

	case HiveParserKW_SCHEDULING_POLICY:
		{
			p.SetState(4355)
			p.Match(HiveParserKW_SCHEDULING_POLICY)
		}
		{
			p.SetState(4356)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4357)
			p.Match(HiveParserStringLiteral)
		}

	case HiveParserKW_PATH:
		{
			p.SetState(4358)
			p.Match(HiveParserKW_PATH)
		}
		{
			p.SetState(4359)
			p.Match(HiveParserEQUAL)
		}
		{
			p.SetState(4360)
			p.PoolPath()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPoolAssignListContext is an interface to support dynamic dispatch.
type IPoolAssignListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPoolAssignListContext differentiates from other interfaces.
	IsPoolAssignListContext()
}

type PoolAssignListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPoolAssignListContext() *PoolAssignListContext {
	var p = new(PoolAssignListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_poolAssignList
	return p
}

func (*PoolAssignListContext) IsPoolAssignListContext() {}

func NewPoolAssignListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PoolAssignListContext {
	var p = new(PoolAssignListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_poolAssignList

	return p
}

func (s *PoolAssignListContext) GetParser() antlr.Parser { return s.parser }

func (s *PoolAssignListContext) AllPoolAssign() []IPoolAssignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPoolAssignContext)(nil)).Elem())
	var tst = make([]IPoolAssignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPoolAssignContext)
		}
	}

	return tst
}

func (s *PoolAssignListContext) PoolAssign(i int) IPoolAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolAssignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPoolAssignContext)
}

func (s *PoolAssignListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(HiveParserCOMMA)
}

func (s *PoolAssignListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(HiveParserCOMMA, i)
}

func (s *PoolAssignListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PoolAssignListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PoolAssignListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterPoolAssignList(s)
	}
}

func (s *PoolAssignListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitPoolAssignList(s)
	}
}

func (p *HiveParser) PoolAssignList() (localctx IPoolAssignListContext) {
	localctx = NewPoolAssignListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, HiveParserRULE_poolAssignList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4363)
		p.PoolAssign()
	}
	p.SetState(4368)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == HiveParserCOMMA {
		{
			p.SetState(4364)
			p.Match(HiveParserCOMMA)
		}
		{
			p.SetState(4365)
			p.PoolAssign()
		}

		p.SetState(4370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreatePoolStatementContext is an interface to support dynamic dispatch.
type ICreatePoolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreatePoolStatementContext differentiates from other interfaces.
	IsCreatePoolStatementContext()
}

type CreatePoolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreatePoolStatementContext() *CreatePoolStatementContext {
	var p = new(CreatePoolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createPoolStatement
	return p
}

func (*CreatePoolStatementContext) IsCreatePoolStatementContext() {}

func NewCreatePoolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreatePoolStatementContext {
	var p = new(CreatePoolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createPoolStatement

	return p
}

func (s *CreatePoolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreatePoolStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreatePoolStatementContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *CreatePoolStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreatePoolStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *CreatePoolStatementContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *CreatePoolStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *CreatePoolStatementContext) PoolAssignList() IPoolAssignListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolAssignListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolAssignListContext)
}

func (s *CreatePoolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreatePoolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreatePoolStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreatePoolStatement(s)
	}
}

func (s *CreatePoolStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreatePoolStatement(s)
	}
}

func (p *HiveParser) CreatePoolStatement() (localctx ICreatePoolStatementContext) {
	localctx = NewCreatePoolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, HiveParserRULE_createPoolStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4371)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(4372)
		p.Match(HiveParserKW_POOL)
	}
	{
		p.SetState(4373)
		p.Identifier()
	}
	{
		p.SetState(4374)
		p.Match(HiveParserDOT)
	}
	{
		p.SetState(4375)
		p.PoolPath()
	}
	{
		p.SetState(4376)
		p.Match(HiveParserKW_WITH)
	}
	{
		p.SetState(4377)
		p.PoolAssignList()
	}

	return localctx
}

// IAlterPoolStatementContext is an interface to support dynamic dispatch.
type IAlterPoolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterPoolStatementContext differentiates from other interfaces.
	IsAlterPoolStatementContext()
}

type AlterPoolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterPoolStatementContext() *AlterPoolStatementContext {
	var p = new(AlterPoolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterPoolStatement
	return p
}

func (*AlterPoolStatementContext) IsAlterPoolStatementContext() {}

func NewAlterPoolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterPoolStatementContext {
	var p = new(AlterPoolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterPoolStatement

	return p
}

func (s *AlterPoolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterPoolStatementContext) KW_ALTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALTER, 0)
}

func (s *AlterPoolStatementContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *AlterPoolStatementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterPoolStatementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterPoolStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *AlterPoolStatementContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *AlterPoolStatementContext) KW_SET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SET, 0)
}

func (s *AlterPoolStatementContext) PoolAssignList() IPoolAssignListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolAssignListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolAssignListContext)
}

func (s *AlterPoolStatementContext) KW_UNSET() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_UNSET, 0)
}

func (s *AlterPoolStatementContext) KW_SCHEDULING_POLICY() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_SCHEDULING_POLICY, 0)
}

func (s *AlterPoolStatementContext) KW_ADD() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ADD, 0)
}

func (s *AlterPoolStatementContext) KW_TRIGGER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TRIGGER, 0)
}

func (s *AlterPoolStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *AlterPoolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterPoolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterPoolStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterPoolStatement(s)
	}
}

func (s *AlterPoolStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterPoolStatement(s)
	}
}

func (p *HiveParser) AlterPoolStatement() (localctx IAlterPoolStatementContext) {
	localctx = NewAlterPoolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, HiveParserRULE_alterPoolStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4379)
		p.Match(HiveParserKW_ALTER)
	}
	{
		p.SetState(4380)
		p.Match(HiveParserKW_POOL)
	}
	{
		p.SetState(4381)
		p.Identifier()
	}
	{
		p.SetState(4382)
		p.Match(HiveParserDOT)
	}
	{
		p.SetState(4383)
		p.PoolPath()
	}
	p.SetState(4394)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_SET:
		{
			p.SetState(4384)
			p.Match(HiveParserKW_SET)
		}
		{
			p.SetState(4385)
			p.PoolAssignList()
		}

	case HiveParserKW_UNSET:
		{
			p.SetState(4386)
			p.Match(HiveParserKW_UNSET)
		}
		{
			p.SetState(4387)
			p.Match(HiveParserKW_SCHEDULING_POLICY)
		}

	case HiveParserKW_ADD:
		{
			p.SetState(4388)
			p.Match(HiveParserKW_ADD)
		}
		{
			p.SetState(4389)
			p.Match(HiveParserKW_TRIGGER)
		}
		{
			p.SetState(4390)
			p.Identifier()
		}

	case HiveParserKW_DROP:
		{
			p.SetState(4391)
			p.Match(HiveParserKW_DROP)
		}
		{
			p.SetState(4392)
			p.Match(HiveParserKW_TRIGGER)
		}
		{
			p.SetState(4393)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDropPoolStatementContext is an interface to support dynamic dispatch.
type IDropPoolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropPoolStatementContext differentiates from other interfaces.
	IsDropPoolStatementContext()
}

type DropPoolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropPoolStatementContext() *DropPoolStatementContext {
	var p = new(DropPoolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropPoolStatement
	return p
}

func (*DropPoolStatementContext) IsDropPoolStatementContext() {}

func NewDropPoolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropPoolStatementContext {
	var p = new(DropPoolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropPoolStatement

	return p
}

func (s *DropPoolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropPoolStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropPoolStatementContext) KW_POOL() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_POOL, 0)
}

func (s *DropPoolStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropPoolStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(HiveParserDOT, 0)
}

func (s *DropPoolStatementContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *DropPoolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropPoolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropPoolStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropPoolStatement(s)
	}
}

func (s *DropPoolStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropPoolStatement(s)
	}
}

func (p *HiveParser) DropPoolStatement() (localctx IDropPoolStatementContext) {
	localctx = NewDropPoolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 812, HiveParserRULE_dropPoolStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4396)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(4397)
		p.Match(HiveParserKW_POOL)
	}
	{
		p.SetState(4398)
		p.Identifier()
	}
	{
		p.SetState(4399)
		p.Match(HiveParserDOT)
	}
	{
		p.SetState(4400)
		p.PoolPath()
	}

	return localctx
}

// ICreateMappingStatementContext is an interface to support dynamic dispatch.
type ICreateMappingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateMappingStatementContext differentiates from other interfaces.
	IsCreateMappingStatementContext()
}

type CreateMappingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateMappingStatementContext() *CreateMappingStatementContext {
	var p = new(CreateMappingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_createMappingStatement
	return p
}

func (*CreateMappingStatementContext) IsCreateMappingStatementContext() {}

func NewCreateMappingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateMappingStatementContext {
	var p = new(CreateMappingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_createMappingStatement

	return p
}

func (s *CreateMappingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateMappingStatementContext) KW_CREATE() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_CREATE, 0)
}

func (s *CreateMappingStatementContext) KW_MAPPING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAPPING, 0)
}

func (s *CreateMappingStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *CreateMappingStatementContext) KW_IN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IN, 0)
}

func (s *CreateMappingStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateMappingStatementContext) KW_USER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USER, 0)
}

func (s *CreateMappingStatementContext) KW_GROUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUP, 0)
}

func (s *CreateMappingStatementContext) KW_APPLICATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_APPLICATION, 0)
}

func (s *CreateMappingStatementContext) Unmanaged() IUnmanagedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnmanagedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnmanagedContext)
}

func (s *CreateMappingStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *CreateMappingStatementContext) KW_ORDER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ORDER, 0)
}

func (s *CreateMappingStatementContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *CreateMappingStatementContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *CreateMappingStatementContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *CreateMappingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateMappingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateMappingStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterCreateMappingStatement(s)
	}
}

func (s *CreateMappingStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitCreateMappingStatement(s)
	}
}

func (p *HiveParser) CreateMappingStatement() (localctx ICreateMappingStatementContext) {
	localctx = NewCreateMappingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 814, HiveParserRULE_createMappingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4402)
		p.Match(HiveParserKW_CREATE)
	}
	{
		p.SetState(4403)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_GROUP || _la == HiveParserKW_USER || _la == HiveParserKW_APPLICATION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4404)
		p.Match(HiveParserKW_MAPPING)
	}
	{
		p.SetState(4405)
		p.Match(HiveParserStringLiteral)
	}
	{
		p.SetState(4406)
		p.Match(HiveParserKW_IN)
	}
	{
		p.SetState(4407)
		p.Identifier()
	}
	p.SetState(4411)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_TO:
		{
			p.SetState(4408)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(4409)
			p.PoolPath()
		}

	case HiveParserKW_UNMANAGED:
		{
			p.SetState(4410)
			p.Unmanaged()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4416)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(4413)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(4414)
			p.Match(HiveParserKW_ORDER)
		}
		{
			p.SetState(4415)
			p.Match(HiveParserNumber)
		}

	}

	return localctx
}

// IAlterMappingStatementContext is an interface to support dynamic dispatch.
type IAlterMappingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterMappingStatementContext differentiates from other interfaces.
	IsAlterMappingStatementContext()
}

type AlterMappingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterMappingStatementContext() *AlterMappingStatementContext {
	var p = new(AlterMappingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_alterMappingStatement
	return p
}

func (*AlterMappingStatementContext) IsAlterMappingStatementContext() {}

func NewAlterMappingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterMappingStatementContext {
	var p = new(AlterMappingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_alterMappingStatement

	return p
}

func (s *AlterMappingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterMappingStatementContext) KW_ALTER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ALTER, 0)
}

func (s *AlterMappingStatementContext) KW_MAPPING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAPPING, 0)
}

func (s *AlterMappingStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *AlterMappingStatementContext) KW_IN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IN, 0)
}

func (s *AlterMappingStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterMappingStatementContext) KW_USER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USER, 0)
}

func (s *AlterMappingStatementContext) KW_GROUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUP, 0)
}

func (s *AlterMappingStatementContext) KW_APPLICATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_APPLICATION, 0)
}

func (s *AlterMappingStatementContext) Unmanaged() IUnmanagedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnmanagedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnmanagedContext)
}

func (s *AlterMappingStatementContext) KW_WITH() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_WITH, 0)
}

func (s *AlterMappingStatementContext) KW_ORDER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_ORDER, 0)
}

func (s *AlterMappingStatementContext) Number() antlr.TerminalNode {
	return s.GetToken(HiveParserNumber, 0)
}

func (s *AlterMappingStatementContext) KW_TO() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_TO, 0)
}

func (s *AlterMappingStatementContext) PoolPath() IPoolPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPoolPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPoolPathContext)
}

func (s *AlterMappingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterMappingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterMappingStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterAlterMappingStatement(s)
	}
}

func (s *AlterMappingStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitAlterMappingStatement(s)
	}
}

func (p *HiveParser) AlterMappingStatement() (localctx IAlterMappingStatementContext) {
	localctx = NewAlterMappingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, HiveParserRULE_alterMappingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4418)
		p.Match(HiveParserKW_ALTER)
	}
	{
		p.SetState(4419)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_GROUP || _la == HiveParserKW_USER || _la == HiveParserKW_APPLICATION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4420)
		p.Match(HiveParserKW_MAPPING)
	}
	{
		p.SetState(4421)
		p.Match(HiveParserStringLiteral)
	}
	{
		p.SetState(4422)
		p.Match(HiveParserKW_IN)
	}
	{
		p.SetState(4423)
		p.Identifier()
	}
	p.SetState(4427)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case HiveParserKW_TO:
		{
			p.SetState(4424)
			p.Match(HiveParserKW_TO)
		}
		{
			p.SetState(4425)
			p.PoolPath()
		}

	case HiveParserKW_UNMANAGED:
		{
			p.SetState(4426)
			p.Unmanaged()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4432)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == HiveParserKW_WITH {
		{
			p.SetState(4429)
			p.Match(HiveParserKW_WITH)
		}
		{
			p.SetState(4430)
			p.Match(HiveParserKW_ORDER)
		}
		{
			p.SetState(4431)
			p.Match(HiveParserNumber)
		}

	}

	return localctx
}

// IDropMappingStatementContext is an interface to support dynamic dispatch.
type IDropMappingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropMappingStatementContext differentiates from other interfaces.
	IsDropMappingStatementContext()
}

type DropMappingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropMappingStatementContext() *DropMappingStatementContext {
	var p = new(DropMappingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = HiveParserRULE_dropMappingStatement
	return p
}

func (*DropMappingStatementContext) IsDropMappingStatementContext() {}

func NewDropMappingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropMappingStatementContext {
	var p = new(DropMappingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = HiveParserRULE_dropMappingStatement

	return p
}

func (s *DropMappingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropMappingStatementContext) KW_DROP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_DROP, 0)
}

func (s *DropMappingStatementContext) KW_MAPPING() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_MAPPING, 0)
}

func (s *DropMappingStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(HiveParserStringLiteral, 0)
}

func (s *DropMappingStatementContext) KW_IN() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_IN, 0)
}

func (s *DropMappingStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropMappingStatementContext) KW_USER() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_USER, 0)
}

func (s *DropMappingStatementContext) KW_GROUP() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_GROUP, 0)
}

func (s *DropMappingStatementContext) KW_APPLICATION() antlr.TerminalNode {
	return s.GetToken(HiveParserKW_APPLICATION, 0)
}

func (s *DropMappingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropMappingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropMappingStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.EnterDropMappingStatement(s)
	}
}

func (s *DropMappingStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(HiveParserListener); ok {
		listenerT.ExitDropMappingStatement(s)
	}
}

func (p *HiveParser) DropMappingStatement() (localctx IDropMappingStatementContext) {
	localctx = NewDropMappingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, HiveParserRULE_dropMappingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4434)
		p.Match(HiveParserKW_DROP)
	}
	{
		p.SetState(4435)
		_la = p.GetTokenStream().LA(1)

		if !(_la == HiveParserKW_GROUP || _la == HiveParserKW_USER || _la == HiveParserKW_APPLICATION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4436)
		p.Match(HiveParserKW_MAPPING)
	}
	{
		p.SetState(4437)
		p.Match(HiveParserStringLiteral)
	}
	{
		p.SetState(4438)
		p.Match(HiveParserKW_IN)
	}
	{
		p.SetState(4439)
		p.Identifier()
	}

	return localctx
}

func (p *HiveParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 353:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *HiveParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 7)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
